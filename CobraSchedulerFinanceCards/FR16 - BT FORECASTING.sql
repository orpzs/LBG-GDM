
/************************************************************************/
/*JOB:      FR16 - BT FORECASTING                                       */
/*VERSION:  FR16v08- Step 4 Spool Amends                                */
/*20170602CA		-	changed step 6 to pull prev BW code
/*DATE VERSION IMPLEMENTED: 2019-08-01                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J09                                                                */
/*FR14                                                                  */
/*FR15                                                                  */
/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J09';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF FR15 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF FR14 IS SUCCESSFUL - ENSURE FEATURES ARE OK*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR14';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR16';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;


/*STEP 02: CHECKS TO SEE IF WORKING DAY IS WD1 */

SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPTOEND;

/*UPDATE START_DT AND TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR16'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 03: UPDATE DATE CONTROL TABLE FOR REPORT*/ 

/*
CREATE SET TABLE CC_COBRA.WK_FR16_DATES ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      PERIOD_START_DT DATE FORMAT 'YYYY-MM-DD',
      PERIOD_END_DT DATE FORMAT 'YYYY-MM-DD')
UNIQUE PRIMARY INDEX ( PERIOD_END_DT );

*/



UPDATE CC_COBRA.WK_FR16_DATES
SET PERIOD_START_DT = (SELECT CAST(((SOURCE_START_DT/100*100)+1) AS DATE) FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   ,PERIOD_END_DT = (SELECT ADD_MONTHS(CAST(((SOURCE_START_DT/100*100)+1) AS DATE),1)-1 FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR16_DATES INDEX ( PERIOD_END_DT );
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR16_DATES COLUMN ( PERIOD_START_DT );
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR16_DATES;


/*STEP 04: COLLECT ALL PLANS NOT ALREADY PICKED UP*/ 

/* STEP 04.1: ADDED ON 01/08/2019, THIS STEP BROKEN DOWN AT THE REQUEST OF TERADATA DBA'S	*/

/*
CREATE SET TABLE CC_COBRA.WK_FR16_BT_PLANS ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      FEATUR_ID INTEGER,
      ORIGNL_PLAN_NO INTEGER COMPRESS (10001 ,10002 ,10003 ),
      ORIGNL_PLAN_START_DT DATE FORMAT 'YYYY-MM-DD',
      REFRNC_NO VARCHAR(23) CHARACTER SET LATIN NOT CASESPECIFIC,
      EXPIRY_DT DATE,
      SOURCE_START_DT DATE FORMAT 'YYYY-MM-DD'
)
PRIMARY INDEX ( AGRMNT_ID )
;
*/

DELETE FROM CC_COBRA.WK_FR16_BT_PLANS;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR16_BT_PLANS
SELECT 
 AF.AGRMNT_ID
,AF.FEATUR_ID
,CP.ORIGNL_PLAN_NO
,CP.ORIGNL_PLAN_START_DT
,CP.REFRNC_NO
,MAX(EXPIRY_DT) AS EXPIRY_DT
,MIN(AF.SOURCE_START_DT) AS SOURCE_START_DT
FROM GDW_VIEWSX.AGREEMENT_FEATURE AF
JOIN GDW_VIEWS.CREDIT_CARD_AGREEMENT_GL CCA
ON AF.AGRMNT_ID = CCA.AGRMNT_ID
JOIN GDW_VIEWSX.CC_CREDIT_PLAN_LOOKUP CP
ON   AF.FEATUR_ID = CP.FEATUR_ID
JOIN CC_COBRA.CC_PLAN_LOOKUP PL
ON   CP.ORIGNL_PLAN_NO = PL.PLAN_NO
AND  CP.ORG_TX = PL.ORG_TX
AND  (PL.BW_PLAN_TYPE_CD = 'B' OR
      CP.ORIGNL_PLAN_NO = '10003') 
AND NOT EXISTS (
SELECT NULL FROM CC_COBRA.FR16_BT_PLANS BTP
WHERE AF.AGRMNT_ID = BTP.AGRMNT_ID
AND   AF.FEATUR_ID = BTP.FEATUR_ID)
GROUP BY 1,2,3,4,5
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR16_BT_PLANS INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* STEP 4.2: ORIGINAL QUERY AMENDED TO REFERENCE OUR NEW WK TABLE		*/

/*
CREATE SET TABLE CC_COBRA.FR16_BT_PLANS ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      FEATUR_ID INTEGER,
      ORIGNL_PLAN_NO INTEGER COMPRESS (10001 ,10002 ,10003 ),
      ORIGNL_PLAN_START_DT DATE FORMAT 'YYYY-MM-DD',
      REFRNC_NO VARCHAR(23) CHARACTER SET LATIN NOT CASESPECIFIC,
      ADDED_DT DATE,
      EXPIRY_DT DATE,
      FLIP_DT DATE,
      PURGE_DT DATE,
      PLAN_OPEN_BALANC DECIMAL(9,2)
)
PRIMARY INDEX ( AGRMNT_ID );
*/

INSERT INTO CC_COBRA.FR16_BT_PLANS 
SELECT 
 AF.AGRMNT_ID
,AF.FEATUR_ID
,AF.ORIGNL_PLAN_NO
,AF.ORIGNL_PLAN_START_DT
,AF.REFRNC_NO
,AF.SOURCE_START_DT
,CASE WHEN CAST(AFF.EFFCTV_DT AS INT) >= 1470101 THEN DATE'2049-12-31' ELSE AFF.EFFCTV_DT END
,CASE WHEN CAST(AFF.EFFCTV_DT AS INT) >= 1470101 THEN DATE'2050-01-01' ELSE AFF.EFFCTV_DT+1 END
,AF.EXPIRY_DT
,ZEROIFNULL(AFB.AGRMNT_FEATUR_BL_AM) AS OPEN_BALANC_AM

FROM
(
SELECT * FROM CC_COBRA.WK_FR16_BT_PLANS
) AF

LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF
ON   AF.AGRMNT_ID = AFF.AGRMNT_ID
AND  AF.FEATUR_ID = AFF.FEATUR_ID
AND  AFF.RELATD_FEATUR_ID = 5020
AND  AF.SOURCE_START_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1

LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON   AF.AGRMNT_ID  = AFB.AGRMNT_ID
AND  AF.FEATUR_ID = AFB.FEATUR_ID
AND  AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
AND  AF.SOURCE_START_DT BETWEEN AFB.SOURCE_START_DT AND AFB.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR16_BT_PLANS INDEX ( AGRMNT_ID );

/*STEP 5: PERFORM UPDATES TO DATA ITEMS IN CC_COBRA.FR16_BT_PLANS*/

/*5.1 UPDATE ORIGINAL BALANCE FOR BTS THAT HAVE BEEN CONVERTED FROM EQUASION*/
/*ONLY NEEDED IF RE-RUNNING

UPDATE CC_COBRA.FR16_BT_PLANS
FROM (
SELECT AF.AGRMNT_ID, AF.FEATUR_ID, AFB.AGRMNT_FEATUR_BL_AM
FROM CC_COBRA.FR16_BT_PLANS AF 
JOIN GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON   AF.AGRMNT_ID  = AFB.AGRMNT_ID
AND  AF.FEATUR_ID = AFB.FEATUR_ID 
AND  AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500001'
AND  AFB.START_DT = 101
) T1
SET PLAN_OPEN_BALANC = T1.AGRMNT_FEATUR_BL_AM
WHERE CC_COBRA.FR16_BT_PLANS.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.FR16_BT_PLANS.FEATUR_ID = T1.FEATUR_ID
;
*/

/*5.2 THESE ARE CONVERTED BTS - WE HAVE NO TRUE OPENING BALANCE FOR THESE*/

/*ONLY NEEDED IF RE-RUNNING
UPDATE CC_COBRA.FR16_BT_PLANS
FROM (
SELECT AF.AGRMNT_ID, AF.FEATUR_ID, AFB.AGRMNT_FEATUR_BL_AM
FROM CC_COBRA.FR16_BT_PLANS AF 
JOIN GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON   AF.AGRMNT_ID  = AFB.AGRMNT_ID
AND  AF.FEATUR_ID = AFB.FEATUR_ID 
AND  AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500001'
AND  AF.PLAN_OPEN_BALANC = 0
AND  AFB.START_DT = 1091017
) T1
SET PLAN_OPEN_BALANC = NULL
WHERE CC_COBRA.FR16_BT_PLANS.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.FR16_BT_PLANS.FEATUR_ID = T1.FEATUR_ID
;
*/

/*5.3 UPDATE EXPIRED PLANS FLIP DATE*/

UPDATE CC_COBRA.FR16_BT_PLANS 
FROM (
SELECT AGRMNT_ID, FEATUR_ID, MIN(SOURCE_START_DT) AS MIN_SSD
FROM GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE
WHERE RELATD_FEATUR_ID = 5018
AND   AGRMNT_FEATUR_FEATUR_NO = '10003'
GROUP BY 1,2) A
SET FLIP_DT = A.MIN_SSD
WHERE CC_COBRA.FR16_BT_PLANS.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.FR16_BT_PLANS.FEATUR_ID = A.FEATUR_ID
AND   (CC_COBRA.FR16_BT_PLANS.FLIP_DT <> A.MIN_SSD OR CC_COBRA.FR16_BT_PLANS.FLIP_DT IS NULL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*5.4 UPDATE FLIP AND EXPIRY OF IMMEDIATELY 0 BALANCE BTS TO ADDED DATE*/

UPDATE CC_COBRA.FR16_BT_PLANS 
SET FLIP_DT = ADDED_DT
   ,EXPIRY_DT = ADDED_DT
WHERE EXPIRY_DT IS NULL
AND   FLIP_DT IS NULL
AND   PLAN_OPEN_BALANC = 0;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*5.5 UPDATE FLIP AND EXPIRY OF PLANS IMMEDIATELY FLIPPED*/

UPDATE CC_COBRA.FR16_BT_PLANS 
SET  EXPIRY_DT = ADDED_DT
WHERE EXPIRY_DT IS NULL
AND   FLIP_DT = ADDED_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*5.6 UPDATE PURGE DATES FOR PURGED PLANS*/


UPDATE CC_COBRA.FR16_BT_PLANS 
FROM (SELECT *
      FROM GDW_VIEWSX.AGREEMENT_FEATURE 
      WHERE SOURCE_END_DT = '3500/12/31'
      ) AF
SET  PURGE_DT = AF.EXPIRY_DT
WHERE CC_COBRA.FR16_BT_PLANS.AGRMNT_ID = AF.AGRMNT_ID
AND   CC_COBRA.FR16_BT_PLANS.FEATUR_ID = AF.FEATUR_ID
AND   (CC_COBRA.FR16_BT_PLANS.PURGE_DT <> AF.EXPIRY_DT
OR    (CC_COBRA.FR16_BT_PLANS.PURGE_DT IS NULL AND AF.EXPIRY_DT IS NOT NULL))
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*5.7 UPDATE PURGE DATES FOR PURGED AGREEMENTS*/

UPDATE CC_COBRA.FR16_BT_PLANS 
FROM (SELECT *
      FROM GDW_VIEWSX.AGREEMENT
      WHERE SOURCE_END_DT = '3500/12/31'
      ) A
SET  PURGE_DT = A.AGRMNT_EXPIRY_DT
WHERE CC_COBRA.FR16_BT_PLANS.AGRMNT_ID = A.AGRMNT_ID
AND   ((CC_COBRA.FR16_BT_PLANS.PURGE_DT <> A.AGRMNT_EXPIRY_DT AND CC_COBRA.FR16_BT_PLANS.PURGE_DT > A.AGRMNT_EXPIRY_DT)
OR    CC_COBRA.FR16_BT_PLANS.PURGE_DT IS NULL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 6: COLLECT ALL PLANS*/

/*
DROP TABLE CC_COBRA.WK_FR16_PLANS_T1 ;
CREATE SET TABLE CC_COBRA.WK_FR16_PLANS_T1 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      FEATUR_ID INTEGER,
      PERIOD_START_DT DATE FORMAT 'YYYY-MM-DD',
      PERIOD_END_DT DATE FORMAT 'YYYY-MM-DD',
      PLAN_NO INTEGER COMPRESS (10003),
      PLAN_TYPE_CD CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('B','C','R'),
      BALANC_TYPE_CD CHAR(6),
      ANNUAL_INTRST_RT DECIMAL(5,3),
      OPEN_BALANC_AM DECIMAL(9,2) COMPRESS 0.00 ,
      CLOSE_BALANC_AM DECIMAL(9,2) COMPRESS 0.00 ,
      INTRST_AM DECIMAL(9,2) COMPRESS 0.00 
)
PRIMARY INDEX ( AGRMNT_ID );
*/


DELETE FROM CC_COBRA.WK_FR16_PLANS_T1 ALL;

INSERT INTO CC_COBRA.WK_FR16_PLANS_T1
SELECT 
 AF.AGRMNT_ID
,AF.FEATUR_ID
,AF.PERIOD_START_DT
,AF.PERIOD_END_DT
,AF.PLAN_NO
,CASE WHEN AF.PLAN_NO = 10001 THEN 'C'
            WHEN AF.PLAN_NO BETWEEN 10002 AND 10006 THEN 'R'
            WHEN AF.PLAN_NO BETWEEN 15000 AND 19999 THEN 'B'
            WHEN AF.PLAN_NO BETWEEN 20000 AND 24999 THEN 'R'
            WHEN AF.PLAN_NO BETWEEN 25000 AND 29999 THEN 'B'
            WHEN AF.PLAN_NO BETWEEN 30000 AND 34999 THEN 'R'
            WHEN AF.PLAN_NO BETWEEN 35000 AND 39999 THEN 'M'  
            ELSE NULL
 END AS PLAN_TYPE 
--,AF.BALANC_TYPE_CD
,AF.BALANC_TYPE_CD_P1705 --20170602CA - changed from line above as job was falling over as this could not be found
,AF.AGRMNT_FEATUR_FEATUR_RT
,ZEROIFNULL(CASE WHEN FT.AGRMNT_ID IS NULL THEN 0 
                 WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 0
                 ELSE AFB.AGRMNT_FEATUR_BL_AM END) AS OPEN_BALANC_AM
,ZEROIFNULL(ME_BAL) AS CLOSE_BALANC_AM
,ZEROIFNULL(INTEREST_AM) AS INTRST_AM

FROM 
(SELECT 
    AF.AGRMNT_ID
   ,AF.FEATUR_ID
   ,CAST(AFF.AGRMNT_FEATUR_FEATUR_NO AS INT) AS PLAN_NO
   ,VD.PERIOD_START_DT
   ,VD.PERIOD_END_DT
   ,LU.BALANC_TYPE_CD_P1705
   ,AFF2.AGRMNT_FEATUR_FEATUR_RT AS AGRMNT_FEATUR_FEATUR_RT
   ,CASE WHEN PT.BALANC_TYPE_CD = 'ZZZZZZ' THEN 0
             WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 0
             ELSE AFB.AGRMNT_FEATUR_BL_AM END AS ME_BAL
   ,AFS.AGRMNT_FEATUR_AM AS INTEREST_AM
FROM CC_COBRA.FR16_BT_PLANS AF
JOIN CC_COBRA.WK_FR16_DATES VD
ON   VD.PERIOD_END_DT >= AF.ADDED_DT  

JOIN GDW_VIEWSX.AGREEMENT_FEATURE FT
ON   AF.AGRMNT_ID = FT.AGRMNT_ID
AND  AF.FEATUR_ID = FT.FEATUR_ID
AND  VD.PERIOD_END_DT BETWEEN FT.SOURCE_START_DT AND FT.SOURCE_END_DT-1
AND  FT.EXPIRY_DT IS NULL

JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF
ON   AF.AGRMNT_ID = AFF.AGRMNT_ID
AND  AF.FEATUR_ID = AFF.FEATUR_ID
AND  AFF.RELATD_FEATUR_ID = 5018
AND  VD.PERIOD_END_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1 

JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF2
ON   AF.AGRMNT_ID = AFF2.AGRMNT_ID
AND  AF.FEATUR_ID = AFF2.FEATUR_ID
AND  AFF2.RELATD_FEATUR_ID = 5013
AND  VD.PERIOD_END_DT BETWEEN AFF2.SOURCE_START_DT AND AFF2.SOURCE_END_DT-1

LEFT JOIN CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE PT
ON   AF.AGRMNT_ID = PT.AGRMNT_ID
AND  AF.FEATUR_ID = PT.FEATUR_ID
AND  VD.PERIOD_END_DT BETWEEN PT.SOURCE_START_DT AND PT.SOURCE_END_DT-1

LEFT JOIN CC_COBRA.FR15_BALANC_TYPE_CD_LOOKUP LU  --CHANGE JM 2017-05-19
ON     PT.NEW_BALANC_TYPE_CD = LU.BALANC_TYPE_CD

LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON   AF.AGRMNT_ID  = AFB.AGRMNT_ID
AND  AF.FEATUR_ID = AFB.FEATUR_ID
AND  AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
AND  VD.PERIOD_END_DT BETWEEN AFB.SOURCE_START_DT AND AFB.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   AF.AGRMNT_ID  = ASS.AGRMNT_ID
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
AND  VD.PERIOD_END_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_SUMMARY AFS
ON   AF.AGRMNT_ID  = AFS.AGRMNT_ID
AND  AF.FEATUR_ID = AFS.FEATUR_ID
AND  AFS.AGRMNT_FEATUR_SUMMRY_TYPE_CD = '00500011' /*LAST CYCLE BILLED INT*/
AND  VD.PERIOD_END_DT BETWEEN AFS.SOURCE_START_DT AND AFS.SOURCE_END_DT-1
) AF

LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE FT
ON   AF.AGRMNT_ID = FT.AGRMNT_ID
AND  AF.FEATUR_ID = FT.FEATUR_ID
AND  AF.PERIOD_START_DT-1 BETWEEN FT.SOURCE_START_DT AND FT.SOURCE_END_DT-1
AND  FT.EXPIRY_DT IS NULL

LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON   AF.AGRMNT_ID  = AFB.AGRMNT_ID
AND  AF.FEATUR_ID = AFB.FEATUR_ID
AND  AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
AND  AF.PERIOD_START_DT-1 BETWEEN AFB.SOURCE_START_DT AND AFB.SOURCE_END_DT-1

LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   AF.AGRMNT_ID  = ASS.AGRMNT_ID
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
AND  AF.PERIOD_START_DT-1 BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR16_PLANS_T1 INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR16_PLANS_T1 COLUMN(FEATUR_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 07: - COLLATE DATA*/

/*
CREATE SET TABLE CC_COBRA.FR16_REPORT2,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      V_ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      LOGO_CD SMALLINT,
      PERIOD_END_DT DATE FORMAT 'YY/MM/DD',
      ORIGNL_PLAN_NO INTEGER,
      PLAN_NO INTEGER,
      PLAN_TYPE_CD CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC,
      BALANC_TYPE_CD CHAR(6),
      CUSTMR_CATGRY CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC,
      PLAN_RT DECIMAL(15,5),
      APPLIED_RT DECIMAL(5,3),
      PLAN_DURATION INTEGER,
      BT_MTH DATE FORMAT 'YY/MM/DD',
      BT_END_MTH DATE FORMAT 'YY/MM/DD',
      FLIP_MTH DATE FORMAT 'YY/MM/DD',
      CLOSE_BALANC_AM DECIMAL(15,2),
      OPEN_BALANC_AM DECIMAL(15,2),
      INTRST_AM DECIMAL(15,2),
      VOLUME INTEGER)
PRIMARY INDEX ( ORG ,LOGO_CD ,PERIOD_END_DT ,ORIGNL_PLAN_NO ,
PLAN_NO ,PLAN_TYPE_CD ,BALANC_TYPE_CD,CUSTMR_CATGRY ,PLAN_RT,APPLIED_RT,PLAN_DURATION,BT_MTH);

*/

DELETE FROM CC_COBRA.FR16_REPORT  WHERE PERIOD_END_DT IN (SELECT PERIOD_END_DT FROM CC_COBRA.WK_FR16_DATES);

INSERT INTO CC_COBRA.FR16_REPORT
SELECT 
AD.ORG_TX
,AD.V_ORG
,FS.LOGO_CD
,A.PERIOD_END_DT
,BP.ORIGNL_PLAN_NO
,A.PLAN_NO
,A.PLAN_TYPE_CD
,A.BALANC_TYPE_CD
,F.CUSTMR_CATGRY
,B.RATE AS PLAN_RT
,A.ANNUAL_INTRST_RT AS APPLIED_RT
,B.MONTHS AS PLAN_DURATION
,CAST((ORIGNL_PLAN_START_DT/100*100)+1 AS DATE) AS BT_MTH
,CAST((EXPIRY_DT/100*100)+1 AS DATE) AS BT_END_MTH
,CAST((FLIP_DT/100*100)+1 AS DATE) AS FLIP_MTH
,SUM(CLOSE_BALANC_AM) AS CLOSE_BALANC_AM
,SUM(OPEN_BALANC_AM) AS OPEN_BALANC_AM
,SUM(INTRST_AM) AS INTRST_AM
,COUNT(*) AS VOLUME

FROM  CC_COBRA.FR16_BT_PLANS BP
JOIN  CC_COBRA.CC_AGREEMENT_ADDED_DATE AD
ON    BP.AGRMNT_ID = AD.AGRMNT_ID
JOIN  CC_COBRA.WK_FR16_PLANS_T1 A
ON    BP.AGRMNT_ID = A.AGRMNT_ID
AND   BP.FEATUR_ID = A.FEATUR_ID
JOIN  CC_COBRA.FR15_FLAGS F
ON    BP.AGRMNT_ID = F.AGRMNT_ID
AND   A.PERIOD_END_DT = F.PERIOD_END_DT
JOIN  CC_COBRA.FR15_FLAGS_STATIC FS
ON    BP.AGRMNT_ID = FS.AGRMNT_ID
LEFT JOIN CC_COBRA.CC_BT_ORG_PLAN_LOOKUP B
ON    BP.ORIGNL_PLAN_NO = B.PLAN_NO
AND   AD.ORG_TX = B.ORG_TX
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR16_REPORT INDEX ( ORG ,LOGO_CD ,PERIOD_END_DT ,ORIGNL_PLAN_NO ,
PLAN_NO ,PLAN_TYPE_CD ,BALANC_TYPE_CD,CUSTMR_CATGRY ,PLAN_RT,APPLIED_RT,PLAN_DURATION,BT_MTH);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR16'
;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR16';

.LABEL SKIPTOEND;

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR16'
;

.QUIT 0;