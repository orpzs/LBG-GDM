/************************************************************************/
/*JOB:      FR15 - BALANCE WALK                                         */
/*VERSION:  FR15V20 - Agreement Relationship pre-emptive fix - section 2*/
/*DATE VERSION IMPLEMENTED: 2019-05-30                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J13                                                                */
/*FR14                                                                  */    
/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CHANNEL TABLE HAS COMPLETED*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J13';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR15';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*INITIAL CHECKS TO SEE IF FR14 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR14';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*NOTE THIS JOB SHOULD ONLY BE RUN ON THE FIRST WORKING DAY - APART FROM ONE SECTION WHICH SHOULD BE RUN DAILY*/
/*USING THE PROCESSING DATE FOR FR14 TO TRIGGER THIS*/

/*SKIP FR15D CHECK IF IT IS THE FIRST OF THE MONTH*/

SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1;

.IF ACTIVITYCOUNT = 1 THEN .GOTO SKIPFR15D;

/*ENSURE THE JOB HASN'T ALREADY RUN*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR15D';

.IF ACTIVITYCOUNT = 1 THEN .GOTO JUSTEND;

.LABEL SKIPFR15D;

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR15D'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1;

.IF ACTIVITYCOUNT = 0 THEN .GOTO REBUILDLKUP;


/*SET THE STATUS START DT/TM FOR MAIN JOB*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR15'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 1 - DATE CONTROL - THIS WILL BE THE NEXT WORKING DAY AFTER DAY OF PROCESS IN CASE MONTH END FALLS ON A FRIDAY OR W/E*/ 

UPDATE CC_COBRA.WK_FR15_J01_DATE_CONTROL_T1
SET RUN_DT = (
SELECT CALENDAR_DATE FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM  CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR15_J01_DATE_CONTROL_T1;

COLLECT STATS ON CC_COBRA.WK_FR15_J01_DATE_CONTROL_T1 INDEX(RUN_DT);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE MAIN DATE CONTROL TABLE WITH PRIOR MONTH'S PARAMETERS*/

DELETE FROM CC_COBRA.WK_FR15_DATE_CONTROL ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_DATE_CONTROL
SELECT 
B.RUN_MONTH_END_DT AS MONTH_END_DT
,EXTRACT(DAY FROM B.RUN_MONTH_END_DT) AS MONTH_START_DT
,MIN(CALENDAR_DATE) AS FIRST_WD
,MAX(CALENDAR_DATE) AS LAST_WD
FROM CC_COBRA.GRID_REPORTS_CONTROL A
JOIN (SELECT CAST((RUN_DT/100*100)+1 AS DATE)-1 AS RUN_MONTH_END_DT FROM CC_COBRA.WK_FR15_J01_DATE_CONTROL_T1) B
ON   A.CALENDAR_DATE/100 = B.RUN_MONTH_END_DT/100
GROUP BY 1,2
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_DATE_CONTROL INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR15_DATE_CONTROL WHERE REPORT_DT/100 =  
(SELECT REPORT_DT/100 FROM CC_COBRA.FR14_TRANSACTIONS_PM GROUP BY 1);

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - FLAGS FOR BALANCE WALK*/

/*SECTION 2 - STEP 01: COLLECT ORIGNL_AGRMNT_ID VINTAGE - COLLECT ALL ACCOUNTS WHERE THEY EXIST IN THE RELATIONSHIP TABLE*/

DELETE FROM CC_COBRA.WK_FR15_J03_ACCOUNTS ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 01A INSERT ALL RECORDS FOR ALL ACCOUNTS AND INCLUDE THE TRADED FROM ACCOUNT WHERE IT HAS TRADED IN THE MONTH OF REPORTING*/

INSERT INTO CC_COBRA.WK_FR15_J03_ACCOUNTS
SELECT B.AGRMNT_ID
      ,B.ORIGNL_AGRMNT_ID
      ,CASE WHEN AR.AGRMNT_RLTNSP_TYPE_CD = '00500001' AND AD.REPORT_DT/100 = B.ADDED_DT/100 THEN RELATD_AGRMNT_ID 
            ELSE NULL END AS TRADE_AGRMNT_ID
      ,B.AGRMNT_RLTNSP_SEQUNC_NO
      ,B.ADDED_DT
      ,B.ORIGNL_ADDED_DT
      ,C.ORG_TX
      ,C.CREDIT_CARD_LOGO_CD
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE B
JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
ON   B.ADDED_DT <= AD.REPORT_DT
JOIN GDW_VIEWS.CREDIT_CARD_AGREEMENT C
ON   B.AGRMNT_ID = C.AGRMNT_ID
AND  AD.REPORT_DT BETWEEN C.SOURCE_START_DT AND C.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWS.AGREEMENT_RELATIONSHIP AR
ON   B.AGRMNT_ID = AR.AGRMNT_ID AND AR.AGRMNT_RLTNSP_TYPE_CD ='00500001'  /* 20190530PG - Added to restrict to Traded records only	*/
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_ACCOUNTS INDEX(ORIGNL_AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR15_J03_ACCOUNTS INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 01B - UPDATE THE FROM ACCOUNT WITH THE TO ACCOUNT*/

UPDATE CC_COBRA.WK_FR15_J03_ACCOUNTS
SET TRADE_AGRMNT_ID = AGRMNT_ID
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR15_J03_ACCOUNTS B
WHERE CC_COBRA.WK_FR15_J03_ACCOUNTS.AGRMNT_ID = B.TRADE_AGRMNT_ID)
;

/*SECTION 2 - STEP 02: CHANNEL*/

DELETE FROM CC_COBRA.WK_FR15_J03_CHANNEL ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_J03_CHANNEL
SELECT A.ORIGNL_AGRMNT_ID
      ,A.AGRMNT_ID
      ,A.ORIGNL_HIGH_CHANNL_CD
FROM  CC_COBRA.CC_AGREEMENT_CHANNEL A;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_CHANNEL INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 2 - STEP 03: COLLECT DELINQUENCY*/

DELETE FROM CC_COBRA.WK_FR15_J03_DELQ_FLAG ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_J03_DELQ_FLAG
SELECT B.AGRMNT_ID
      ,AD.REPORT_DT
      ,CASE WHEN ADS.PAST_DUE_QY  IS NULL THEN 0 
                WHEN ADS.PAST_DUE_QY IN (0,1,2) THEN 0 
                ELSE 1 END

FROM CC_COBRA.WK_FR15_J03_ACCOUNTS B
JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
ON  B.ADDED_DT <= AD.REPORT_DT
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE A
ON  B.AGRMNT_ID = A.AGRMNT_ID
AND (AD.REPORT_DT < A.PURGED_DT
OR  A.PURGED_DT IS NULL)
LEFT JOIN
     GDW_VIEWSX.AGRMNT_DLNQNY_SUMMRY ADS
ON   B.AGRMNT_ID = ADS.AGRMNT_ID
AND  ADS.DLNQNY_SUMMRY_TYPE_CD = '00500014'
AND  AD.REPORT_DT BETWEEN ADS.SOURCE_START_DT AND ADS.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_DELQ_FLAG INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 04: COLLECT BLOCK CODES*/

DELETE FROM CC_COBRA.WK_FR15_J03_BLOCK_FLAG ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_J03_BLOCK_FLAG 
SELECT B.AGRMNT_ID
      ,AD.REPORT_DT
      ,B.ORIGNL_ADDED_DT
      ,CASE WHEN ASS3.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
            WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
            WHEN ASS2.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
            WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'I' THEN 'I'
            WHEN ASS2.AGRMNT_STATUS_SUMMRY_VL = 'I' THEN 'I'
            END
FROM CC_COBRA.WK_FR15_J03_ACCOUNTS B
JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
ON  B.ADDED_DT <= AD.REPORT_DT
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE A
ON  B.AGRMNT_ID = A.AGRMNT_ID
AND (AD.REPORT_DT < A.PURGED_DT
OR  A.PURGED_DT IS NULL)
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   B.AGRMNT_ID = ASS.AGRMNT_ID
AND  AD.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS2
ON   B.AGRMNT_ID = ASS2.AGRMNT_ID
AND  AD.REPORT_DT BETWEEN ASS2.SOURCE_START_DT AND ASS2.SOURCE_END_DT-1
AND  ASS2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS3
ON   B.AGRMNT_ID = ASS3.AGRMNT_ID
AND  AD.REPORT_DT BETWEEN ASS3.SOURCE_START_DT AND ASS3.SOURCE_END_DT-1
AND  ASS3.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_BLOCK_FLAG INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 05: COLLECT APR CHANGE FOR HARDSHIP FLAG*/

DELETE FROM CC_COBRA.WK_FR15_J03_APR_FLAG ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 
OLD CODE
INSERT INTO CC_COBRA.WK_FR15_J03_APR_FLAG 
SELECT 
 AF.AGRMNT_ID
,VD.REPORT_DT
,MAX(CASE WHEN AFF.AGRMNT_FEATUR_FEATUR_RT = 5.784 THEN 1 ELSE 0 END)

FROM GDW_VIEWSX.AGREEMENT_FEATURE AF
JOIN CC_COBRA.WK_FR15_DATE_CONTROL VD
ON  VD.REPORT_DT BETWEEN AF.SOURCE_START_DT AND AF.SOURCE_END_DT-1
AND  (AF.EXPIRY_DT IS NULL OR AF.EXPIRY_DT > VD.REPORT_DT)
JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF
ON   AF.AGRMNT_ID = AFF.AGRMNT_ID
AND  AF.FEATUR_ID = AFF.FEATUR_ID
AND  AFF.RELATD_FEATUR_ID = 5013
AND  VD.REPORT_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1
GROUP BY 1,2
;
*/

/*FIRST CHECK CURRENT TABLE FOR ROWS*/

INSERT INTO CC_COBRA.WK_FR15_J03_APR_FLAG 
SELECT T2.AGRMNT_ID
, DC.REPORT_DT
, CASE WHEN T1.AGRMNT_USR_SCORE_4 = 98 THEN 1
       WHEN T1.AGRMNT_USR_SCORE_4 = 96 THEN 3
       WHEN T1.AGRMNT_USR_SCORE_4 NOT IN  (96, 98) THEN 2 ELSE 0 END
FROM GRID_RINGFENCED_VIEWS.CC_TRIAD_SCORE T1 
JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
ON  DC.REPORT_DT BETWEEN T1.PRO_DT AND T1.EXY_DT-1
INNER JOIN GDW_VIEWS.CC_AGREEMENT_LOOKUP T2
ON T1.ACCT_NO = T2.ACCONT_NO
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPHST;

/*IF NOTHING INSERTED - THEN LOOK AT HST TABLE*/

INSERT INTO CC_COBRA.WK_FR15_J03_APR_FLAG 
SELECT T2.AGRMNT_ID
, DC.REPORT_DT
, CASE WHEN T1.AGRMNT_USR_SCORE_4 = 98 THEN 1
       WHEN T1.AGRMNT_USR_SCORE_4 = 96 THEN 3
       WHEN T1.AGRMNT_USR_SCORE_4 NOT IN  (96, 98) THEN 2 ELSE 0 END
      
FROM GRID_RINGFENCED_VIEWS.CC_TRIAD_SCORE_HST T1 
JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
ON   T1.MONTH_END_DT = DC.REPORT_DT  
INNER JOIN GDW_VIEWS.CC_AGREEMENT_LOOKUP T2
ON T1.ACCT_NO = T2.ACCONT_NO;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIPHST;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_APR_FLAG INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 06: INTEREST CHARGE FOR IBB FLAGS*/

DELETE FROM CC_COBRA.WK_FR15_J03_INT_TXNS ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 06A: GET ALL INT TRANSACTIONS*/

INSERT INTO  CC_COBRA.WK_FR15_J03_INT_TXNS
SELECT     MT.AGRMNT_ID
          ,MT.EVENT_ACTVTY_CD
          ,C.TRNSCN_DERVTN_GRP 
          ,MT.EVENT_AM
          ,MT.EVENT_ID  
          ,MT.SOURCE_START_DT
          ,C.REVRSL_IN

FROM       GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST MT
INNER JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
ON         MT.SOURCE_START_DT/100 = DC.REPORT_DT/100
AND       (MT.POSTNG_DT = MT.SOURCE_START_DT
OR         MT.TRNSCN_CATGRY_CD = '005    G')
AND NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE E
WHERE MT.EVENT_ID = E.EVENT_ID) 
/*ENSURE THAT WE ARE ONLY PICKING UP DEBIT AMTS - OPTION 3 FOR IBB*/
AND        MT.EVENT_AM < 0
INNER JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS C
ON         MT.EVENT_ACTVTY_CD = C.EVENT_ACTVTY_CD  
AND        C.TRNSCN_DERVTN_GRP = 'INTEREST'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_INT_TXNS INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR15_J03_INT_TXNS INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR15_J03_INTEREST_FLAG ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 06B: FLAG AGRMNT_IDS THAT HAVE INTEREST IN THE MONTH PERIOD
/*THIS CODE JUST USES THE PRIOR ACCOUNT TO SEE IF THERE IS SOME INTEREST ON THE PRIOR ACCOUNT IN THE MONTH OF THE TRADE*/

INSERT INTO CC_COBRA.WK_FR15_J03_INTEREST_FLAG
SELECT B.AGRMNT_ID
      ,AD.REPORT_DT
      ,1 
FROM CC_COBRA.WK_FR15_J03_ACCOUNTS B
JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
ON  B.ADDED_DT <= AD.REPORT_DT
AND B.TRADE_AGRMNT_ID IS NOT NULL --LIMIT TO TRADED FROM AND TO ONLY
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE A
ON  B.AGRMNT_ID = A.AGRMNT_ID
AND (AD.REPORT_DT < A.PURGED_DT
OR  A.PURGED_DT IS NULL)
JOIN  (
SELECT T2.TRADE_AGRMNT_ID, SUM(EVENT_AM) AS SUM_EVENT
FROM  CC_COBRA.WK_FR15_J03_INT_TXNS T1
JOIN  CC_COBRA.WK_FR15_J03_ACCOUNTS T2
ON    T1.AGRMNT_ID = T2.AGRMNT_ID
GROUP BY 1 
/*ENSURE THAT THE TOTAL INT AM IS < 0 - OPTION 3*/
HAVING SUM(T1.EVENT_AM) < 0)    C
ON   B.TRADE_AGRMNT_ID = C.TRADE_AGRMNT_ID
GROUP BY 1,2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_INTEREST_FLAG INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 06C: NOW INSERT NON TRADE DATA*/

INSERT INTO CC_COBRA.WK_FR15_J03_INTEREST_FLAG
SELECT B.AGRMNT_ID
      ,AD.REPORT_DT
      ,1 
FROM CC_COBRA.WK_FR15_J03_ACCOUNTS B 
JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
ON  B.ADDED_DT <= AD.REPORT_DT
AND (B.TRADE_AGRMNT_ID = B.AGRMNT_ID OR B.TRADE_AGRMNT_ID IS NULL) 
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE A
ON  B.AGRMNT_ID = A.AGRMNT_ID
AND (AD.REPORT_DT < A.PURGED_DT
OR  A.PURGED_DT IS NULL)
JOIN  (
SELECT T1.AGRMNT_ID, SUM(EVENT_AM) AS SUM_EVENT
FROM  CC_COBRA.WK_FR15_J03_INT_TXNS T1
GROUP BY 1 
/*ENSURE THAT THE TOTAL INT AM IS < 0 - OPTION 3*/
HAVING SUM(T1.EVENT_AM) < 0)    C
ON   B.AGRMNT_ID = C.AGRMNT_ID
GROUP BY 1,2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_INTEREST_FLAG INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 06C-MBNA: FOR FEB 2019 INSERT DATA FOR MBNA PRE MIGRATION */

/*
CREATE TABLE CC_COBRA.FR15_MBNA_FEB19_INT_PREMIG (
AGRMNT_ID INT
)
UNIQUE PRIMARY INDEX(AGRMNT_ID);

INSERT INTO CC_COBRA.FR15_MBNA_FEB19_INT_PREMIG
SELECT C.AGRMNT_ID 
FROM CC_COBRA.MBNA_DZBS A
JOIN (SELECT KEY_ACCT, SUM(LS_INT_AM) as TOTAL_INT FROM CC_COBRA.MBNA_DZPS GROUP BY 1) B
ON   A.KEY_ACCT = B.KEY_ACCT
AND  A.LAST_CYCLE_DATE >= '2019/02/01'
AND  B.TOTAL_INT > 0
JOIN GDW_VIEWS.CC_AGREEMENT_LOOKUP C
ON   A.KEY_ACCT = C.ACCONT_NO
GROUP BY 1;

COLLECT STATS ON CC_COBRA.FR15_MBNA_FEB19_INT_PREMIG INDEX(AGRMNT_ID);
*/

SELECT * FROM CC_COBRA.WK_FR15_DATE_CONTROL WHERE REPORT_DT = '2019/02/28';

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPMBNA;

INSERT INTO CC_COBRA.WK_FR15_J03_INTEREST_FLAG
SELECT A.AGRMNT_ID
      ,AD.REPORT_DT
      ,1 
FROM CC_COBRA.FR15_MBNA_FEB19_INT_PREMIG A 
CROSS JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR15_J03_INTEREST_FLAG F
WHERE A.AGRMNT_ID = F.AGRMNT_ID)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_INTEREST_FLAG INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


.LABEL SKIPMBNA;

/*

/*SECTION 2 - STEP 06D: STORE TRADE OVERRIDE DATA*/

/*
CREATE TABLE CC_COBRA.FR15_TRADE_INT_OVERRIDE (
AGRMNT_ID INT
,RELATD_AGRMNT_ID INT
,PERIOD_END_DT DATE
,INTEREST_OVERRIDE_IND BYTEINT
)
PRIMARY INDEX (AGRMNT_ID);
*/

DELETE FROM CC_COBRA.FR15_TRADE_INT_OVERRIDE WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_TRADE_INT_OVERRIDE
SELECT B.AGRMNT_ID
      ,B.TRADE_AGRMNT_ID
      ,AD.REPORT_DT
      ,1 
FROM CC_COBRA.WK_FR15_J03_ACCOUNTS B
JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
ON  B.ADDED_DT <= AD.REPORT_DT
AND B.TRADE_AGRMNT_ID <> B.AGRMNT_ID --LIMIT TO TRADES ONLY
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE A
ON  B.AGRMNT_ID = A.AGRMNT_ID
AND (AD.REPORT_DT < A.PURGED_DT
OR  A.PURGED_DT IS NULL)
JOIN  (
SELECT T2.TRADE_AGRMNT_ID, SUM(EVENT_AM) AS SUM_EVENT
FROM  CC_COBRA.WK_FR15_J03_INT_TXNS T1
JOIN  CC_COBRA.WK_FR15_J03_ACCOUNTS T2
ON    T1.AGRMNT_ID = T2.AGRMNT_ID
GROUP BY 1 
/*ENSURE THAT THE TOTAL INT AM IS < 0 - OPTION 3*/
HAVING SUM(T1.EVENT_AM) < 0)    C
ON   B.TRADE_AGRMNT_ID = C.TRADE_AGRMNT_ID
WHERE NOT EXISTS (
SELECT NULL 
FROM (
SELECT AGRMNT_ID, SUM(EVENT_AM) AS SUM_EVENT
FROM  CC_COBRA.WK_FR15_J03_INT_TXNS T1
GROUP BY 1 
HAVING SUM(T1.EVENT_AM) < 0) D
WHERE B.AGRMNT_ID = D.AGRMNT_ID )
GROUP BY 1,2,3;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_TRADE_INT_OVERRIDE
SELECT B.AGRMNT_ID
      ,B.TRADE_AGRMNT_ID
      ,AD.REPORT_DT
      ,0
FROM CC_COBRA.WK_FR15_J03_ACCOUNTS B
JOIN CC_COBRA.WK_FR15_DATE_CONTROL AD
ON  B.ADDED_DT <= AD.REPORT_DT
AND B.TRADE_AGRMNT_ID <> B.AGRMNT_ID --LIMIT TO TRADES ONLY
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE A
ON  B.AGRMNT_ID = A.AGRMNT_ID
AND (AD.REPORT_DT < A.PURGED_DT
OR  A.PURGED_DT IS NULL)
WHERE NOT EXISTS (
SELECT NULL 
FROM CC_COBRA.FR15_TRADE_INT_OVERRIDE T1
WHERE B.AGRMNT_ID = T1.AGRMNT_ID )
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATISTICS ON CC_COBRA.FR15_TRADE_INT_OVERRIDE INDEX (AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 07: SECURITISATION FLAG*/

DELETE FROM CC_COBRA.WK_FR15_J03_SEC_FLAG ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_J03_SEC_FLAG
SELECT 	AF.AGRMNT_ID
       ,SDC.REPORT_DT AS PERIOD_END_DT
       ,1 AS SEC_FLAG									
FROM GDW_VIEWSX.AGREEMENT_FEATURE AF					
JOIN CC_COBRA.WK_FR15_DATE_CONTROL SDC
ON   AF.FEATUR_ID  = '5104'							
AND AF.FEATUR_TYPE_CD = 5							
AND AF.AGRMNT_FEATUR_NO IN  ('LY1', 'HY1')					
AND SDC.REPORT_DT BETWEEN AF.SOURCE_START_DT AND AF.SOURCE_END_DT-1					
AND NOT EXISTS	
		(SELECT ASS.AGRMNT_ID
		 FROM GDW_VIEWS.AGREEMENT_STATUS_SUMMARY ASS
		 JOIN CC_COBRA.WK_FR15_DATE_CONTROL SDC
		 ON ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500021'
		 -- L2BS_CHGOFF_STATUS --- '00500021'
		 AND AGRMNT_STATUS_SUMMRY_VL > 4
		 -- INCLUDE EVERYTHING WITH A CHARGE OFF STATUS <=4 
		 -- OR EXCLUDE EVERYTHING WITH A STATUS >4. 
		 AND SDC.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
		 AND ASS.AGRMNT_ID = AF.AGRMNT_ID
		 GROUP BY 1
		)
;	

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 2 - STEP 08: LLOYDS TSB RELATIONSHIP*/

/*REMOVE THIS FOR RERUNNING AS IT IS PREFERRABLE TO RETAIN THE HISTORICAL DATA AS IT CAN'T BE RECREATED EXACTLY THE SAME*/

SELECT *
FROM CC_COBRA.WK_FR15_DATE_CONTROL 
WHERE LAST_WD = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND DATE-5 <= (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT);

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPLTSBREL;

/*CURRENT ACCOUNT*/

DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_CHQ ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_CHQ
SELECT 	CIDPERSID
FROM 	GDW_VIEWS.CI_PRODUCT_SUMMARY
WHERE	BASPGRPCD = 'CHQ'
AND     EXT_SYS_ID = 4
AND     MFR_CMY_BND_CD IN ('LTB','HAL','BOS')
AND     SUBSTR(EXT_PRD_HLD_ID_TX,1,2) IN ('30','77','87')
AND     OPN_DT/100 <= (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND		(CLS_DT IS NULL OR CLS_DT/100 > (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL));
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_CHQ INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CREDIT CARDS */

DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_CARD ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_CARD
SELECT 	CIDPERSID
FROM 	GDW_VIEWS.CI_PRODUCT_SUMMARY
WHERE	BASPGRPCD = 'CARD'
AND     EXT_SYS_ID = 13
AND     MFR_CMY_BND_CD IN ('LTB','HAL','BOS')
AND     OPN_DT/100 <= (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND		(CLS_DT IS NULL OR CLS_DT/100 > (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL));
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_CARD INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*LOANS */

DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_LOAN ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_LOAN 
SELECT 	CIDPERSID
FROM 	GDW_VIEWS.CI_PRODUCT_SUMMARY
WHERE	BASPGRPCD = 'LOAN'
AND     MFR_CMY_BND_CD IN ('LTB','HAL','BOS')
AND     OPN_DT/100 <= (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND		(CLS_DT IS NULL OR CLS_DT/100 > (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL));
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_LOAN INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*MORTGAGES */

DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_MORT ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_MORT 
SELECT 	CIDPERSID
FROM 	GDW_VIEWS.CI_PRODUCT_SUMMARY
WHERE	BASPGRPCD = 'MORT'
AND     MFR_CMY_BND_CD IN ('LTB','HAL','BOS')
AND     OPN_DT/100 <= (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND		(CLS_DT IS NULL OR CLS_DT/100 > (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL));
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_MORT INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SAVINGS*/

DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_SAV ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_SAV 
SELECT 	CIDPERSID
FROM 	GDW_VIEWS.CI_PRODUCT_SUMMARY
WHERE	BASPGRPCD = 'SAV'
AND     MFR_CMY_BND_CD IN ('LTB','HAL','BOS')
AND     OPN_DT/100 <= (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND		(CLS_DT IS NULL OR CLS_DT/100 > (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL));
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_SAV INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*OTHER */

DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_OTH ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_OTH 
SELECT 	CIDPERSID
FROM 	GDW_VIEWS.CI_PRODUCT_SUMMARY
WHERE	BASPGRPCD NOT IN('CHQ','CARD','LOAN','MORT', 'SAV')
AND     MFR_CMY_BND_CD IN ('LTB','HAL','BOS')
AND     OPN_DT/100 <= (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND		(CLS_DT IS NULL OR CLS_DT/100 > (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL));
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_OTH INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*JOIN CHQ AND CARDS*/

DELETE FROM  CC_COBRA.WK_FR15_J03_LBG_REL_T1 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_T1
SELECT	COALESCE(A.CIDPERSID,B.CIDPERSID) AS CIDPERSID
		,CASE WHEN A.CIDPERSID IS NULL THEN 0 ELSE 1 END AS CHQ
		,CASE WHEN B.CIDPERSID IS NULL THEN 0 ELSE 1 END AS CARD
				
FROM	CC_COBRA.WK_FR15_J03_LBG_REL_CHQ A
FULL OUTER JOIN
		CC_COBRA.WK_FR15_J03_LBG_REL_CARD B
ON		A.CIDPERSID = B.CIDPERSID;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_T1 INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*JOIN CHQ/CARDS TO LOANS*/

DELETE FROM  CC_COBRA.WK_FR15_J03_LBG_REL_T2 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_T2
SELECT	COALESCE(A.CIDPERSID,B.CIDPERSID) AS CIDPERSID
		,CASE WHEN A.CHQ IS NULL THEN 0 ELSE A.CHQ END AS CHQ
		,CASE WHEN A.CARD IS NULL THEN 0 ELSE A.CARD END AS CARD
		,CASE WHEN B.CIDPERSID IS NULL THEN 0 ELSE 1 END AS LOAN
				
FROM	CC_COBRA.WK_FR15_J03_LBG_REL_T1 A
FULL OUTER JOIN
		CC_COBRA.WK_FR15_J03_LBG_REL_LOAN B
ON		A.CIDPERSID = B.CIDPERSID;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_T2 INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
/*JOIN CHQ/CARDS/LOANS TO MORTGAGES*/

DELETE FROM  CC_COBRA.WK_FR15_J03_LBG_REL_T3 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_T3
SELECT	COALESCE(A.CIDPERSID,B.CIDPERSID) AS CIDPERSID
		,CASE WHEN A.CHQ IS NULL THEN 0 ELSE A.CHQ END AS CHQ
		,CASE WHEN A.CARD IS NULL THEN 0 ELSE A.CARD END AS CARD
		,CASE WHEN A.LOAN IS NULL THEN 0 ELSE A.LOAN END AS LOAN
		,CASE WHEN B.CIDPERSID IS NULL THEN 0 ELSE 1 END AS MORT
				
FROM	CC_COBRA.WK_FR15_J03_LBG_REL_T2 A
FULL OUTER JOIN
		CC_COBRA.WK_FR15_J03_LBG_REL_MORT B
ON		A.CIDPERSID = B.CIDPERSID;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_T3 INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
/*JOIN CHQ/CARDS/LOANS/MORTGAGES TO SAVINGS*/

DELETE FROM  CC_COBRA.WK_FR15_J03_LBG_REL_T4 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_T4
SELECT	COALESCE(A.CIDPERSID,B.CIDPERSID) AS CIDPERSID
		,CASE WHEN A.CHQ IS NULL THEN 0 ELSE A.CHQ END AS CHQ
		,CASE WHEN A.CARD IS NULL THEN 0 ELSE A.CARD END AS CARD
		,CASE WHEN A.LOAN IS NULL THEN 0 ELSE A.LOAN END AS LOAN
		,CASE WHEN A.MORT IS NULL THEN 0 ELSE A.MORT END AS MORT
		,CASE WHEN B.CIDPERSID IS NULL THEN 0 ELSE 1 END AS SAV
				
FROM	CC_COBRA.WK_FR15_J03_LBG_REL_T3 A
FULL OUTER JOIN
		CC_COBRA.WK_FR15_J03_LBG_REL_SAV B
ON		A.CIDPERSID = B.CIDPERSID;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_T4 INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*JOIN CHQ/CARDS/LOANS/MORTGAGES/SAVINGS TO ALL OTHER PRODUCTS*/

DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_T5 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_T5
SELECT	COALESCE(A.CIDPERSID,B.CIDPERSID) AS CIDPERSID
		,CASE WHEN A.CHQ IS NULL THEN 0 ELSE A.CHQ END AS CHQ
		,CASE WHEN A.CARD IS NULL THEN 0 ELSE A.CARD END AS CARD
		,CASE WHEN A.LOAN IS NULL THEN 0 ELSE A.LOAN END AS LOAN
		,CASE WHEN A.MORT IS NULL THEN 0 ELSE A.MORT END AS MORT
		,CASE WHEN A.SAV IS NULL THEN 0 ELSE A.SAV END AS SAV
		,CASE WHEN B.CIDPERSID IS NULL THEN 0 ELSE 1 END AS OTHER
				
FROM	CC_COBRA.WK_FR15_J03_LBG_REL_T4  A
FULL OUTER JOIN
		CC_COBRA.WK_FR15_J03_LBG_REL_SAV B
ON		A.CIDPERSID = B.CIDPERSID;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATISTICS ON CC_COBRA.WK_FR15_J03_LBG_REL_T5 INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_T1 ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_T2 ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_T3 ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_T4 ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_CHQ ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_CARD ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_LOAN ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_MORT ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_SAV ALL;
DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_OTH ALL;


/*COLLECT PARTY_IDS - CURRENT POSITION EVEN IN RERUNS (DUE TO ONLY ONE POSITION OF CI_PRODUCT_SUMMARY FOR CIDPERSID/PARTY_ID*/


DELETE FROM CC_COBRA.WK_FR15_J03_LBG_REL_CIDPERSID ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
INSERT INTO CC_COBRA.WK_FR15_J03_LBG_REL_CIDPERSID
SELECT CCA.AGRMNT_ID
      ,T3.PARTY_ID
FROM CC_COBRA.WK_FR15_J03_ACCOUNTS CCA
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE A
ON   CCA.AGRMNT_ID = A.AGRMNT_ID
AND  A.V_ORG <> '170'
JOIN GDW_VIEWS.AGREEMENT_PARTY              T3  
ON CCA.AGRMNT_ID = T3.AGRMNT_ID
AND T3.AGRMNT_PARTY_ROLE_TYPE_CD = '00000001' --THIS IS THE PRIMARY PARTY ONLY
AND T3.SOURCE_END_DT = '3500/12/31' --ALWAYS LATEST FOR PARTY
;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J03_LBG_REL_CIDPERSID INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR15_J03_LBG_REL_CIDPERSID INDEX(CIDPERSID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*FINAL TABLE FOR RELATIONSHIP - THIS JOB MUST BE RUN IN ORDER*/
DELETE FROM CC_COBRA.CC_LBG_RELATIONSHIP WHERE SOURCE_START_DT >= (SELECT CAST(((REPORT_DT/100*100)+1) AS DATE) FROM CC_COBRA.WK_FR15_DATE_CONTROL);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.CC_LBG_RELATIONSHIP 
SET SOURCE_END_DT = '3500/12/31' WHERE SOURCE_END_DT >= (SELECT CAST(((REPORT_DT/100*100)+1) AS DATE) FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND SOURCE_END_DT <> '3500/12/31';
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*END DATE RECORDS THAT DON'T EXIST IN WK_FR15_J03_ACCOUNTS */

UPDATE CC_COBRA.CC_LBG_RELATIONSHIP 
SET SOURCE_END_DT = (SELECT CAST(((DC.REPORT_DT/100*100)+1) AS DATE) AS SOURCE_START_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL DC)
WHERE CC_COBRA.CC_LBG_RELATIONSHIP.AGRMNT_ID NOT IN (
SELECT AGRMNT_ID FROM CC_COBRA.WK_FR15_J03_ACCOUNTS )
AND CC_COBRA.CC_LBG_RELATIONSHIP.SOURCE_END_DT = '3500/12/31';
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*END DATE RECORDS THAT ALREADY EXIST IN TABLE WITH A DIFFERENT VALUE*/

UPDATE CC_COBRA.CC_LBG_RELATIONSHIP 
FROM (	SELECT T1.AGRMNT_ID
              ,T1.CIDPERSID
              ,COALESCE(T5.CHQ,0) AS CHQ
              ,COALESCE(T5.CARD,0) AS CARD
              ,COALESCE(T5.LOAN,0) AS LOAN
              ,COALESCE(T5.MORT,0) AS MORT
              ,COALESCE(T5.SAV,0) AS SAV
              ,COALESCE(T5.OTHER,0) AS OTHER
              ,CAST(((DC.REPORT_DT/100*100)+1) AS DATE) AS SOURCE_START_DT
              
        FROM CC_COBRA.WK_FR15_J03_LBG_REL_CIDPERSID T1
        JOIN CC_COBRA.WK_FR15_J03_ACCOUNTS AC
        ON   T1.AGRMNT_ID = AC.AGRMNT_ID
        CROSS JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
        LEFT JOIN CC_COBRA.WK_FR15_J03_LBG_REL_T5 T5
        ON   T1.CIDPERSID = T5.CIDPERSID
        ) A
SET SOURCE_END_DT = A.SOURCE_START_DT
WHERE CC_COBRA.CC_LBG_RELATIONSHIP.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.CC_LBG_RELATIONSHIP.SOURCE_END_DT = '3500/12/31'
AND   CC_COBRA.CC_LBG_RELATIONSHIP.CIDPERSID||
      CC_COBRA.CC_LBG_RELATIONSHIP.CHQ||
      CC_COBRA.CC_LBG_RELATIONSHIP.CARD||
      CC_COBRA.CC_LBG_RELATIONSHIP.LOAN||
      CC_COBRA.CC_LBG_RELATIONSHIP.MORT||
      CC_COBRA.CC_LBG_RELATIONSHIP.SAV||
      CC_COBRA.CC_LBG_RELATIONSHIP.OTHER <> 
      A.CIDPERSID||
      A.CHQ||
      A.CARD||
      A.LOAN||
      A.MORT||
      A.SAV||
      A.OTHER 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT NEW VALUES THAT DON'T ALREADY EXIST IN TABLE*/

INSERT INTO CC_COBRA.CC_LBG_RELATIONSHIP
SELECT A.*
FROM
(SELECT T1.AGRMNT_ID
       ,T1.CIDPERSID
       ,COALESCE(T5.CHQ,0) AS CHQ
       ,COALESCE(T5.CARD,0) AS CARD
       ,COALESCE(T5.LOAN,0) AS LOAN
       ,COALESCE(T5.MORT,0) AS MORT
       ,COALESCE(T5.SAV,0) AS SAV
       ,COALESCE(T5.OTHER,0) AS OTHER
       ,CAST(((DC.REPORT_DT/100*100)+1) AS DATE) AS SOURCE_START_DT
       ,'3500/12/31' AS SOURCE_END_DT
              
FROM CC_COBRA.WK_FR15_J03_LBG_REL_CIDPERSID T1
JOIN CC_COBRA.WK_FR15_J03_ACCOUNTS AC
ON   T1.AGRMNT_ID = AC.AGRMNT_ID
CROSS JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
LEFT JOIN CC_COBRA.WK_FR15_J03_LBG_REL_T5 T5
ON   T1.CIDPERSID = T5.CIDPERSID
) A
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_LBG_RELATIONSHIP B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   B.SOURCE_END_DT = '3500/12/31'
)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_LBG_RELATIONSHIP INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIPLTSBREL;


/*SECTION 2 - STEP 09: FINAL FLAGS TABLE - STATIC*/

DELETE FROM CC_COBRA.FR15_FLAGS_STATIC WHERE INSERT_MTH >= (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


INSERT INTO CC_COBRA.FR15_FLAGS_STATIC
SELECT    A.AGRMNT_ID
         ,A.ORIGNL_ADDED_DT
         ,A.ORG_TX
         ,A.LOGO_CD
         ,H.CHANNEL AS ORIGNL_CHANNEL_CD
         ,B.REPORT_DT
         

FROM      (SELECT * FROM CC_COBRA.WK_FR15_J03_ACCOUNTS A 
           WHERE NOT EXISTS (SELECT NULL
                             FROM CC_COBRA.FR15_FLAGS_STATIC Z
                             WHERE A.AGRMNT_ID = Z.AGRMNT_ID)
                             ) A
JOIN     CC_COBRA.WK_FR15_DATE_CONTROL B
ON       A.ADDED_DT <= B.REPORT_DT                             
LEFT JOIN CC_COBRA.WK_FR15_J03_CHANNEL H
ON        A.AGRMNT_ID = H.AGRMNT_ID   
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_FLAGS_STATIC INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;



/*SECTION 2 - STEP 10: FINAL FLAGS TABLE - MONTHLY*/

DELETE FROM CC_COBRA.FR15_FLAGS 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_FLAGS
SELECT    A.AGRMNT_ID
         ,A.PERIOD_END_DT
         ,CASE WHEN B.BLOCK_FLAG = 'Z' THEN 'Z'
               WHEN B.BLOCK_FLAG = 'F' AND C.APR_FLAG = 1 THEN 'H'
               WHEN B.BLOCK_FLAG = 'F' THEN 'I'
               WHEN B.BLOCK_FLAG = 'I' AND C.APR_FLAG = 3 THEN 'H'
               WHEN B.BLOCK_FLAG = 'I' THEN 'I'
               WHEN A.DELQ_FLAG = 1 THEN 'D'
               ELSE 'G' END
         ,COALESCE(I.IBB_FLAG,0)
         ,COALESCE(S.SEC_FLAG,0)
         ,CASE WHEN R.CHQ = 1 THEN 'A'
               WHEN R.LOAN+R.MORT+R.SAV+R.OTHER > 0 THEN 'F'
               ELSE 'N'
               END AS LTSB_REL_TYPE_CD
               
FROM      CC_COBRA.CC_AGREEMENT_ADDED_DATE T1
JOIN      CC_COBRA.WK_FR15_J03_DELQ_FLAG A
ON        T1.AGRMNT_ID = A.AGRMNT_ID
LEFT JOIN CC_COBRA.WK_FR15_J03_BLOCK_FLAG B
ON        T1.AGRMNT_ID = B.AGRMNT_ID
LEFT JOIN CC_COBRA.WK_FR15_J03_APR_FLAG C
ON        T1.AGRMNT_ID = C.AGRMNT_ID
LEFT JOIN CC_COBRA.WK_FR15_J03_INTEREST_FLAG I
ON        T1.AGRMNT_ID = I.AGRMNT_ID
LEFT JOIN CC_COBRA.WK_FR15_J03_SEC_FLAG S
ON        T1.AGRMNT_ID = S.AGRMNT_ID
LEFT JOIN CC_COBRA.CC_LBG_RELATIONSHIP R
ON        T1.AGRMNT_ID = R.AGRMNT_ID
AND       A.PERIOD_END_DT BETWEEN R.SOURCE_START_DT AND R.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_FLAGS INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_FLAGS INDEX(PERIOD_END_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 2 - STEP 11: FLAGS HISTORY TABLE*/


SELECT TOP 2 *
FROM CC_COBRA.FR15_FLAGS_HST
WHERE SOURCE_START_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPBKUP;

/*FIRST TAKE BACKUP OF HISTORY TABLE - JUST IN CASE OF A BAD RUN*/

DELETE FROM CC_COBRA.FR15_FLAGS_HST_BKUP ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_FLAGS_HST_BKUP SEL * FROM CC_COBRA.FR15_FLAGS_HST;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIPBKUP;

/*FIRST RESET DATA IN HISTORY FOR MONTH BEING PROCESSED - WARNING ONLY RUN THIS IF HAVING TO RESTATE FLAGS TABLE... */
/*IT MUST BE RUN MONTH BY MONTH IN ORDER FROM PAST TO PRESENT*/

DELETE FROM CC_COBRA.FR15_FLAGS_HST
WHERE SOURCE_START_DT/100 >= (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.FR15_FLAGS_HST
SET SOURCE_END_DT = (SELECT ADD_MONTHS(REPORT_DT+1,-1) FROM CC_COBRA.WK_FR15_DATE_CONTROL)
WHERE SOURCE_END_DT/100 > (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*FIRST MOVE THE END DATE ON WHERE RECORDS MATCH ALL VALUES*/

UPDATE CC_COBRA.FR15_FLAGS_HST 
FROM 
(SELECT * 
 FROM CC_COBRA.FR15_FLAGS 
 WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
 ) T1 
SET SOURCE_END_DT = T1.PERIOD_END_DT+1 --YOU ADD A DAY ON SO THAT SOUCE_END_DT-1 EQUAL THE MONTH END
WHERE CC_COBRA.FR15_FLAGS_HST.AGRMNT_ID = T1.AGRMNT_ID 
AND ADD_MONTHS(CC_COBRA.FR15_FLAGS_HST.SOURCE_END_DT,1) = T1.PERIOD_END_DT+1 --THE LAST RECORD WILL BE SET TO THE 1ST OF THE MONTH OF THE CURRENT MONTH BEING PROCESSED
AND CC_COBRA.FR15_FLAGS_HST.CUSTMR_CATGRY = T1.CUSTMR_CATGRY 
AND CC_COBRA.FR15_FLAGS_HST.IBB_FLAG = T1.IBB_FLAG 
AND CC_COBRA.FR15_FLAGS_HST.SEC_FLAG = T1.SEC_FLAG 
AND CC_COBRA.FR15_FLAGS_HST.LTSB_REL_TYPE_CD = T1.LTSB_REL_TYPE_CD;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*NEXT INSERT RECORDS THAT ARE NEW*/

INSERT INTO CC_COBRA.FR15_FLAGS_HST 
SELECT 
 AGRMNT_ID
,CUSTMR_CATGRY
,IBB_FLAG
,SEC_FLAG
,LTSB_REL_TYPE_CD
,ADD_MONTHS(PERIOD_END_DT+1,-1)
,PERIOD_END_DT+1 
FROM CC_COBRA.FR15_FLAGS T1 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL) 
AND NOT EXISTS 
(SELECT NULL 
 FROM CC_COBRA.FR15_FLAGS_HST T2 
 WHERE T1.AGRMNT_ID = T2.AGRMNT_ID 
 AND T1.PERIOD_END_DT+1 = T2.SOURCE_END_DT
 );
 
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
 
/*CHECK TO MAKE SURE THAT THERE ARE NO DIFFERENCES*/

SELECT AGRMNT_ID,CUSTMR_CATGRY,IBB_FLAG,SEC_FLAG,LTSB_REL_TYPE_CD 
FROM CC_COBRA.FR15_FLAGS 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL) 
MINUS 
SELECT AGRMNT_ID,CUSTMR_CATGRY,IBB_FLAG,SEC_FLAG,LTSB_REL_TYPE_CD 
FROM CC_COBRA.FR15_FLAGS_HST 
WHERE (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL) BETWEEN SOURCE_START_DT AND SOURCE_END_DT-1;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO FOUNDERROR;

/*NEXT DELETE DATA FROM MONTHLY TABLE THAT IS OLDER THAN THE LAST 3 MONTHS*/

DELETE FROM CC_COBRA.FR15_FLAGS
WHERE PERIOD_END_DT < (SELECT ADD_MONTHS(REPORT_DT+1,-3) FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 3 - FLAGS FOR WHEN THE PROMO RETAIL BALANCE FLIPS*/

/*SECTION 3 - STEP 01: CHECK TO MAKE SURE THAT DATA THAT CAN'T BE REPLACED ISN'T GOING TO BE DELETED*/

DELETE FROM CC_COBRA.FR15_PROMO_RETAIL_FLAG 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND PERIOD_END_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.FR14_TRANSACTIONS_PM GROUP BY 1);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 3 - STEP 02: COLLECT THE MAX VALUE FROM THE TRANSCTION TABLE FOR THE PROMO RETAIL PLAN RANGES*/

INSERT INTO CC_COBRA.FR15_PROMO_RETAIL_FLAG
SELECT A.AGRMNT_ID
      ,A.PLAN_NO
      ,B.REPORT_DT AS PERIOD_END_DT
      ,SUM(CASE WHEN B.LAST_WD = A.REPORT_DT THEN A.INTRO_RETAIL_IND ELSE 0 END)
      ,MAX(A.INTRO_RETAIL_IND) AS INTRO_RETAIL_MTH_IND
      ,0

/*ALWAYS USE THE PM TABLE AS THIS WILL BE THE LAST COMPLETED MONTH*/
FROM  CC_COBRA.FR14_TRANSACTIONS_PM  A
JOIN  CC_COBRA.CC_PLAN_LOOKUP PL
ON    A.PLAN_NO = PL.PLAN_NO
AND   PL.BW_PLAN_TYPE_CD = 'P'
AND   A.ORG_TX = PL.ORG_TX
CROSS JOIN  CC_COBRA.WK_FR15_DATE_CONTROL B
GROUP BY 1,2,3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_PROMO_RETAIL_FLAG INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_PROMO_RETAIL_FLAG COLUMN(PERIOD_END_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_PROMO_RETAIL_FLAG COLUMN(PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 3 - STEP 03: SET FLAG WHERE THERE HAS BEEN A ROLLOVER TO 10002*/

UPDATE CC_COBRA.FR15_PROMO_RETAIL_FLAG
FROM (
SELECT A.AGRMNT_ID
	  ,A.PLAN_NO
      ,A.PERIOD_END_DT
      ,A.RETAIL_ROLLOVER_IND
FROM 
(SELECT A.AGRMNT_ID
      ,A.PLAN_NO
      ,B.REPORT_DT AS PERIOD_END_DT
      ,A.REPORT_DT 
      ,CASE WHEN (CASE WHEN C.REPORT_DT IS NULL THEN D.INTRO_RETAIL_ME_IND ELSE C.INTRO_RETAIL_IND END) = 2
            AND A.INTRO_RETAIL_IND = 0 THEN 1 ELSE 0 END 
       AS RETAIL_ROLLOVER_IND
FROM  CC_COBRA.FR14_TRANSACTIONS_PM  A
JOIN  CC_COBRA.CC_PLAN_LOOKUP PL
ON    A.PLAN_NO = PL.PLAN_NO
AND   PL.BW_PLAN_TYPE_CD = 'P'
AND   A.ORG_TX = PL.ORG_TX
CROSS JOIN  CC_COBRA.WK_FR15_DATE_CONTROL B
/*PICK UP PRIOR DAY TO CHECK FOR WHERE THE CHANGE IS 2-0 AS THIS WOULD INDICATE A ROLLOVER PLAN (NOT A 2-1-0 PATTERN)*/
LEFT JOIN CC_COBRA.FR14_TRANSACTIONS_PM C
ON    A.AGRMNT_ID = C.AGRMNT_ID
AND   A.PLAN_NO = C.PLAN_NO
AND   C.REPORT_DT = CASE WHEN ((A.REPORT_DT-DATE '0001-01-05') MOD 7) = 3 THEN A.REPORT_DT-3 ELSE A.REPORT_DT-1 END
/*GET PRIOR MONTH RECORD*/
LEFT JOIN CC_COBRA.FR15_PROMO_RETAIL_FLAG D
ON    A.AGRMNT_ID = D.AGRMNT_ID
AND   A.PLAN_NO = D.PLAN_NO 
AND   CAST(((B.REPORT_DT/100*100)+1) AS DATE)-1 = D.PERIOD_END_DT 
) A
/*AND CHECK THAT A BALANCE HAS BEEN MOVED ARTIFICIALLY IN THAT MONTH TO STANDARD RETAIL - OTHERWISE WE DON'T WANT TO FLAG THIS AS A ROLLOVER - AS NOTHING AS ACTUALLY ROLLED OVER*/
WHERE  EXISTS (
SELECT NULL
FROM  CC_COBRA.FR14_PLAN_IN_OUT P
WHERE A.AGRMNT_ID = P.AGRMNT_ID
AND   A.PLAN_NO = P.PLAN_NO_OUT
/*DON'T NEED TO WORRY ABOUT JOINING ON ORG HERE AS RETAIL PLANS ARE NOT DIFFERENT ACROSS ORGS*/
AND   P.PLAN_NO_IN IN (SELECT PLAN_NO FROM CC_COBRA.CC_PLAN_LOOKUP WHERE BW_PLAN_TYPE_CD = 'R' GROUP BY 1) 
AND   A.REPORT_DT = P.REPORT_DT
)
/*AND PULLUP ONLY VALUES WHERE THERE HAS BEEN A 2-0 CHANGE*/
AND   A.RETAIL_ROLLOVER_IND = 1
GROUP BY 1,2,3,4
) A
SET RETAIL_RLOVER_IND = A.RETAIL_ROLLOVER_IND
WHERE A.AGRMNT_ID = CC_COBRA.FR15_PROMO_RETAIL_FLAG.AGRMNT_ID
AND   A.PLAN_NO = CC_COBRA.FR15_PROMO_RETAIL_FLAG.PLAN_NO
AND   A.PERIOD_END_DT = CC_COBRA.FR15_PROMO_RETAIL_FLAG.PERIOD_END_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 3 - STEP 04: INSERT RECORD FOR 10002 FOR ROLLOVER MONTHS*/

DELETE FROM CC_COBRA.FR15_PROMO_RETAIL_FLAG 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND PERIOD_END_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.FR14_TRANSACTIONS_PM GROUP BY 1)
/*DON'T NEED TO WORRY ABOUT JOINING ON ORG HERE AS RETAIL PLANS ARE NOT DIFFERENT ACROSS ORGS*/
AND PLAN_NO IN (SELECT PLAN_NO FROM CC_COBRA.CC_PLAN_LOOKUP WHERE BW_PLAN_TYPE_CD = 'R' GROUP BY 1);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_PROMO_RETAIL_FLAG
SELECT 
AGRMNT_ID
,10002 /*NEED TO CHANGE THIS FOR PREFERENCE LOGO*/
,PERIOD_END_DT 
,0
,0
,RETAIL_RLOVER_IND 

FROM CC_COBRA.FR15_PROMO_RETAIL_FLAG A
JOIN  CC_COBRA.WK_FR15_DATE_CONTROL B
ON    A.PERIOD_END_DT/100 = B.REPORT_DT/100
AND   A.RETAIL_RLOVER_IND = 1;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_PROMO_RETAIL_FLAG INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_PROMO_RETAIL_FLAG COLUMN(PERIOD_END_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_PROMO_RETAIL_FLAG COLUMN(PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - CALCULATION OF THE BALANCE TYPES FOR EACH AGRMNT_ID/PLAN_NO/REPORT_DT*/

/*SECTION 4 - STEP 01: CALCULATE THE DATA*/

/*
CREATE TABLE CC_COBRA.WK_FR15_J06_TRANSACTION_T0 (
AGRMNT_ID INT
,CM_PERIOD_END_DT DATE
,PM_PERIOD_END_DT DATE
,PLAN_NO INT COMPRESS (10001 ,10002 ,10004 ,10005 ,30001 ,30005 ,30006 ,15007 ,11002 )
,CM_CAT CHAR(1) COMPRESS ('D','G','H','I','N','Z')
,PM_CAT CHAR(1) COMPRESS ('D','G','H','I','N','Z')
,BW_PLAN_TYPE_CD CHAR(1) COMPRESS ('B','C','F','I','M','P','R','X')
,ZERO_RATE_IND BYTEINT
,INTRO_RETAIL_IND BYTEINT
,FCM_CUSTMR_CATGRY CHAR(1)
,FPM_CUSTMR_CATGRY CHAR(1)
,FCM_IBB_FLAG BYTEINT
,FPM_IBB_FLAG BYTEINT
,FCM_INTRO_RETAIL_MTH_IND BYTEINT
,FPM_INTRO_RETAIL_MTH_IND BYTEINT
,FCM_RETAIL_RLOVER_IND BYTEINT
,FPM_RETAIL_RLOVER_IND BYTEINT
) PRIMARY INDEX(AGRMNT_ID);
*/


DELETE FROM CC_COBRA.WK_FR15_J06_TRANSACTION_T0 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_J06_TRANSACTION_T0
SELECT T1.AGRMNT_ID
      ,FCM.PERIOD_END_DT
      ,CAST(((FCM.PERIOD_END_DT/100*100)+1) AS DATE)-1 
      ,T1.PLAN_NO
        /**********************************************************************************/
        /*CURRENT MONTH HIGH LEVEL CATEGORY = CM_CAT                                      */
        /**********************************************************************************/
      ,CASE 
        WHEN FCM.CUSTMR_CATGRY = 'G' AND FCM.IBB_FLAG = 1 THEN 'G'
        WHEN FCM.CUSTMR_CATGRY = 'G' AND FCM.IBB_FLAG = 0 THEN 'N'
        WHEN FCM.CUSTMR_CATGRY = 'Z' AND FPM.CUSTMR_CATGRY <> 'Z' THEN FPM.CUSTMR_CATGRY 
        ELSE FCM.CUSTMR_CATGRY END AS CM_CAT
        /**********************************************************************************/
        /*PRIOR MONTH HIGH LEVEL CATEGORY = PM_CAT                                        */
        /**********************************************************************************/
      ,COALESCE (
         CASE WHEN FPM.CUSTMR_CATGRY = 'G' AND FPM.IBB_FLAG = 1 THEN 'G'
              WHEN FPM.CUSTMR_CATGRY = 'G' AND FPM.IBB_FLAG = 0 THEN 'N'
              ELSE FPM.CUSTMR_CATGRY END,
         /*MAKE SAME AS CURRENT MONTH IF NOT EXISTS*/
         CASE WHEN FCM.CUSTMR_CATGRY = 'G' AND FCM.IBB_FLAG = 1 THEN 'G'
              WHEN FCM.CUSTMR_CATGRY = 'G' AND FCM.IBB_FLAG = 0 THEN 'N'
              WHEN FCM.CUSTMR_CATGRY = 'Z' AND FPM.CUSTMR_CATGRY <> 'Z' THEN FPM.CUSTMR_CATGRY 
              ELSE FCM.CUSTMR_CATGRY END)    
               AS PM_CAT
      ,T1.BW_PLAN_TYPE_CD
      ,CASE WHEN SL.RATE = 0.00000 THEN 1 ELSE 0 END AS ZERO_RATE_IND
      ,ZEROIFNULL(T1.INTRO_RETAIL_IND) AS INTRO_RETAIL_IND
      ,CASE WHEN FCM.CUSTMR_CATGRY = 'Z' AND FPM.CUSTMR_CATGRY <> 'Z' THEN 'C' ELSE FCM.CUSTMR_CATGRY END AS FCM_CUSTMR_CATGRY 
      ,FPM.CUSTMR_CATGRY AS FPM_CUSTMR_CATGRY 
      ,ZEROIFNULL(FCM.IBB_FLAG) AS FCM_IBB_FLAG
      ,ZEROIFNULL(FPM.IBB_FLAG) AS FPM_IBB_FLAG
      ,ZEROIFNULL(RCM.INTRO_RETAIL_MTH_IND) AS FCM_INTRO_RETAIL_MTH_IND
      ,ZEROIFNULL(RPM.INTRO_RETAIL_MTH_IND) AS FPM_INTRO_RETAIL_MTH_IND
      ,ZEROIFNULL(RCM.RETAIL_RLOVER_IND) AS FCM_RETAIL_RLOVER_IND
      ,ZEROIFNULL(RPM.RETAIL_RLOVER_IND) AS FPM_RETAIL_RLOVER_IND

FROM      	CC_COBRA.FR14_TRANSACTIONS_PM T1


JOIN      	(
           	SELECT * FROM CC_COBRA.FR15_FLAGS
           	WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
           	) FCM 
ON        	T1.AGRMNT_ID = FCM.AGRMNT_ID
LEFT JOIN  	(
           	SELECT * FROM CC_COBRA.FR15_FLAGS
           	WHERE PERIOD_END_DT = (SELECT CAST(((REPORT_DT/100*100)+1) AS DATE)-1 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
           	) FPM
ON        	T1.AGRMNT_ID = FPM.AGRMNT_ID 
/*
JOIN      	(
           	SELECT A.*, B.REPORT_DT AS PERIOD_END_DT 
           	FROM CC_COBRA.FR15_FLAGS_HST A
           	JOIN CC_COBRA.WK_FR15_DATE_CONTROL B
           	ON B.REPORT_DT BETWEEN A.SOURCE_START_DT AND A.SOURCE_END_DT-1
           	) FCM 
ON        	T1.AGRMNT_ID = FCM.AGRMNT_ID
LEFT JOIN  	(
           	SELECT A.*, B.REPORT_DT AS PERIOD_END_DT  
           	FROM CC_COBRA.FR15_FLAGS_HST A
           	JOIN CC_COBRA.WK_FR15_DATE_CONTROL B
           	ON CAST(((B.REPORT_DT/100*100)+1) AS DATE)-1  BETWEEN A.SOURCE_START_DT AND A.SOURCE_END_DT-1
           	) FPM
ON        	T1.AGRMNT_ID = FPM.AGRMNT_ID 
*/
LEFT JOIN   (
           	SELECT * FROM CC_COBRA.FR15_PROMO_RETAIL_FLAG
           	WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
           	) RCM 
ON        	T1.AGRMNT_ID = RCM.AGRMNT_ID
AND       	T1.PLAN_NO = RCM.PLAN_NO

LEFT JOIN   (
           	SELECT * FROM CC_COBRA.FR15_PROMO_RETAIL_FLAG
           	WHERE PERIOD_END_DT = (SELECT CAST(((REPORT_DT/100*100)+1) AS DATE)-1 FROM CC_COBRA.WK_FR15_DATE_CONTROL)
           	) RPM
ON        	T1.AGRMNT_ID = RPM.AGRMNT_ID
AND       	T1.PLAN_NO = RPM.PLAN_NO

LEFT JOIN   CC_COBRA.CC_ORG_SPECIAL_PLAN_LOOKUP SL
ON          T1.ORG_TX = SL.ORG_TX
AND         T1.PLAN_NO = SL.PLAN_NO
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON  CC_COBRA.WK_FR15_J06_TRANSACTION_T0 INDEX(AGRMNT_ID);



DELETE FROM CC_COBRA.WK_FR15_J06_TRANSACTION_T1 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_J06_TRANSACTION_T1
SELECT
 T1.AGRMNT_ID
,T1.PLAN_NO
,T1.REPORT_DT
,T1.INTRO_RETAIL_IND
,T0.CM_CAT
,T0.PM_CAT
/**********************************************************************************/
/*CURRENT MONTH BW TYPE CODE = CM_BAL_CAT                                         */
/**********************************************************************************/
,DCM.BALANC_TYPE_CD AS CM_BAL_CAT
/**********************************************************************************/
/*PRIOR MONTH BW TYPE CODE =PM_BAL_CAT                                            */
/**********************************************************************************/
,COALESCE(
 APL.BALANC_TYPE_CD --FIRST END OF PRIOR MONTH POSITION FROM LOOKUP TABLE
,DPM.BALANC_TYPE_CD
,DCM.BALANC_TYPE_CD) AS PM_BAL_CAT

,T1.OPENNG_BL
,T1.CLOSNG_BL
,T1.RETAIL_A_UK_AM
,T1.RETAIL_A_UK_CT
,T1.RETAIL_M_UK_AM
,T1.RETAIL_M_UK_CT
,T1.RETAIL_V_UK_AM
,T1.RETAIL_V_UK_CT
,T1.RETAIL_A_FOREGN_AM
,T1.RETAIL_A_FOREGN_CT
,T1.RETAIL_M_FOREGN_AM
,T1.RETAIL_M_FOREGN_CT
,T1.RETAIL_V_FOREGN_AM
,T1.RETAIL_V_FOREGN_CT
,T1.CASH_A_UK_AM
,T1.CASH_A_UK_CT
,T1.CASH_M_UK_AM
,T1.CASH_M_UK_CT
,T1.CASH_V_UK_AM
,T1.CASH_V_UK_CT
,T1.CASH_A_FOREGN_AM
,T1.CASH_A_FOREGN_CT
,T1.CASH_M_FOREGN_AM
,T1.CASH_M_FOREGN_CT
,T1.CASH_V_FOREGN_AM
,T1.CASH_V_FOREGN_CT
,T1.BALANC_TRNSFR_AM
,T1.BALANC_TRNSFR_CT
,T1.MONEY_TRNSFR_AM
,T1.MONEY_TRNSFR_CT
,T1.PROMO_CHEQUE_AM
,T1.PROMO_CHEQUE_CT
,T1.CONVNC_CHEQUE_AM
,T1.CONVNC_CHEQUE_CT
,T1.INTRST_FEE_AM
,T1.INTRST_FEE_REVRSL_AM
,T1.PPI_FEE_AM
,T1.PPI_FEE_REVRSL_AM
,T1.BT_FEE_AM
,T1.MT_FEE_AM
,T1.LATE_FEE_AM
,T1.LATE_FEE_REVRSL_AM
,T1.OVRLMT_FEE_AM
,T1.OVRLMT_FEE_REVRSL_AM
,T1.RETPMT_FEE_AM
,T1.RETPMT_FEE_REVRSL_AM
,T1.MBRSHP_FEE_AM
,T1.CSHADV_FEE_AM
,T1.SNTNL_FEE_AM
,T1.PVYGRD_FEE_AM
,T1.FOREX_FEE_AM
,T1.OTHER_FEE_AM
,T1.ADJMNT_AM
,T1.CSHBCK_AM
,T1.TRNSFR_AM
,T1.WRITE_OFF_AM
,T1.FRAUD_AM
,T1.FULL_PART_PAYMNT_AM
,T1.MIN_PAYMNT_AM
,T1.BT_OUT_AM
,T1.ADJUST_AM
,T1.TRADE_IN_AM
,T1.TRADE_OUT_AM
,CASE WHEN CM_CAT <> 'Z' AND PM_CAT = 'Z' THEN 
       (CASE WHEN PI.AGRMNT_ID IS NULL THEN T1.PLAN_IN_AM ELSE 0 END)+
       (CASE WHEN PO.AGRMNT_ID IS NULL THEN T1.PLAN_OUT_AM ELSE 0 END)+
       T1.CHARGE_OFF_AM 
      ELSE T1.CHARGE_OFF_AM END
,CASE WHEN CM_CAT <> 'Z' AND PM_CAT = 'Z' THEN (CASE WHEN PI.AGRMNT_ID IS NOT NULL THEN T1.PLAN_IN_AM ELSE 0 END) ELSE T1.PLAN_IN_AM END
,CASE WHEN CM_CAT <> 'Z' AND PM_CAT = 'Z' THEN (CASE WHEN PO.AGRMNT_ID IS NOT NULL THEN T1.PLAN_OUT_AM ELSE 0 END) ELSE T1.PLAN_OUT_AM END
,BT_OUT_CT

FROM      	CC_COBRA.FR14_TRANSACTIONS_PM T1
JOIN        CC_COBRA.WK_FR15_J06_TRANSACTION_T0 T0
ON          T1.AGRMNT_ID = T0.AGRMNT_ID
AND         T1.PLAN_NO = T0.PLAN_NO
AND         T1.INTRO_RETAIL_IND = T0.INTRO_RETAIL_IND

JOIN        CC_COBRA.FR15_BALANC_TYPE_CD_DRIVER DCM
ON          T0.BW_PLAN_TYPE_CD = DCM.BW_PLAN_TYPE_CD
AND         T0.FCM_IBB_FLAG = DCM.IBB_FLAG
AND         T0.ZERO_RATE_IND = DCM.ZERO_RATE_IND
AND         T0.INTRO_RETAIL_IND = DCM.INTRO_RETAIL_IND
AND         T0.FCM_CUSTMR_CATGRY = DCM.CUSTMR_CATGRY
AND         T0.FCM_INTRO_RETAIL_MTH_IND = DCM.INTRO_RETAIL_MTH_IND
AND         T0.FCM_RETAIL_RLOVER_IND = DCM.RETAIL_RLOVER_IND
AND         T0.CM_PERIOD_END_DT BETWEEN DCM.SOURCE_START_DT AND DCM.SOURCE_END_DT-1

LEFT JOIN   CC_COBRA.FR15_BALANC_TYPE_CD_DRIVER DPM
ON          T0.BW_PLAN_TYPE_CD = DPM.BW_PLAN_TYPE_CD
AND         T0.FPM_IBB_FLAG = DPM.IBB_FLAG
AND         T0.ZERO_RATE_IND = DPM.ZERO_RATE_IND
AND         T0.INTRO_RETAIL_IND = DPM.INTRO_RETAIL_IND
AND         T0.FPM_CUSTMR_CATGRY = DPM.CUSTMR_CATGRY
AND         T0.FPM_INTRO_RETAIL_MTH_IND = DPM.INTRO_RETAIL_MTH_IND
AND         T0.FPM_RETAIL_RLOVER_IND = DPM.RETAIL_RLOVER_IND
AND         T0.PM_PERIOD_END_DT BETWEEN DPM.SOURCE_START_DT AND DPM.SOURCE_END_DT-1

LEFT JOIN  	CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP APL
ON        	T1.AGRMNT_ID = APL.AGRMNT_ID 
AND       	T1.PLAN_NO = APL.PLAN_NO 
AND         T0.PM_PERIOD_END_DT BETWEEN APL.SOURCE_START_DT AND APL.SOURCE_END_DT-1

LEFT JOIN 	(SELECT AGRMNT_ID, PLAN_NO_IN, REPORT_DT FROM CC_COBRA.FR14_PLAN_IN_OUT GROUP BY 1,2,3) PI
ON        	T1.AGRMNT_ID = PI.AGRMNT_ID
AND       	T1.PLAN_NO = PI.PLAN_NO_IN
AND       	T1.REPORT_DT = PI.REPORT_DT

LEFT JOIN 	(SELECT AGRMNT_ID, PLAN_NO_OUT, REPORT_DT FROM CC_COBRA.FR14_PLAN_IN_OUT GROUP BY 1,2,3) PO
ON        	T1.AGRMNT_ID = PO.AGRMNT_ID
AND       	T1.PLAN_NO = PO.PLAN_NO_OUT
AND       	T1.REPORT_DT = PO.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 4 - STEP 02: UPDATE RECORDS WHERE CM IS 'Z' AND PM IS NOT 'Z'*/

UPDATE CC_COBRA.WK_FR15_J06_TRANSACTION_T1
SET CM_BAL_CAT = PM_BAL_CAT
WHERE CM_BAL_CAT = 'UPDPMB';

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


UPDATE CC_COBRA.WK_FR15_J06_TRANSACTION_T1
SET CM_BAL_CAT = 'ZZZZZZ'
   ,PM_BAL_CAT = 'ZZZZZZ'
WHERE CM_BAL_CAT IS NULL AND PM_BAL_CAT IS NULL AND CM_CAT = 'Z' AND PM_CAT = 'Z';

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J06_TRANSACTION_T1 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J06_TRANSACTION_T1 COLUMN(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - STEP 03: IN CASE OF RERUNS GET BACK TO CORRECT POSITION*/

DELETE FROM CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP WHERE SOURCE_START_DT >= (SELECT CAST(((REPORT_DT/100*100)+1) AS DATE) FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP 
SET SOURCE_END_DT = '3500/12/31' WHERE SOURCE_END_DT >= (SELECT CAST(((REPORT_DT/100*100)+1) AS DATE) FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND SOURCE_END_DT <> '3500/12/31';


/*SECTION 4 - STEP 04: COLLECT ALL VALUES FOR MONTH IN PREP FOR BALANCE WALK TYPE CD LOOKUP*/

DELETE FROM  CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1
SELECT T.AGRMNT_ID
      ,T.PLAN_NO
      ,T.CM_BAL_CAT
      ,1
      ,CASE WHEN T.REPORT_DT = DC.WD1 THEN CAST(((T.REPORT_DT/100*100)+1) AS DATE) 
            ELSE T.REPORT_DT
            END 
      ,'3500/12/31'

FROM 
(
SELECT T1.*
FROM 
(
SELECT RANK () OVER (PARTITION BY A.AGRMNT_ID, A.PLAN_NO ORDER BY A.REPORT_DT) AS ORDER_NO
	  ,A.AGRMNT_ID, A.PLAN_NO, A.CM_BAL_CAT,A.REPORT_DT
FROM  CC_COBRA.WK_FR15_J06_TRANSACTION_T1 A
) T1
LEFT JOIN
(
SELECT RANK () OVER (PARTITION BY A.AGRMNT_ID, A.PLAN_NO ORDER BY A.REPORT_DT) AS ORDER_NO
	  ,A.AGRMNT_ID, A.PLAN_NO, A.CM_BAL_CAT,A.REPORT_DT
FROM  CC_COBRA.WK_FR15_J06_TRANSACTION_T1 A
) T2
ON T1.AGRMNT_ID = T2.AGRMNT_ID
AND T1.PLAN_NO = T2.PLAN_NO
AND T1.ORDER_NO-1 = T2.ORDER_NO
WHERE (T1.CM_BAL_CAT <> T2.CM_BAL_CAT
OR    T2.CM_BAL_CAT IS NULL)
) T
CROSS JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - STEP 05: UPDATE RANK TO CORRECT VALUE - IN ORDER TO PICK THE FIRST RECORD IN THE NEXT STEP*/

UPDATE  CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1
FROM  (
SELECT *
FROM 
(SELECT 
RANK () OVER (PARTITION BY A.AGRMNT_ID, A.PLAN_NO ORDER BY A.SOURCE_START_DT) AS NEW_RANK_NO
,A.*
FROM CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 A
) T1
WHERE NEW_RANK_NO > 1) U
SET RANK_NO = U.NEW_RANK_NO
WHERE CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.AGRMNT_ID = U.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.PLAN_NO = U.PLAN_NO
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.BALANC_TYPE_CD = U.BALANC_TYPE_CD
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.SOURCE_START_DT = U.SOURCE_START_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - STEP 06: DELETE RECORDS THAT MATCH THE LATEST RECORD IN THE LOOKUP TABLE - I.E. NO CHANGE REQUIRED*/

DELETE FROM CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1
WHERE RANK_NO = 1  --FIRST RECORD POSSIBLE
AND
EXISTS (
SELECT NULL
FROM CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP LU
WHERE CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.AGRMNT_ID = LU.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.PLAN_NO = LU.PLAN_NO
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.BALANC_TYPE_CD = LU.BALANC_TYPE_CD
AND   LU.SOURCE_END_DT = '3500/12/31'
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 INDEX(AGRMNT_ID);

/*SECTION 4 - STEP 07: UPDATE RANK TO = 1 IN ORDER TO RESEQUENCE DATA FOR NEXT STEP*/

UPDATE CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1
SET RANK_NO = 1
WHERE RANK_NO <> 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - STEP 08: UPDATE RANK TO CORRECT VALUE - IN ORDER TO PICK THE FIRST RECORD IN THE NEXT STEP*/

UPDATE  CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1
FROM  (
SELECT *
FROM 
(SELECT 
RANK () OVER (PARTITION BY A.AGRMNT_ID, A.PLAN_NO ORDER BY A.SOURCE_START_DT) AS NEW_RANK_NO
,A.*
FROM CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 A
) T1
WHERE NEW_RANK_NO > 1) U
SET RANK_NO = U.NEW_RANK_NO
WHERE CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.AGRMNT_ID = U.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.PLAN_NO = U.PLAN_NO
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.BALANC_TYPE_CD = U.BALANC_TYPE_CD
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.SOURCE_START_DT = U.SOURCE_START_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - STEP 09: UPDATE SOURCE_END_DT FOR RECORDS WHERE MULTIPLE EXIST IN MONTH*/

UPDATE  CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1
FROM (
SELECT T1.AGRMNT_ID
      ,T1.PLAN_NO
      ,T1.BALANC_TYPE_CD
      ,T1.SOURCE_START_DT
      ,T2.SOURCE_START_DT AS SOURCE_END_DT
      
FROM 
CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 T1
JOIN 
CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 T2
ON T1.AGRMNT_ID = T2.AGRMNT_ID
AND T1.PLAN_NO = T2.PLAN_NO
AND T1.RANK_NO+1 = T2.RANK_NO
) U
SET SOURCE_END_DT = U.SOURCE_END_DT
WHERE CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.AGRMNT_ID = U.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.PLAN_NO = U.PLAN_NO
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.BALANC_TYPE_CD = U.BALANC_TYPE_CD
AND   CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1.SOURCE_START_DT = U.SOURCE_START_DT

;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DISPLAY VOLUME WITH MORE THAN ONE RECORD*/

SELECT COUNT(*)
FROM CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1
WHERE RANK_NO > 2
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - STEP 10: END DATE RECORDS IN MAIN TABLE THAT HAVE A DIFFERENT VALUE IN THE NEW DATA TO BE INSERTED*/

UPDATE CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP 
FROM CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 A
SET SOURCE_END_DT = A.SOURCE_START_DT
WHERE CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP.PLAN_NO = A.PLAN_NO
AND   CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP.SOURCE_END_DT = '3500/12/31'
AND   CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP.BALANC_TYPE_CD <> A.BALANC_TYPE_CD
AND   A.RANK_NO = 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 4 - STEP 11: INSERT NEW VALUES  - EVERYTHING IN T1 TABLE SHOULD NOT EXIST IN MAIN TABLE*/

INSERT INTO CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP
SELECT 
AGRMNT_ID 
,PLAN_NO 
,BALANC_TYPE_CD 
,SOURCE_START_DT
,SOURCE_END_DT
FROM CC_COBRA.WK_FR15_J06_PLAN_TYPE_T1 A
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP COLUMN(PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL REBUILDLKUP;

/*SECTION 4 - STEP 12: GET LOOKUP FOR FEATUR_ID*/

DELETE FROM CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE ALL;

INSERT INTO CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE
SELECT A.AGRMNT_ID
      ,A.FEATUR_ID
      ,CASE WHEN C.BALANC_TYPE_CD = 'PIBB' THEN 'RIBB'
       WHEN C.BALANC_TYPE_CD = 'PIMPRD' THEN 'RIMPRD'
       WHEN C.BALANC_TYPE_CD = 'PHRDSP' THEN 'RHRDSP'
       WHEN C.BALANC_TYPE_CD = 'IHRDSP' THEN 'RHRDSP'
       WHEN C.BALANC_TYPE_CD = 'MHRDSP' THEN 'BHRDSP'
       WHEN C.BALANC_TYPE_CD = 'IIMPRD' THEN 'RIMPRD'
       WHEN C.BALANC_TYPE_CD = 'MIMPRD' THEN 'RIMPRD'
       WHEN C.BALANC_TYPE_CD = 'IIBB' THEN 'RIBB'
       WHEN C.BALANC_TYPE_CD = 'IZIBB' THEN 'RIBB'
       WHEN C.BALANC_TYPE_CD = 'BZIBB' THEN 'BIBB'
       WHEN C.BALANC_TYPE_CD = 'MIBB' THEN 'BIBB'
       WHEN C.BALANC_TYPE_CD = 'MZIBB' THEN 'BIBB'
       ELSE C.BALANC_TYPE_CD END AS AGG_BAL_TYPE_CD  --OLD BW_TYPE_CD
      ,C.BALANC_TYPE_CD --NEW_BW_TYPE_CD
      ,CASE WHEN B.SOURCE_START_DT > C.SOURCE_START_DT THEN B.SOURCE_START_DT ELSE C.SOURCE_START_DT END
      ,CASE WHEN B.SOURCE_END_DT-1 < C.SOURCE_END_DT-1 THEN B.SOURCE_END_DT ELSE C.SOURCE_END_DT END
FROM   GDW_VIEWSX.AGREEMENT_FEATURE A
JOIN   GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE B
ON     A.AGRMNT_ID = B.AGRMNT_ID
AND    A.FEATUR_ID = B.FEATUR_ID
AND    B.RELATD_FEATUR_ID = 5018 --CURRENT PLAN NO
AND    A.SOURCE_END_DT = '3500/12/31'
JOIN   CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP C
ON     A.AGRMNT_ID = C.AGRMNT_ID
AND    CAST(B.AGRMNT_FEATUR_FEATUR_NO AS INT) = C.PLAN_NO
AND    (
       B.SOURCE_START_DT BETWEEN C.SOURCE_START_DT AND C.SOURCE_END_DT-1
OR     B.SOURCE_END_DT-1 BETWEEN C.SOURCE_START_DT AND C.SOURCE_END_DT-1
OR     (C.SOURCE_START_DT BETWEEN B.SOURCE_START_DT AND B.SOURCE_END_DT-1 AND 
           (C.SOURCE_END_DT-1 BETWEEN B.SOURCE_START_DT AND B.SOURCE_END_DT-1 
            OR (C.SOURCE_END_DT = '3500/12/31' AND B.SOURCE_END_DT = '3500/12/31')
            )
       )
       )
       
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE COLUMN(FEATUR_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*USING THE PROCESSING DATE FOR FR14 TO TRIGGER A SKIP OF THE REST OF THE CODE FOR FR15*/
/*IF NOT RUN ON THE FIRST WORKING DAY THEN IT WILL SKIP THE REST OF THE CODE*/

SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPTOEND;

/*SECTION 5 - AGGREGATION TO MONTH - STAGE 1*/

DELETE FROM CC_COBRA.WK_FR15_J07_TRANSACTION_T2 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 5 - STEP 01: 1ST INSERT PUTS A RECORD IN FOR THE CURRENT MONTH POSITION*/

INSERT INTO CC_COBRA.WK_FR15_J07_TRANSACTION_T2
SELECT
 A.AGRMNT_ID
,A.PLAN_NO
,CM_BAL_CAT AS BALANC_TYPE_CD
,ADD_MONTHS(CAST(((A.REPORT_DT/100*100)+1) AS DATE),1)-1 AS PERIOD_END_DT
,1 AS INSERT_STEP /*STEP 1*/
/*ONLY USE THE OPENING BAL WHERE THE CATEGORIES HAVEN'T CHANGED*/
,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = PM_BAL_CAT THEN OPENNG_BL 
          ELSE 0 END) AS OPEN_BALANC_AM          
,SUM(TRADE_IN_AM) AS TRADE_XFRIN_AM
,SUM(TRADE_OUT_AM) AS TRADE_XFROUT_AM
/*TRANSFER IN FIELDS*/
,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'CHRDSP' AND CM_BAL_CAT <> 'CHRDSP' 
          THEN OPENNG_BL ELSE 0 END) 
AS XFRIN_CHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'RHRDSP' AND CM_BAL_CAT <> 'RHRDSP' 
          THEN OPENNG_BL ELSE 0 END) 
AS XFRIN_RHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'IHRDSP' AND CM_BAL_CAT <> 'IHRDSP' 
          THEN OPENNG_BL ELSE 0 END) 
AS XFRIN_IHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'BHRDSP' AND CM_BAL_CAT <> 'BHRDSP' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_BHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'MHRDSP' AND CM_BAL_CAT <> 'MHRDSP' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_MHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'PHRDSP' AND CM_BAL_CAT <> 'PHRDSP' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_PHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'BXHDSP' AND CM_BAL_CAT <> 'BXHDSP' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_BXHDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'MXHDSP' AND CM_BAL_CAT <> 'MXHDSP' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_MXHDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'IXHDSP' AND CM_BAL_CAT <> 'IXHDSP' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_IXHDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'ISTAT' AND CM_BAL_CAT <> 'ISTAT' 
          THEN OPENNG_BL       
          ELSE 0 END) 
AS XFRIN_ISTAT_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'CIMPRD' AND CM_BAL_CAT <> 'CIMPRD'  
          THEN OPENNG_BL ELSE 0 END) 
AS XFRIN_CIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'RIMPRD' AND CM_BAL_CAT <> 'RIMPRD'  
          THEN OPENNG_BL ELSE 0 END) 
AS XFRIN_RIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'IIMPRD' AND CM_BAL_CAT <> 'IIMPRD'  
          THEN OPENNG_BL ELSE 0 END) 
AS XFRIN_IIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'BIMPRD' AND CM_BAL_CAT <> 'BIMPRD'  
          THEN OPENNG_BL   
          ELSE 0 END) 
AS XFRIN_BIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'MIMPRD' AND CM_BAL_CAT <> 'MIMPRD'  
          THEN OPENNG_BL   
          ELSE 0 END) 
AS XFRIN_MIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'PIMPRD' AND CM_BAL_CAT <> 'PIMPRD'  
          THEN OPENNG_BL   
          ELSE 0 END) 
AS XFRIN_PIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'BXIMPD' AND CM_BAL_CAT <> 'BXIMPD' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_BXIMPD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'MXIMPD' AND CM_BAL_CAT <> 'MXIMPD' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_MXIMPD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'IXIMPD' AND CM_BAL_CAT <> 'IXIMPD' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_IXIMPD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'CIBB' AND CM_BAL_CAT <> 'CIBB'  
          THEN OPENNG_BL ELSE 0 END) 
AS XFRIN_CIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'RIBB' AND CM_BAL_CAT <> 'RIBB' 
          THEN OPENNG_BL 
          ELSE 0 END) 
AS XFRIN_RIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'IIBB' AND CM_BAL_CAT <> 'IIBB' 
          THEN OPENNG_BL 
          ELSE 0 END) 
AS XFRIN_IIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'IZIBB' AND CM_BAL_CAT <> 'IZIBB' 
          THEN OPENNG_BL 
          ELSE 0 END) 
AS XFRIN_IZIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'BIBB' AND CM_BAL_CAT <> 'BIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_BIBB_AM  

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'BZIBB' AND CM_BAL_CAT <> 'BZIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_BZIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'MIBB' AND CM_BAL_CAT <> 'MIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_MIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'MZIBB' AND CM_BAL_CAT <> 'MZIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_MZIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'PIBB' AND CM_BAL_CAT <> 'PIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_PIBB_AM   

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'PZIBB' AND CM_BAL_CAT <> 'PZIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_PZIBB_AM   

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'BXIBB' AND CM_BAL_CAT <> 'BXIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_BXIBB_AM   

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'MXIBB' AND CM_BAL_CAT <> 'MXIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_MXIBB_AM   

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'IXIBB' AND CM_BAL_CAT <> 'IXIBB' 
          THEN OPENNG_BL  
          ELSE 0 END) 
AS XFRIN_IXIBB_AM   

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND PM_BAL_CAT = 'RNIBB' AND CM_BAL_CAT <> 'RNIBB' 
          THEN OPENNG_BL 
          ELSE 0 END) 
AS XFRIN_RNIBB_AM 

/*CANNOT INSERT FOR OUTS ON THIS INSERT AS WRONG BALANC_TYPE_CD*/
,SUM(0) AS XFROUT_CHRDSP_AM
,SUM(0) AS XFROUT_RHRDSP_AM
,SUM(0) AS XFROUT_IHRDSP_AM
,SUM(0) AS XFROUT_BHRDSP_AM
,SUM(0) AS XFROUT_MHRDSP_AM
,SUM(0) AS XFROUT_PHRDSP_AM
,SUM(0) AS XFROUT_BXHDSP_AM
,SUM(0) AS XFROUT_MXHDSP_AM
,SUM(0) AS XFROUT_IXHDSP_AM
,SUM(0) AS XFROUT_ISTAT_AM
,SUM(0) AS XFROUT_CIMPRD_AM
,SUM(0) AS XFROUT_RIMPRD_AM
,SUM(0) AS XFROUT_IIMPRD_AM
,SUM(0) AS XFROUT_BIMPRD_AM
,SUM(0) AS XFROUT_MIMPRD_AM
,SUM(0) AS XFROUT_PIMPRD_AM
,SUM(0) AS XFROUT_BXIMPD_AM
,SUM(0) AS XFROUT_MXIMPD_AM
,SUM(0) AS XFROUT_IXIMPD_AM
,SUM(0) AS XFROUT_CIBB_AM
,SUM(0) AS XFROUT_RIBB_AM
,SUM(0) AS XFROUT_IIBB_AM
,SUM(0) AS XFROUT_IZIBB_AM
,SUM(0) AS XFROUT_BIBB_AM
,SUM(0) AS XFROUT_BZIBB_AM
,SUM(0) AS XFROUT_MIBB_AM
,SUM(0) AS XFROUT_MZIBB_AM
,SUM(0) AS XFROUT_PIBB_AM
,SUM(0) AS XFROUT_PZIBB_AM
,SUM(0) AS XFROUT_BXIBB_AM
,SUM(0) AS XFROUT_MXIBB_AM
,SUM(0) AS XFROUT_IXIBB_AM
,SUM(0) AS XFROUT_RNIBB_AM
,SUM(RETAIL_A_UK_AM) AS RETAIL_A_UK_AM
,SUM(RETAIL_A_UK_CT) AS RETAIL_A_UK_CT
,SUM(RETAIL_M_UK_AM) AS RETAIL_M_UK_AM
,SUM(RETAIL_M_UK_CT) AS RETAIL_M_UK_CT
,SUM(RETAIL_V_UK_AM) AS RETAIL_V_UK_AM
,SUM(RETAIL_V_UK_CT) AS RETAIL_V_UK_CT
,SUM(RETAIL_A_FOREGN_AM) AS RETAIL_A_FOREGN_AM
,SUM(RETAIL_A_FOREGN_CT) AS RETAIL_A_FOREGN_CT
,SUM(RETAIL_M_FOREGN_AM) AS RETAIL_M_FOREGN_AM
,SUM(RETAIL_M_FOREGN_CT) AS RETAIL_M_FOREGN_CT
,SUM(RETAIL_V_FOREGN_AM) AS RETAIL_V_FOREGN_AM
,SUM(RETAIL_V_FOREGN_CT) AS RETAIL_V_FOREGN_CT
,SUM(CASH_A_UK_AM) AS CASH_A_UK_AM
,SUM(CASH_A_UK_CT) AS CASH_A_UK_CT
,SUM(CASH_M_UK_AM) AS CASH_M_UK_AM
,SUM(CASH_M_UK_CT) AS CASH_M_UK_CT
,SUM(CASH_V_UK_AM) AS CASH_V_UK_AM
,SUM(CASH_V_UK_CT) AS CASH_V_UK_CT
,SUM(CASH_A_FOREGN_AM) AS CASH_A_FOREGN_AM
,SUM(CASH_A_FOREGN_CT) AS CASH_A_FOREGN_CT
,SUM(CASH_M_FOREGN_AM) AS CASH_M_FOREGN_AM
,SUM(CASH_M_FOREGN_CT) AS CASH_M_FOREGN_CT
,SUM(CASH_V_FOREGN_AM) AS CASH_V_FOREGN_AM
,SUM(CASH_V_FOREGN_CT) AS CASH_V_FOREGN_CT
,SUM(BALANC_TRNSFR_AM) AS BALANC_TRNSFR_AM
,SUM(BALANC_TRNSFR_CT) AS BALANC_TRNSFR_CT
,SUM(MONEY_TRNSFR_AM) AS MONEY_TRNSFR_AM
,SUM(MONEY_TRNSFR_CT) AS MONEY_TRNSFR_CT
,SUM(PROMO_CHEQUE_AM) AS PROMO_CHEQUE_AM
,SUM(PROMO_CHEQUE_CT) AS PROMO_CHEQUE_CT
,SUM(CONVNC_CHEQUE_AM) AS CONVNC_CHEQUE_AM
,SUM(CONVNC_CHEQUE_CT) AS CONVNC_CHEQUE_CT
,SUM(INTRST_FEE_AM) AS INTRST_FEE_AM
,SUM(INTRST_FEE_REVRSL_AM) AS INTRST_FEE_REVRSL_AM
,SUM(PPI_FEE_AM) AS PPI_FEE_AM
,SUM(PPI_FEE_REVRSL_AM) AS PPI_FEE_REVRSL_AM
,SUM(BT_FEE_AM) AS BT_FEE_AM
,SUM(MT_FEE_AM) AS MT_FEE_AM
,SUM(LATE_FEE_AM) AS LATE_FEE_AM
,SUM(LATE_FEE_REVRSL_AM) AS LATE_FEE_REVRSL_AM
,SUM(OVRLMT_FEE_AM) AS OVRLMT_FEE_AM
,SUM(OVRLMT_FEE_REVRSL_AM) AS OVRLMT_FEE_REVRSL_AM
,SUM(RETPMT_FEE_AM) AS RETPMT_FEE_AM
,SUM(RETPMT_FEE_REVRSL_AM) AS RETPMT_FEE_REVRSL_AM
,SUM(MBRSHP_FEE_AM) AS MBRSHP_FEE_AM
,SUM(CSHADV_FEE_AM) AS CSHADV_FEE_AM
,SUM(SNTNL_FEE_AM) AS SNTNL_FEE_AM
,SUM(PVYGRD_FEE_AM) AS PVYGRD_FEE_AM
,SUM(FOREX_FEE_AM) AS FOREX_FEE_AM
,SUM(OTHER_FEE_AM) AS OTHER_FEE_AM
,SUM(BT_OUT_AM) AS BT_OUT_AM
,SUM(MIN_PAYMNT_AM) AS PAYMNT_MIN_AM
,SUM(FULL_PART_PAYMNT_AM) AS PAYMNT_PRTFUL_AM
,SUM(CHARGE_OFF_AM) AS CHARGE_OFF_AM
,SUM(ADJUST_AM+ADJMNT_AM) AS ADJMNT_AM
,SUM(CSHBCK_AM) AS CSHBCK_AM
,SUM(TRNSFR_AM) AS TRNSFR_AM
,SUM(WRITE_OFF_AM) AS WRITE_OFF_AM
,SUM(FRAUD_AM) AS FRAUD_AM
,SUM(PLAN_IN_AM) AS UNCLFD_MOVMNT_AM
,SUM(CASE WHEN A.REPORT_DT = DC.LAST_WD THEN CLOSNG_BL ELSE 0 END) AS CLOSNG_BL
,SUM(BT_OUT_CT) AS BT_OUT_CT

FROM CC_COBRA.WK_FR15_J06_TRANSACTION_T1 A
JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
ON   A.REPORT_DT/100 = DC.REPORT_DT/100
AND  CM_CAT||PM_CAT <> 'ZZ' 
GROUP BY 1,2,3,4,5 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J07_TRANSACTION_T2 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 5 - STEP 02: COLLECT THE PLAN IN AND OUTS WITH THE BW TYPE CODES FOR THE IN AND OUT VALUES*/

DELETE FROM CC_COBRA.WK_FR15_PLAN_IN_OUT ALL;

INSERT INTO CC_COBRA.WK_FR15_PLAN_IN_OUT
SELECT 
A.AGRMNT_ID
,A.REPORT_DT
,A.PLAN_NO_OUT
,A.PLAN_OUT_AM
,TA.CM_BAL_CAT
,A.PLAN_NO_IN
,A.PLAN_IN_AM
,TB.CM_BAL_CAT
FROM CC_COBRA.FR14_PLAN_IN_OUT A
JOIN CC_COBRA.WK_FR15_DATE_CONTROL D
ON   A.REPORT_DT/100 = D.REPORT_DT/100 
JOIN CC_COBRA.WK_FR15_J06_TRANSACTION_T1 TA
ON   A.AGRMNT_ID = TA.AGRMNT_ID
AND  A.PLAN_NO_OUT = TA.PLAN_NO
AND  A.REPORT_DT = TA.REPORT_DT 
JOIN CC_COBRA.WK_FR15_J06_TRANSACTION_T1 TB
ON   A.AGRMNT_ID = TB.AGRMNT_ID
AND  A.PLAN_NO_IN = TB.PLAN_NO
AND  A.REPORT_DT = TB.REPORT_DT 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_PLAN_IN_OUT INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 5 - STEP 03: UPDATE UNCLASSIFIED MOVEMENT FIELD WITH AMOUNT WHERE THE BW TYPE CODES ARE THE SAME - IT WILL CANCEL EACHOTHER OUT*/

UPDATE CC_COBRA.WK_FR15_J07_TRANSACTION_T2
FROM (
SELECT TA.AGRMNT_ID
      ,TA.PLAN_NO_IN AS PLAN_NO
      ,TA.PLAN_IN_BW_CD
      ,SUM(TA.PLAN_IN_AM) AS PLAN_IN_AM

FROM  CC_COBRA.WK_FR15_PLAN_IN_OUT TA
WHERE   TA.PLAN_IN_BW_CD = TA.PLAN_OUT_BW_CD
GROUP BY 1,2,3
) T1
SET UNCLFD_MOVMNT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.UNCLFD_MOVMNT_AM-T1.PLAN_IN_AM
WHERE CC_COBRA.WK_FR15_J07_TRANSACTION_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.PLAN_NO = T1.PLAN_NO
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.BALANC_TYPE_CD = T1.PLAN_IN_BW_CD
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.INSERT_STEP = 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 5 - STEP 04: UNALLOCATED MOVEMENT FIELD IN RECORDS WHERE CROSS BALANCE TYPES*/

UPDATE CC_COBRA.WK_FR15_J07_TRANSACTION_T2
FROM (
SELECT TA.AGRMNT_ID
      ,TA.PLAN_NO_IN AS PLAN_NO
      ,TA.PLAN_IN_BW_CD
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'CHRDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_CHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'RHRDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_RHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'IHRDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_IHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'BHRDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_BHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'MHRDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_MHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'PHRDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_PHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'BXHDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_BXHDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'MXHDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_MXHDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'IXHDSP' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_IXHDSP_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'ISTAT'  THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_ISTAT_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'CIMPRD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_CIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'RIMPRD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_RIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'IIMPRD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_IIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'BIMPRD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_BIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'MIMPRD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_MIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'PIMPRD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_PIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'BXIMPD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_BXIMPD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'MXIMPD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_MXIMPD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'IXIMPD' THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_IXIMPD_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'CIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_CIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'RIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_RIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'IIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_IIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'IZIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_IZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'BIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_BIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'BZIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_BZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'MIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_MIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'MZIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_MZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'PIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_PIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'PZIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_PZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'BXIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_BXIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'MXIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_MXIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'IXIBB'   THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_IXIBB_AM
      ,SUM(CASE WHEN TA.PLAN_OUT_BW_CD = 'RNIBB'  THEN PLAN_IN_AM ELSE 0 END) AS XFRIN_RNIBB_AM  

FROM  CC_COBRA.WK_FR15_PLAN_IN_OUT TA
WHERE   TA.PLAN_IN_BW_CD <> TA.PLAN_OUT_BW_CD
GROUP BY 1,2,3
) T1
SET XFRIN_CHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_CHRDSP_AM+ZEROIFNULL(T1.XFRIN_CHRDSP_AM)
   ,XFRIN_RHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RHRDSP_AM+ZEROIFNULL(T1.XFRIN_RHRDSP_AM)
   ,XFRIN_IHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IHRDSP_AM+ZEROIFNULL(T1.XFRIN_IHRDSP_AM)
   ,XFRIN_BHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BHRDSP_AM+ZEROIFNULL(T1.XFRIN_BHRDSP_AM)
   ,XFRIN_MHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MHRDSP_AM+ZEROIFNULL(T1.XFRIN_MHRDSP_AM)
   ,XFRIN_PHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PHRDSP_AM+ZEROIFNULL(T1.XFRIN_PHRDSP_AM)
   ,XFRIN_BXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BXHDSP_AM+ZEROIFNULL(T1.XFRIN_BXHDSP_AM)
   ,XFRIN_MXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MXHDSP_AM+ZEROIFNULL(T1.XFRIN_MXHDSP_AM)
   ,XFRIN_IXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IXHDSP_AM+ZEROIFNULL(T1.XFRIN_IXHDSP_AM)
   ,XFRIN_ISTAT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_ISTAT_AM+ZEROIFNULL(T1.XFRIN_ISTAT_AM)
   ,XFRIN_CIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_CIMPRD_AM+ZEROIFNULL(T1.XFRIN_CIMPRD_AM)
   ,XFRIN_RIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RIMPRD_AM+ZEROIFNULL(T1.XFRIN_RIMPRD_AM)
   ,XFRIN_IIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IIMPRD_AM+ZEROIFNULL(T1.XFRIN_IIMPRD_AM)
   ,XFRIN_BIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BIMPRD_AM+ZEROIFNULL(T1.XFRIN_BIMPRD_AM)
   ,XFRIN_MIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MIMPRD_AM+ZEROIFNULL(T1.XFRIN_MIMPRD_AM)
   ,XFRIN_PIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PIMPRD_AM+ZEROIFNULL(T1.XFRIN_PIMPRD_AM)
   ,XFRIN_BXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BXIMPD_AM+ZEROIFNULL(T1.XFRIN_BXIMPD_AM)
   ,XFRIN_MXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MXIMPD_AM+ZEROIFNULL(T1.XFRIN_MXIMPD_AM)
   ,XFRIN_IXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IXIMPD_AM+ZEROIFNULL(T1.XFRIN_IXIMPD_AM)
   ,XFRIN_CIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_CIBB_AM+ZEROIFNULL(T1.XFRIN_CIBB_AM)
   ,XFRIN_RIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RIBB_AM+ZEROIFNULL(T1.XFRIN_RIBB_AM)
   ,XFRIN_IIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IIBB_AM+ZEROIFNULL(T1.XFRIN_IIBB_AM)
   ,XFRIN_IZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IZIBB_AM+ZEROIFNULL(T1.XFRIN_IZIBB_AM)
   ,XFRIN_BIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BIBB_AM+ZEROIFNULL(T1.XFRIN_BIBB_AM)
   ,XFRIN_BZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BZIBB_AM+ZEROIFNULL(T1.XFRIN_BZIBB_AM)
   ,XFRIN_MIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MIBB_AM+ZEROIFNULL(T1.XFRIN_MIBB_AM)
   ,XFRIN_MZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MZIBB_AM+ZEROIFNULL(T1.XFRIN_MZIBB_AM)
   ,XFRIN_PIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PIBB_AM+ZEROIFNULL(T1.XFRIN_PIBB_AM)
   ,XFRIN_PZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PZIBB_AM+ZEROIFNULL(T1.XFRIN_PZIBB_AM)
   ,XFRIN_BXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BXIBB_AM+ZEROIFNULL(T1.XFRIN_BXIBB_AM)
   ,XFRIN_MXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MXIBB_AM+ZEROIFNULL(T1.XFRIN_MXIBB_AM)
   ,XFRIN_IXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IXIBB_AM+ZEROIFNULL(T1.XFRIN_IXIBB_AM)
   ,XFRIN_RNIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RNIBB_AM+ZEROIFNULL(T1.XFRIN_RNIBB_AM)

   ,UNCLFD_MOVMNT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.UNCLFD_MOVMNT_AM
   					   -T1.XFRIN_CHRDSP_AM
   					   -T1.XFRIN_RHRDSP_AM
                       -T1.XFRIN_IHRDSP_AM
   					   -T1.XFRIN_BHRDSP_AM
                       -T1.XFRIN_MHRDSP_AM
   					   -T1.XFRIN_PHRDSP_AM
                       -T1.XFRIN_BXHDSP_AM
                       -T1.XFRIN_MXHDSP_AM
                       -T1.XFRIN_IXHDSP_AM
   					   -T1.XFRIN_ISTAT_AM
   					   -T1.XFRIN_CIMPRD_AM
   					   -T1.XFRIN_RIMPRD_AM
                       -T1.XFRIN_IIMPRD_AM
   					   -T1.XFRIN_BIMPRD_AM
                       -T1.XFRIN_MIMPRD_AM
   					   -T1.XFRIN_PIMPRD_AM
                       -T1.XFRIN_BXIMPD_AM
                       -T1.XFRIN_MXIMPD_AM
                       -T1.XFRIN_IXIMPD_AM
   					   -T1.XFRIN_CIBB_AM
   					   -T1.XFRIN_RIBB_AM
                       -T1.XFRIN_IIBB_AM
                       -T1.XFRIN_IZIBB_AM
   					   -T1.XFRIN_BIBB_AM
                       -T1.XFRIN_BZIBB_AM
                       -T1.XFRIN_MIBB_AM
                       -T1.XFRIN_MZIBB_AM
   					   -T1.XFRIN_PIBB_AM
                       -T1.XFRIN_PZIBB_AM
                       -T1.XFRIN_BXIBB_AM
                       -T1.XFRIN_MXIBB_AM
                       -T1.XFRIN_IXIBB_AM
   					   -T1.XFRIN_RNIBB_AM
WHERE CC_COBRA.WK_FR15_J07_TRANSACTION_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.PLAN_NO = T1.PLAN_NO
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.BALANC_TYPE_CD = T1.PLAN_IN_BW_CD
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.INSERT_STEP = 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 5 - STEP 05: FIX FOR MOVEMENTS FOR PLANS THAT COME OFF OF PROMO RATES BUT DON'T MOVE PLAN_NO - IN MOVEMENTS*/

UPDATE CC_COBRA.WK_FR15_J07_TRANSACTION_T2
FROM (
SELECT 
A.AGRMNT_ID
,A.PLAN_NO
,A.BALANC_TYPE_CD
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'CHRDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_CHRDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'RHRDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_RHRDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'IHRDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_IHRDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'BHRDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_BHRDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'MHRDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_MHRDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'PHRDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_PHRDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'BXHDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_BXHDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'MXHDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_MXHDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'IXHDSP' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_IXHDSP_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'ISTAT'  THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_ISTAT_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'CIMPRD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_CIMPRD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'RIMPRD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_RIMPRD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'IIMPRD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_IIMPRD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'BIMPRD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_BIMPRD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'MIMPRD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_MIMPRD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'PIMPRD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_PIMPRD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'BXIMPD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_BXIMPD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'MXIMPD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_MXIMPD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'IXIMPD' THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_IXIMPD_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'CIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_CIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'RIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_RIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'IIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_IIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'IZIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_IZIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'BIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_BIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'BZIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_BZIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'MIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_MIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'MZIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_MZIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'PIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_PIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'PZIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_PZIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'BXIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_BXIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'MXIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_MXIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'IXIBB'   THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_IXIBB_AM
,SUM(CASE WHEN B.BALANC_TYPE_CD = 'RNIBB'  THEN T1.OPENNG_BL ELSE 0 END) AS XFRIN_RNIBB_AM
FROM CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP A
JOIN CC_COBRA.WK_FR15_DATE_CONTROL D
ON   A.SOURCE_START_DT/100 = D.REPORT_DT/100 
AND  EXTRACT(DAY FROM A.SOURCE_START_DT) <> 1
JOIN CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.PLAN_NO = B.PLAN_NO
AND  A.SOURCE_START_DT = B.SOURCE_END_DT
JOIN CC_COBRA.WK_FR15_J06_TRANSACTION_T1 T1
ON   A.AGRMNT_ID = T1.AGRMNT_ID
AND  A.PLAN_NO = T1.PLAN_NO
AND  A.SOURCE_START_DT = T1.REPORT_DT 
AND  T1.OPENNG_BL <> 0 --BALANCE ON ACTUAL DAY IN MONTH - NOT JUST FIRST DAY OF MONTH
GROUP BY 1,2,3 ) T1
SET XFRIN_CHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_CHRDSP_AM+T1.XFRIN_CHRDSP_AM
   ,XFRIN_RHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RHRDSP_AM+T1.XFRIN_RHRDSP_AM
   ,XFRIN_IHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IHRDSP_AM+T1.XFRIN_IHRDSP_AM
   ,XFRIN_BHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BHRDSP_AM+T1.XFRIN_BHRDSP_AM
   ,XFRIN_MHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MHRDSP_AM+T1.XFRIN_MHRDSP_AM
   ,XFRIN_PHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PHRDSP_AM+T1.XFRIN_PHRDSP_AM
   ,XFRIN_BXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BXHDSP_AM+T1.XFRIN_BXHDSP_AM
   ,XFRIN_MXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MXHDSP_AM+T1.XFRIN_MXHDSP_AM
   ,XFRIN_IXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IXHDSP_AM+T1.XFRIN_IXHDSP_AM
   ,XFRIN_ISTAT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_ISTAT_AM+T1.XFRIN_ISTAT_AM
   ,XFRIN_CIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_CIMPRD_AM+T1.XFRIN_CIMPRD_AM
   ,XFRIN_RIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RIMPRD_AM+T1.XFRIN_RIMPRD_AM
   ,XFRIN_IIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IIMPRD_AM+T1.XFRIN_IIMPRD_AM
   ,XFRIN_BIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BIMPRD_AM+T1.XFRIN_BIMPRD_AM
   ,XFRIN_MIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MIMPRD_AM+T1.XFRIN_MIMPRD_AM
   ,XFRIN_PIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PIMPRD_AM+T1.XFRIN_PIMPRD_AM
   ,XFRIN_BXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BXIMPD_AM+T1.XFRIN_BXIMPD_AM
   ,XFRIN_MXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MXIMPD_AM+T1.XFRIN_MXIMPD_AM
   ,XFRIN_IXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IXIMPD_AM+T1.XFRIN_IXIMPD_AM
   ,XFRIN_CIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_CIBB_AM+T1.XFRIN_CIBB_AM
   ,XFRIN_RIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RIBB_AM+T1.XFRIN_RIBB_AM
   ,XFRIN_IIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IIBB_AM+T1.XFRIN_IIBB_AM
   ,XFRIN_IZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IZIBB_AM+T1.XFRIN_IZIBB_AM
   ,XFRIN_BIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BIBB_AM+T1.XFRIN_BIBB_AM
   ,XFRIN_BZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BZIBB_AM+T1.XFRIN_BZIBB_AM
   ,XFRIN_MIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MIBB_AM+T1.XFRIN_MIBB_AM
   ,XFRIN_MZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MZIBB_AM+T1.XFRIN_MZIBB_AM
   ,XFRIN_PIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PIBB_AM+T1.XFRIN_PIBB_AM
   ,XFRIN_PZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_PZIBB_AM+T1.XFRIN_PZIBB_AM
   ,XFRIN_BXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_BXIBB_AM+T1.XFRIN_BXIBB_AM
   ,XFRIN_MXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_MXIBB_AM+T1.XFRIN_MXIBB_AM
   ,XFRIN_IXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_IXIBB_AM+T1.XFRIN_IXIBB_AM
   ,XFRIN_RNIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFRIN_RNIBB_AM+T1.XFRIN_RNIBB_AM
WHERE CC_COBRA.WK_FR15_J07_TRANSACTION_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.PLAN_NO = T1.PLAN_NO
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.BALANC_TYPE_CD = T1.BALANC_TYPE_CD
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.INSERT_STEP = 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 6 - AGGREGATION TO MONTH - STAGE 2*/

/*SECTION 6 - STEP 01: INSERT FOR TRANSFER OUT VALUES*/

INSERT INTO CC_COBRA.WK_FR15_J07_TRANSACTION_T2
SELECT
 A.AGRMNT_ID
,A.PLAN_NO
,PM_BAL_CAT AS BALANC_TYPE_CD
,ADD_MONTHS(CAST(((A.REPORT_DT/100*100)+1) AS DATE),1)-1 AS PERIOD_END_DT
,2
/*PULL OPENING BAL FOR RECORDS WHERE THE PREV MONTH AND CURR MONTH CATEGORY DO NOT MATCH - AND PUT UNDER THE PREV MONTH CATEGORY*/
,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT <> PM_BAL_CAT THEN OPENNG_BL       
          ELSE 0 END) AS OPEN_BALANC_AM
/*NOT RELEVANT FOR THIS SECTION*/
,SUM(0) AS TRADE_XFRIN_AM
,SUM(0) AS TRADE_XFROUT_AM
,SUM(0) AS XFRIN_CHRDSP_AM
,SUM(0) AS XFRIN_RHRDSP_AM
,SUM(0) AS XFRIN_IHRDSP_AM
,SUM(0) AS XFRIN_BHRDSP_AM
,SUM(0) AS XFRIN_MHRDSP_AM
,SUM(0) AS XFRIN_PHRDSP_AM
,SUM(0) AS XFRIN_BXHDSP_AM
,SUM(0) AS XFRIN_MXHDSP_AM
,SUM(0) AS XFRIN_IXHDSP_AM
,SUM(0) AS XFRIN_ISTAT_AM
,SUM(0) AS XFRIN_CIMPRD_AM
,SUM(0) AS XFRIN_RIMPRD_AM
,SUM(0) AS XFRIN_IIMPRD_AM
,SUM(0) AS XFRIN_BIMPRD_AM
,SUM(0) AS XFRIN_MIMPRD_AM
,SUM(0) AS XFRIN_PIMPRD_AM
,SUM(0) AS XFRIN_BXIMPD_AM
,SUM(0) AS XFRIN_MXIMPD_AM
,SUM(0) AS XFRIN_IXIMPD_AM
,SUM(0) AS XFRIN_CIBB_AM
,SUM(0) AS XFRIN_RIBB_AM
,SUM(0) AS XFRIN_IIBB_AM
,SUM(0) AS XFRIN_IZIBB_AM
,SUM(0) AS XFRIN_BIBB_AM
,SUM(0) AS XFRIN_BZIBB_AM
,SUM(0) AS XFRIN_MIBB_AM
,SUM(0) AS XFRIN_MZIBB_AM
,SUM(0) AS XFRIN_PIBB_AM
,SUM(0) AS XFRIN_PZIBB_AM
,SUM(0) AS XFRIN_BXIBB_AM
,SUM(0) AS XFRIN_MXIBB_AM
,SUM(0) AS XFRIN_IXIBB_AM
,SUM(0) AS XFRIN_RNIBB_AM


,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'CHRDSP' AND PM_BAL_CAT <> 'CHRDSP' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_CHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'RHRDSP' AND PM_BAL_CAT <> 'RHRDSP' 
          THEN OPENNG_BL*-1
          ELSE 0 END) 
AS XFROUT_RHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'IHRDSP' AND PM_BAL_CAT <> 'IHRDSP' 
          THEN OPENNG_BL*-1
          ELSE 0 END) 
AS XFROUT_IHRDSP_AM
          
,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'BHRDSP' AND PM_BAL_CAT <> 'BHRDSP' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_BHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'MHRDSP' AND PM_BAL_CAT <> 'MHRDSP' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_MHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'PHRDSP' AND PM_BAL_CAT <> 'PHRDSP' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_PHRDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'BXHDSP' AND PM_BAL_CAT <> 'BXHDSP' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_BXHDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'MXHDSP' AND PM_BAL_CAT <> 'MXHDSP' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_MXHDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'IXHDSP' AND PM_BAL_CAT <> 'IXHDSP' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_IXHDSP_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'ISTAT' AND PM_BAL_CAT <> 'ISTAT' 
          THEN OPENNG_BL*-1 
          ELSE 0 END)
AS XFROUT_ISTAT_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'CIMPRD' AND PM_BAL_CAT <> 'CIMPRD' 
          THEN OPENNG_BL*-1 ELSE 0 END)
AS XFROUT_CIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'RIMPRD' AND PM_BAL_CAT <> 'RIMPRD' 
          THEN OPENNG_BL*-1 
          ELSE 0 END) 
AS XFROUT_RIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'IIMPRD' AND PM_BAL_CAT <> 'IIMPRD' 
          THEN OPENNG_BL*-1 
          ELSE 0 END) 
AS XFROUT_IIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'BIMPRD' AND PM_BAL_CAT <> 'BIMPRD' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_BIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'MIMPRD' AND PM_BAL_CAT <> 'MIMPRD' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_MIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'PIMPRD' AND PM_BAL_CAT <> 'PIMPRD' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_PIMPRD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'BXIMPD' AND PM_BAL_CAT <> 'BXIMPD' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_BXIMPD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'MXIMPD' AND PM_BAL_CAT <> 'MXIMPD' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_MXIMPD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'IXIMPD' AND PM_BAL_CAT <> 'IXIMPD' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_IXIMPD_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'CIBB' AND PM_BAL_CAT <> 'CIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_CIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'RIBB' AND PM_BAL_CAT <> 'RIBB' 
          THEN OPENNG_BL*-1
          ELSE 0 END) 
AS XFROUT_RIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'IIBB' AND PM_BAL_CAT <> 'IIBB' 
          THEN OPENNG_BL*-1
          ELSE 0 END) 
AS XFROUT_IIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'IZIBB' AND PM_BAL_CAT <> 'IZIBB' 
          THEN OPENNG_BL*-1
          ELSE 0 END) 
AS XFROUT_IZIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'BIBB' AND PM_BAL_CAT <> 'BIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_BIBB_AM   

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'BZIBB' AND PM_BAL_CAT <> 'BZIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_BZIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'MIBB' AND PM_BAL_CAT <> 'MIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_MIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'MZIBB' AND PM_BAL_CAT <> 'MZIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_MZIBB_AM

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'PIBB' AND PM_BAL_CAT <> 'PIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_PIBB_AM  

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'PZIBB' AND PM_BAL_CAT <> 'PZIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_PZIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'BXIBB' AND PM_BAL_CAT <> 'BXIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_BXIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'MXIBB' AND PM_BAL_CAT <> 'MXIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_MXIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'IXIBB' AND PM_BAL_CAT <> 'IXIBB' 
          THEN OPENNG_BL*-1 ELSE 0 END) 
AS XFROUT_IXIBB_AM 

,SUM(CASE WHEN A.REPORT_DT = DC.WD1 AND CM_BAL_CAT = 'RNIBB' AND PM_BAL_CAT <> 'RNIBB' 
          THEN OPENNG_BL*-1  
          ELSE 0 END) 
AS XFROUT_RNIBB_AM  

,SUM(0) AS RETAIL_A_UK_AM
,SUM(0) AS RETAIL_A_UK_CT
,SUM(0) AS RETAIL_M_UK_AM
,SUM(0) AS RETAIL_M_UK_CT
,SUM(0) AS RETAIL_V_UK_AM
,SUM(0) AS RETAIL_V_UK_CT
,SUM(0) AS RETAIL_A_FOREGN_AM
,SUM(0) AS RETAIL_A_FOREGN_CT
,SUM(0) AS RETAIL_M_FOREGN_AM
,SUM(0) AS RETAIL_M_FOREGN_CT
,SUM(0) AS RETAIL_V_FOREGN_AM
,SUM(0) AS RETAIL_V_FOREGN_CT
,SUM(0) AS CASH_A_UK_AM
,SUM(0) AS CASH_A_UK_CT
,SUM(0) AS CASH_M_UK_AM
,SUM(0) AS CASH_M_UK_CT
,SUM(0) AS CASH_V_UK_AM
,SUM(0) AS CASH_V_UK_CT
,SUM(0) AS CASH_A_FOREGN_AM
,SUM(0) AS CASH_A_FOREGN_CT
,SUM(0) AS CASH_M_FOREGN_AM
,SUM(0) AS CASH_M_FOREGN_CT
,SUM(0) AS CASH_V_FOREGN_AM
,SUM(0) AS CASH_V_FOREGN_CT
,SUM(0) AS BALANC_TRNSFR_AM
,SUM(0) AS BALANC_TRNSFR_CT
,SUM(0) AS MONEY_TRNSFR_AM
,SUM(0) AS MONEY_TRNSFR_CT
,SUM(0) AS PROMO_CHEQUE_AM
,SUM(0) AS PROMO_CHEQUE_CT
,SUM(0) AS CONVNC_CHEQUE_AM
,SUM(0) AS CONVNC_CHEQUE_CT
,SUM(0) AS INTRST_FEE_AM
,SUM(0) AS INTRST_FEE_REVRSL_AM
,SUM(0) AS PPI_FEE_AM
,SUM(0) AS PPI_FEE_REVRSL_AM
,SUM(0) AS BT_FEE_AM
,SUM(0) AS MT_FEE_AM
,SUM(0) AS LATE_FEE_AM
,SUM(0) AS LATE_FEE_REVRSL_AM
,SUM(0) AS OVRLMT_FEE_AM
,SUM(0) AS OVRLMT_FEE_REVRSL_AM
,SUM(0) AS RETPMT_FEE_AM
,SUM(0) AS RETPMT_FEE_REVRSL_AM
,SUM(0) AS MBRSHP_FEE_AM
,SUM(0) AS CSHADV_FEE_AM
,SUM(0) AS SNTNL_FEE_AM
,SUM(0) AS PVYGRD_FEE_AM
,SUM(0) AS FOREX_FEE_AM
,SUM(0) AS OTHER_FEE_AM
,SUM(0) AS BT_OUT_AM
,SUM(0) AS PAYMNT_MIN_AM
,SUM(0) AS PAYMNT_PRTFUL_AM
,SUM(0) AS CHARGE_OFF_AM
,SUM(0) AS ADJMNT_AM
,SUM(0) AS CSHBCK_AM
,SUM(0) AS TRNSFR_AM
,SUM(0) AS WRITE_OFF_AM
,SUM(0) AS FRAUD_AM
,SUM(0) AS UNCLFD_MOVMNT_AM
,SUM(0) AS CLOSNG_BL
,SUM(0) AS BT_OUT_CT

FROM CC_COBRA.WK_FR15_J06_TRANSACTION_T1 A
CROSS JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
WHERE CM_CAT||PM_CAT <> 'ZZ' 
GROUP BY 1,2,3,4,5 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR15_J07_TRANSACTION_T2 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 6 - STEP 02: INSERT FOR UNCLASSIFIED MOVEMENT*/


INSERT INTO CC_COBRA.WK_FR15_J07_TRANSACTION_T2
SELECT
 A.AGRMNT_ID
,A.PLAN_NO
,CM_BAL_CAT AS BALANC_TYPE_CD
,ADD_MONTHS(CAST(((A.REPORT_DT/100*100)+1) AS DATE),1)-1 AS PERIOD_END_DT
,3
,SUM(0) AS OPEN_BALANC_AM
,SUM(0) AS TRADE_XFRIN_AM
,SUM(0) AS TRADE_XFROUT_AM

,SUM(0) AS XFRIN_CHRDSP_AM
,SUM(0) AS XFRIN_RHRDSP_AM
,SUM(0) AS XFRIN_IHRDSP_AM
,SUM(0) AS XFRIN_BHRDSP_AM
,SUM(0) AS XFRIN_MHRDSP_AM
,SUM(0) AS XFRIN_PHRDSP_AM
,SUM(0) AS XFRIN_BXHDSP_AM
,SUM(0) AS XFRIN_MXHDSP_AM
,SUM(0) AS XFRIN_IXHDSP_AM
,SUM(0) AS XFRIN_ISTAT_AM
,SUM(0) AS XFRIN_CIMPRD_AM
,SUM(0) AS XFRIN_RIMPRD_AM
,SUM(0) AS XFRIN_IIMPRD_AM
,SUM(0) AS XFRIN_BIMPRD_AM
,SUM(0) AS XFRIN_MIMPRD_AM
,SUM(0) AS XFRIN_PIMPRD_AM
,SUM(0) AS XFRIN_BXIMPD_AM
,SUM(0) AS XFRIN_MXIMPD_AM
,SUM(0) AS XFRIN_IXIMPD_AM
,SUM(0) AS XFRIN_CIBB_AM
,SUM(0) AS XFRIN_RIBB_AM
,SUM(0) AS XFRIN_IIBB_AM
,SUM(0) AS XFRIN_IZIBB_AM
,SUM(0) AS XFRIN_BIBB_AM
,SUM(0) AS XFRIN_BZIBB_AM
,SUM(0) AS XFRIN_MIBB_AM
,SUM(0) AS XFRIN_MZIBB_AM
,SUM(0) AS XFRIN_PIBB_AM
,SUM(0) AS XFRIN_PZIBB_AM
,SUM(0) AS XFRIN_BXIBB_AM
,SUM(0) AS XFRIN_MXIBB_AM
,SUM(0) AS XFRIN_IXIBB_AM
,SUM(0) AS XFRIN_RNIBB_AM

,SUM(0) AS XFROUT_CHRDSP_AM
,SUM(0) AS XFROUT_RHRDSP_AM
,SUM(0) AS XFROUT_IHRDSP_AM
,SUM(0) AS XFROUT_BHRDSP_AM
,SUM(0) AS XFROUT_MHRDSP_AM
,SUM(0) AS XFROUT_PHRDSP_AM
,SUM(0) AS XFROUT_BXHDSP_AM
,SUM(0) AS XFROUT_MXHDSP_AM
,SUM(0) AS XFROUT_IXHDSP_AM
,SUM(0) AS XFROUT_ISTAT_AM
,SUM(0) AS XFROUT_CIMPRD_AM
,SUM(0) AS XFROUT_RIMPRD_AM
,SUM(0) AS XFROUT_IIMPRD_AM
,SUM(0) AS XFROUT_BIMPRD_AM
,SUM(0) AS XFROUT_MIMPRD_AM
,SUM(0) AS XFROUT_PIMPRD_AM
,SUM(0) AS XFROUT_BXIMPD_AM
,SUM(0) AS XFROUT_MXIMPD_AM
,SUM(0) AS XFROUT_IXIMPD_AM
,SUM(0) AS XFROUT_CIBB_AM
,SUM(0) AS XFROUT_RIBB_AM
,SUM(0) AS XFROUT_IIBB_AM
,SUM(0) AS XFROUT_IZIBB_AM
,SUM(0) AS XFROUT_BIBB_AM
,SUM(0) AS XFROUT_BZIBB_AM
,SUM(0) AS XFROUT_MIBB_AM
,SUM(0) AS XFROUT_MZIBB_AM
,SUM(0) AS XFROUT_PIBB_AM
,SUM(0) AS XFROUT_PZIBB_AM
,SUM(0) AS XFROUT_BXIBB_AM
,SUM(0) AS XFROUT_MXIBB_AM
,SUM(0) AS XFROUT_IXIBB_AM
,SUM(0) AS XFROUT_RNIBB_AM

,SUM(0) AS RETAIL_A_UK_AM
,SUM(0) AS RETAIL_A_UK_CT
,SUM(0) AS RETAIL_M_UK_AM
,SUM(0) AS RETAIL_M_UK_CT
,SUM(0) AS RETAIL_V_UK_AM
,SUM(0) AS RETAIL_V_UK_CT
,SUM(0) AS RETAIL_A_FOREGN_AM
,SUM(0) AS RETAIL_A_FOREGN_CT
,SUM(0) AS RETAIL_M_FOREGN_AM
,SUM(0) AS RETAIL_M_FOREGN_CT
,SUM(0) AS RETAIL_V_FOREGN_AM
,SUM(0) AS RETAIL_V_FOREGN_CT
,SUM(0) AS CASH_A_UK_AM
,SUM(0) AS CASH_A_UK_CT
,SUM(0) AS CASH_M_UK_AM
,SUM(0) AS CASH_M_UK_CT
,SUM(0) AS CASH_V_UK_AM
,SUM(0) AS CASH_V_UK_CT
,SUM(0) AS CASH_A_FOREGN_AM
,SUM(0) AS CASH_A_FOREGN_CT
,SUM(0) AS CASH_M_FOREGN_AM
,SUM(0) AS CASH_M_FOREGN_CT
,SUM(0) AS CASH_V_FOREGN_AM
,SUM(0) AS CASH_V_FOREGN_CT
,SUM(0) AS BALANC_TRNSFR_AM
,SUM(0) AS BALANC_TRNSFR_CT
,SUM(0) AS MONEY_TRNSFR_AM
,SUM(0) AS MONEY_TRNSFR_CT
,SUM(0) AS PROMO_CHEQUE_AM
,SUM(0) AS PROMO_CHEQUE_CT
,SUM(0) AS CONVNC_CHEQUE_AM
,SUM(0) AS CONVNC_CHEQUE_CT
,SUM(0) AS INTRST_FEE_AM
,SUM(0) AS INTRST_FEE_REVRSL_AM
,SUM(0) AS PPI_FEE_AM
,SUM(0) AS PPI_FEE_REVRSL_AM
,SUM(0) AS BT_FEE_AM
,SUM(0) AS MT_FEE_AM
,SUM(0) AS LATE_FEE_AM
,SUM(0) AS LATE_FEE_REVRSL_AM
,SUM(0) AS OVRLMT_FEE_AM
,SUM(0) AS OVRLMT_FEE_REVRSL_AM
,SUM(0) AS RETPMT_FEE_AM
,SUM(0) AS RETPMT_FEE_REVRSL_AM
,SUM(0) AS MBRSHP_FEE_AM
,SUM(0) AS CSHADV_FEE_AM
,SUM(0) AS SNTNL_FEE_AM
,SUM(0) AS PVYGRD_FEE_AM
,SUM(0) AS FOREX_FEE_AM
,SUM(0) AS OTHER_FEE_AM
,SUM(0) AS BT_OUT_AM
,SUM(0) AS PAYMNT_MIN_AM
,SUM(0) AS PAYMNT_PRTFUL_AM
,SUM(0) AS CHARGE_OFF_AM
,SUM(0) AS ADJMNT_AM
,SUM(0) AS CSHBCK_AM
,SUM(0) AS TRNSFR_AM
,SUM(0) AS WRITE_OFF_AM
,SUM(0) AS FRAUD_AM
,SUM(PLAN_OUT_AM) AS UNCLFD_MOVMNT_AM
,SUM(0) AS CLOSNG_BL
,SUM(0) AS BT_OUT_CT

FROM CC_COBRA.WK_FR15_J06_TRANSACTION_T1 A
JOIN CC_COBRA.WK_FR15_DATE_CONTROL DC
ON   A.REPORT_DT/100 = DC.REPORT_DT/100
AND  CM_CAT||PM_CAT <> 'ZZ' 
AND  PLAN_OUT_AM <> 0
GROUP BY 1,2,3,4,5 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 6 - STEP 03: UPDATE UNCLASSIFIED MOVEMENT FIELD WITH AMOUNT WHERE THE BW TYPE CODES ARE THE SAME - IT WILL CANCEL EACHOTHER OUT*/

UPDATE CC_COBRA.WK_FR15_J07_TRANSACTION_T2
FROM (
SELECT TA.AGRMNT_ID
      ,TA.PLAN_NO_OUT AS PLAN_NO
      ,TA.PLAN_OUT_BW_CD
      ,SUM(TA.PLAN_OUT_AM) AS PLAN_OUT_AM

FROM  CC_COBRA.WK_FR15_PLAN_IN_OUT TA
WHERE   TA.PLAN_IN_BW_CD = TA.PLAN_OUT_BW_CD
GROUP BY 1,2,3
) T1
SET UNCLFD_MOVMNT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.UNCLFD_MOVMNT_AM-T1.PLAN_OUT_AM
WHERE CC_COBRA.WK_FR15_J07_TRANSACTION_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.PLAN_NO = T1.PLAN_NO
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.BALANC_TYPE_CD = T1.PLAN_OUT_BW_CD
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.INSERT_STEP = 3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 6 - STEP 04: UNALLOCATED MOVEMENT FIELD IN RECORDS WHERE CROSS BALANCE TYPES*/

UPDATE CC_COBRA.WK_FR15_J07_TRANSACTION_T2
FROM (
SELECT TA.AGRMNT_ID
      ,TA.PLAN_NO_OUT AS PLAN_NO
      ,TA.PLAN_OUT_BW_CD
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'CHRDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_CHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'RHRDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_RHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'IHRDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_IHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'BHRDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_BHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'MHRDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_MHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'PHRDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_PHRDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'BXHDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_BXHDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'MXHDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_MXHDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'IXHDSP' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_IXHDSP_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'ISTAT'  THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_ISTAT_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'CIMPRD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_CIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'RIMPRD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_RIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'IIMPRD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_IIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'BIMPRD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_BIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'MIMPRD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_MIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'PIMPRD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_PIMPRD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'BXIMPD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_BXIMPD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'MXIMPD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_MXIMPD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'IXIMPD' THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_IXIMPD_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'CIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_CIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'RIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_RIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'IIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_IIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'IZIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_IZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'BIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_BIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'BZIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_BZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'MIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_MIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'MZIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_MZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'PIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_PIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'PZIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_PZIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'BXIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_BXIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'MXIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_MXIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'IXIBB'   THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_IXIBB_AM
      ,SUM(CASE WHEN TA.PLAN_IN_BW_CD = 'RNIBB'  THEN PLAN_OUT_AM ELSE 0 END) AS XFROUT_RNIBB_AM  

FROM  CC_COBRA.WK_FR15_PLAN_IN_OUT TA
WHERE   TA.PLAN_IN_BW_CD <> TA.PLAN_OUT_BW_CD
GROUP BY 1,2,3
) T1
SET XFROUT_CHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_CHRDSP_AM+ZEROIFNULL(T1.XFROUT_CHRDSP_AM)
   ,XFROUT_RHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RHRDSP_AM+ZEROIFNULL(T1.XFROUT_RHRDSP_AM)
   ,XFROUT_IHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IHRDSP_AM+ZEROIFNULL(T1.XFROUT_IHRDSP_AM)
   ,XFROUT_BHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BHRDSP_AM+ZEROIFNULL(T1.XFROUT_BHRDSP_AM)
   ,XFROUT_MHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MHRDSP_AM+ZEROIFNULL(T1.XFROUT_MHRDSP_AM)
   ,XFROUT_PHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PHRDSP_AM+ZEROIFNULL(T1.XFROUT_PHRDSP_AM)
   ,XFROUT_BXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BXHDSP_AM+ZEROIFNULL(T1.XFROUT_BXHDSP_AM)
   ,XFROUT_MXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MXHDSP_AM+ZEROIFNULL(T1.XFROUT_MXHDSP_AM)
   ,XFROUT_IXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IXHDSP_AM+ZEROIFNULL(T1.XFROUT_IXHDSP_AM)
   ,XFROUT_ISTAT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_ISTAT_AM+ZEROIFNULL(T1.XFROUT_ISTAT_AM)
   ,XFROUT_CIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_CIMPRD_AM+ZEROIFNULL(T1.XFROUT_CIMPRD_AM)
   ,XFROUT_RIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RIMPRD_AM+ZEROIFNULL(T1.XFROUT_RIMPRD_AM)
   ,XFROUT_IIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IIMPRD_AM+ZEROIFNULL(T1.XFROUT_IIMPRD_AM)
   ,XFROUT_BIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BIMPRD_AM+ZEROIFNULL(T1.XFROUT_BIMPRD_AM)
   ,XFROUT_MIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MIMPRD_AM+ZEROIFNULL(T1.XFROUT_MIMPRD_AM)
   ,XFROUT_PIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PIMPRD_AM+ZEROIFNULL(T1.XFROUT_PIMPRD_AM)
   ,XFROUT_BXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BXIMPD_AM+ZEROIFNULL(T1.XFROUT_BXIMPD_AM)
   ,XFROUT_MXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MXIMPD_AM+ZEROIFNULL(T1.XFROUT_MXIMPD_AM)
   ,XFROUT_IXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IXIMPD_AM+ZEROIFNULL(T1.XFROUT_IXIMPD_AM)
   ,XFROUT_CIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_CIBB_AM+ZEROIFNULL(T1.XFROUT_CIBB_AM)
   ,XFROUT_RIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RIBB_AM+ZEROIFNULL(T1.XFROUT_RIBB_AM)
   ,XFROUT_IIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IIBB_AM+ZEROIFNULL(T1.XFROUT_IIBB_AM)
   ,XFROUT_IZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IZIBB_AM+ZEROIFNULL(T1.XFROUT_IZIBB_AM)
   ,XFROUT_BIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BIBB_AM+ZEROIFNULL(T1.XFROUT_BIBB_AM)
   ,XFROUT_BZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BZIBB_AM+ZEROIFNULL(T1.XFROUT_BZIBB_AM)
   ,XFROUT_MIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MIBB_AM+ZEROIFNULL(T1.XFROUT_MIBB_AM)
   ,XFROUT_MZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MZIBB_AM+ZEROIFNULL(T1.XFROUT_MZIBB_AM)
   ,XFROUT_PIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PIBB_AM+ZEROIFNULL(T1.XFROUT_PIBB_AM)
   ,XFROUT_PZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PZIBB_AM+ZEROIFNULL(T1.XFROUT_PZIBB_AM)
   ,XFROUT_BXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BXIBB_AM+ZEROIFNULL(T1.XFROUT_BXIBB_AM)
   ,XFROUT_MXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MXIBB_AM+ZEROIFNULL(T1.XFROUT_MXIBB_AM)
   ,XFROUT_IXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IXIBB_AM+ZEROIFNULL(T1.XFROUT_IXIBB_AM)
   ,XFROUT_RNIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RNIBB_AM+ZEROIFNULL(T1.XFROUT_RNIBB_AM)
   
   ,UNCLFD_MOVMNT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.UNCLFD_MOVMNT_AM
   					   -T1.XFROUT_CHRDSP_AM
   					   -T1.XFROUT_RHRDSP_AM
                       -T1.XFROUT_IHRDSP_AM
   					   -T1.XFROUT_BHRDSP_AM
                       -T1.XFROUT_MHRDSP_AM
   					   -T1.XFROUT_PHRDSP_AM
                       -T1.XFROUT_BXHDSP_AM
                       -T1.XFROUT_MXHDSP_AM
                       -T1.XFROUT_IXHDSP_AM
   					   -T1.XFROUT_ISTAT_AM
   					   -T1.XFROUT_CIMPRD_AM
   					   -T1.XFROUT_RIMPRD_AM
                       -T1.XFROUT_IIMPRD_AM
   					   -T1.XFROUT_BIMPRD_AM
                       -T1.XFROUT_MIMPRD_AM
   					   -T1.XFROUT_PIMPRD_AM
                       -T1.XFROUT_BXIMPD_AM
                       -T1.XFROUT_MXIMPD_AM
                       -T1.XFROUT_IXIMPD_AM
   					   -T1.XFROUT_CIBB_AM
   					   -T1.XFROUT_RIBB_AM
                       -T1.XFROUT_IIBB_AM
                       -T1.XFROUT_IZIBB_AM
   					   -T1.XFROUT_BIBB_AM
                       -T1.XFROUT_BZIBB_AM
                       -T1.XFROUT_MIBB_AM
                       -T1.XFROUT_MZIBB_AM
   					   -T1.XFROUT_PIBB_AM
                       -T1.XFROUT_PZIBB_AM
                       -T1.XFROUT_BXIBB_AM
                       -T1.XFROUT_MXIBB_AM
                       -T1.XFROUT_IXIBB_AM
   					   -T1.XFROUT_RNIBB_AM
WHERE CC_COBRA.WK_FR15_J07_TRANSACTION_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.PLAN_NO = T1.PLAN_NO
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.BALANC_TYPE_CD = T1.PLAN_OUT_BW_CD
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.INSERT_STEP = 3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 6 - STEP 05: FIX FOR MOVEMENTS FOR PLANS THAT COME OFF OF PROMO RATES BUT DON'T MOVE PLAN_NO - OUT MOVEMENTS*/

UPDATE CC_COBRA.WK_FR15_J07_TRANSACTION_T2
FROM (
SELECT 
A.AGRMNT_ID
,A.PLAN_NO
,B.BALANC_TYPE_CD
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'CHRDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_CHRDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'RHRDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_RHRDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'IHRDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_IHRDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'BHRDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_BHRDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'MHRDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_MHRDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'PHRDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_PHRDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'BXHDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_BXHDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'MXHDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_MXHDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'IXHDSP' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_IXHDSP_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'ISTAT'  THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_ISTAT_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'CIMPRD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_CIMPRD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'RIMPRD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_RIMPRD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'IIMPRD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_IIMPRD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'BIMPRD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_BIMPRD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'MIMPRD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_MIMPRD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'PIMPRD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_PIMPRD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'BXIMPD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_BXIMPD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'MXIMPD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_MXIMPD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'IXIMPD' THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_IXIMPD_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'CIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_CIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'RIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_RIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'IIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_IIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'IZIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_IZIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'BIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_BIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'BZIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_BZIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'MIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_MIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'MZIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_MZIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'PIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_PIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'PZIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_PZIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'BXIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_BXIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'MXIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_MXIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'IXIBB'   THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_IXIBB_AM
,SUM(CASE WHEN A.BALANC_TYPE_CD = 'RNIBB'  THEN T1.OPENNG_BL*-1 ELSE 0 END) AS XFROUT_RNIBB_AM
FROM CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP A
JOIN CC_COBRA.WK_FR15_DATE_CONTROL D
ON   A.SOURCE_START_DT/100 = D.REPORT_DT/100 
AND  EXTRACT(DAY FROM A.SOURCE_START_DT) <> 1
JOIN CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.PLAN_NO = B.PLAN_NO
AND  A.SOURCE_START_DT = B.SOURCE_END_DT
JOIN CC_COBRA.WK_FR15_J06_TRANSACTION_T1 T1
ON   A.AGRMNT_ID = T1.AGRMNT_ID
AND  A.PLAN_NO = T1.PLAN_NO
AND  A.SOURCE_START_DT = T1.REPORT_DT 
AND  T1.OPENNG_BL <> 0 --BALANCE ON ACTUAL DAY IN MONTH - NOT JUST FIRST DAY OF MONTH
GROUP BY 1,2,3 ) T1
SET XFROUT_CHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_CHRDSP_AM+T1.XFROUT_CHRDSP_AM
   ,XFROUT_RHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RHRDSP_AM+T1.XFROUT_RHRDSP_AM
   ,XFROUT_IHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IHRDSP_AM+T1.XFROUT_IHRDSP_AM
   ,XFROUT_BHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BHRDSP_AM+T1.XFROUT_BHRDSP_AM
   ,XFROUT_MHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MHRDSP_AM+T1.XFROUT_MHRDSP_AM
   ,XFROUT_PHRDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PHRDSP_AM+T1.XFROUT_PHRDSP_AM
   ,XFROUT_BXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BXHDSP_AM+T1.XFROUT_BXHDSP_AM
   ,XFROUT_MXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MXHDSP_AM+T1.XFROUT_MXHDSP_AM
   ,XFROUT_IXHDSP_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IXHDSP_AM+T1.XFROUT_IXHDSP_AM
   ,XFROUT_ISTAT_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_ISTAT_AM+T1.XFROUT_ISTAT_AM
   ,XFROUT_CIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_CIMPRD_AM+T1.XFROUT_CIMPRD_AM
   ,XFROUT_RIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RIMPRD_AM+T1.XFROUT_RIMPRD_AM
   ,XFROUT_IIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IIMPRD_AM+T1.XFROUT_IIMPRD_AM
   ,XFROUT_BIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BIMPRD_AM+T1.XFROUT_BIMPRD_AM
   ,XFROUT_MIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MIMPRD_AM+T1.XFROUT_MIMPRD_AM
   ,XFROUT_PIMPRD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PIMPRD_AM+T1.XFROUT_PIMPRD_AM
   ,XFROUT_BXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BXIMPD_AM+T1.XFROUT_BXIMPD_AM
   ,XFROUT_MXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MXIMPD_AM+T1.XFROUT_MXIMPD_AM
   ,XFROUT_IXIMPD_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IXIMPD_AM+T1.XFROUT_IXIMPD_AM
   ,XFROUT_CIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_CIBB_AM+T1.XFROUT_CIBB_AM
   ,XFROUT_RIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RIBB_AM+T1.XFROUT_RIBB_AM
   ,XFROUT_IIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IIBB_AM+T1.XFROUT_IIBB_AM
   ,XFROUT_IZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IZIBB_AM+T1.XFROUT_IZIBB_AM
   ,XFROUT_BIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BIBB_AM+T1.XFROUT_BIBB_AM
   ,XFROUT_BZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BZIBB_AM+T1.XFROUT_BZIBB_AM
   ,XFROUT_MIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MIBB_AM+T1.XFROUT_MIBB_AM
   ,XFROUT_MZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MZIBB_AM+T1.XFROUT_MZIBB_AM
   ,XFROUT_PIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PIBB_AM+T1.XFROUT_PIBB_AM
   ,XFROUT_PZIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_PZIBB_AM+T1.XFROUT_PZIBB_AM
   ,XFROUT_BXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_BXIBB_AM+T1.XFROUT_BXIBB_AM
   ,XFROUT_MXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_MXIBB_AM+T1.XFROUT_MXIBB_AM
   ,XFROUT_IXIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_IXIBB_AM+T1.XFROUT_IXIBB_AM
   ,XFROUT_RNIBB_AM = CC_COBRA.WK_FR15_J07_TRANSACTION_T2.XFROUT_RNIBB_AM+T1.XFROUT_RNIBB_AM
WHERE CC_COBRA.WK_FR15_J07_TRANSACTION_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.PLAN_NO = T1.PLAN_NO
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.BALANC_TYPE_CD = T1.BALANC_TYPE_CD
AND   CC_COBRA.WK_FR15_J07_TRANSACTION_T2.INSERT_STEP = 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 7 - INSERT INTO FINAL TABLE*/

/*SECTION 7 - STEP 01: FINAL INSERT INTO MONTHLY STORAGE TABLE*/

DELETE FROM CC_COBRA.FR15_AGREEMENT_BALANCE_WALK 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND PERIOD_END_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.FR14_TRANSACTIONS_PM GROUP BY 1);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_AGREEMENT_BALANCE_WALK
SELECT 
 AGRMNT_ID
,PLAN_NO
,BALANC_TYPE_CD
,PERIOD_END_DT
,MIN(INSERT_STEP)
,SUM(OPEN_BALANC_AM)
,SUM(TRADE_XFRIN_AM)
,SUM(TRADE_XFROUT_AM)

,SUM(XFRIN_CHRDSP_AM)
,SUM(XFRIN_RHRDSP_AM)
,SUM(XFRIN_IHRDSP_AM)
,SUM(XFRIN_BHRDSP_AM)
,SUM(XFRIN_MHRDSP_AM)
,SUM(XFRIN_PHRDSP_AM)
,SUM(XFRIN_BXHDSP_AM)
,SUM(XFRIN_MXHDSP_AM)
,SUM(XFRIN_IXHDSP_AM)
,SUM(XFRIN_ISTAT_AM)
,SUM(XFRIN_CIMPRD_AM)
,SUM(XFRIN_RIMPRD_AM)
,SUM(XFRIN_IIMPRD_AM)
,SUM(XFRIN_BIMPRD_AM)
,SUM(XFRIN_MIMPRD_AM)
,SUM(XFRIN_PIMPRD_AM)
,SUM(XFRIN_BXIMPD_AM)
,SUM(XFRIN_MXIMPD_AM)
,SUM(XFRIN_IXIMPD_AM)
,SUM(XFRIN_CIBB_AM)
,SUM(XFRIN_RIBB_AM)
,SUM(XFRIN_IIBB_AM)
,SUM(XFRIN_IZIBB_AM)
,SUM(XFRIN_BIBB_AM)
,SUM(XFRIN_BZIBB_AM)
,SUM(XFRIN_MIBB_AM)
,SUM(XFRIN_MZIBB_AM)
,SUM(XFRIN_PIBB_AM)
,SUM(XFRIN_PZIBB_AM)
,SUM(XFRIN_BXIBB_AM)
,SUM(XFRIN_MXIBB_AM)
,SUM(XFRIN_IXIBB_AM)
,SUM(XFRIN_RNIBB_AM)
,SUM(XFROUT_CHRDSP_AM)
,SUM(XFROUT_RHRDSP_AM)
,SUM(XFROUT_IHRDSP_AM)
,SUM(XFROUT_BHRDSP_AM)
,SUM(XFROUT_MHRDSP_AM)
,SUM(XFROUT_PHRDSP_AM)
,SUM(XFROUT_BXHDSP_AM)
,SUM(XFROUT_MXHDSP_AM)
,SUM(XFROUT_IXHDSP_AM)
,SUM(XFROUT_ISTAT_AM)
,SUM(XFROUT_CIMPRD_AM)
,SUM(XFROUT_RIMPRD_AM)
,SUM(XFROUT_IIMPRD_AM)
,SUM(XFROUT_BIMPRD_AM)
,SUM(XFROUT_MIMPRD_AM)
,SUM(XFROUT_PIMPRD_AM)
,SUM(XFROUT_BXIMPD_AM)
,SUM(XFROUT_MXIMPD_AM)
,SUM(XFROUT_IXIMPD_AM)
,SUM(XFROUT_CIBB_AM)
,SUM(XFROUT_RIBB_AM)
,SUM(XFROUT_IIBB_AM)
,SUM(XFROUT_IZIBB_AM)
,SUM(XFROUT_BIBB_AM)
,SUM(XFROUT_BZIBB_AM)
,SUM(XFROUT_MIBB_AM)
,SUM(XFROUT_MZIBB_AM)
,SUM(XFROUT_PIBB_AM)
,SUM(XFROUT_PZIBB_AM)
,SUM(XFROUT_BXIBB_AM)
,SUM(XFROUT_MXIBB_AM)
,SUM(XFROUT_IXIBB_AM)
,SUM(XFROUT_RNIBB_AM)

,SUM(RETAIL_A_UK_AM) 
,SUM(RETAIL_A_UK_CT) 
,SUM(RETAIL_M_UK_AM)
,SUM(RETAIL_M_UK_CT) 
,SUM(RETAIL_V_UK_AM) 
,SUM(RETAIL_V_UK_CT) 
,SUM(RETAIL_A_FOREGN_AM)
,SUM(RETAIL_A_FOREGN_CT)
,SUM(RETAIL_M_FOREGN_AM) 
,SUM(RETAIL_M_FOREGN_CT)
,SUM(RETAIL_V_FOREGN_AM) 
,SUM(RETAIL_V_FOREGN_CT)
,SUM(CASH_A_UK_AM) 
,SUM(CASH_A_UK_CT)
,SUM(CASH_M_UK_AM) 
,SUM(CASH_M_UK_CT)
,SUM(CASH_V_UK_AM)
,SUM(CASH_V_UK_CT) 
,SUM(CASH_A_FOREGN_AM) 
,SUM(CASH_A_FOREGN_CT) 
,SUM(CASH_M_FOREGN_AM) 
,SUM(CASH_M_FOREGN_CT) 
,SUM(CASH_V_FOREGN_AM) 
,SUM(CASH_V_FOREGN_CT)
,SUM(BALANC_TRNSFR_AM) 
,SUM(BALANC_TRNSFR_CT)
,SUM(MONEY_TRNSFR_AM) 
,SUM(MONEY_TRNSFR_CT)
,SUM(PROMO_CHEQUE_AM)
,SUM(PROMO_CHEQUE_CT) 
,SUM(CONVNC_CHEQUE_AM) 
,SUM(CONVNC_CHEQUE_CT)
,SUM(INTRST_FEE_AM) 
,SUM(INTRST_FEE_REVRSL_AM) 
,SUM(PPI_FEE_AM)
,SUM(PPI_FEE_REVRSL_AM) 
,SUM(BT_FEE_AM)
,SUM(MT_FEE_AM)
,SUM(LATE_FEE_AM)
,SUM(LATE_FEE_REVRSL_AM)
,SUM(OVRLMT_FEE_AM)
,SUM(OVRLMT_FEE_REVRSL_AM)
,SUM(RETPMT_FEE_AM)
,SUM(RETPMT_FEE_REVRSL_AM)
,SUM(MBRSHP_FEE_AM)
,SUM(CSHADV_FEE_AM)
,SUM(SNTNL_FEE_AM)
,SUM(PVYGRD_FEE_AM)
,SUM(FOREX_FEE_AM)
,SUM(OTHER_FEE_AM)
,SUM(BT_OUT_AM)
,SUM(PAYMNT_MIN_AM)
,SUM(PAYMNT_PRTFUL_AM)
,SUM(CHARGE_OFF_AM)
,SUM(ADJMNT_AM)
,SUM(CSHBCK_AM)
,SUM(TRNSFR_AM)
,SUM(WRITE_OFF_AM)
,SUM(FRAUD_AM)
,SUM(UNCLFD_MOVMNT_AM)
,SUM(CLOSE_BALANC_AM)
,SUM(BT_OUT_CT)
FROM CC_COBRA.WK_FR15_J07_TRANSACTION_T2
GROUP BY 1,2,3,4;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AGREEMENT_BALANCE_WALK INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AGREEMENT_BALANCE_WALK COLUMN(PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AGREEMENT_BALANCE_WALK COLUMN(PERIOD_END_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - INSERT INTO AVERAGE BALANCE TABLE*/

/*SECTION 8 - STEP 01: GET THE DATES THAT NEED TO BE SPREAD ACROSS THE WEEKENDS*/

DELETE FROM CC_COBRA.FR15_AVG_BAL_DATES ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_AVG_BAL_DATES
SELECT CALENDAR_DATE AS CAL_DAY
, CASE WHEN DAY_OF_WEEK = 1 THEN CALENDAR_DATE - 2
       WHEN DAY_OF_WEEK = 7 THEN CALENDAR_DATE - 1 
       ELSE CALENDAR_DATE 
  END AS REPORT_DT
FROM SYS_CALENDAR.CALENDAR 
WHERE CALENDAR_DATE/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR15_AVG_BAL_DATES INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - STEP 02: IN THE CASE OF REPROCESSING MAKE SURE ONLY THE DATES FOR THE CORRECT MONTH OF PROCESSING ARE IN THE TABLE*/

DELETE FROM CC_COBRA.FR14_TRANSACTIONS_PM WHERE REPORT_DT/100 <> (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - STEP 03: GET THE DATES FROM THE PRIOR _PM_BKUP TABLE THAT NEED TO BE USED FOR THE BEGINNING OF THE MONTH BEING PROCESSED*/

INSERT INTO CC_COBRA.FR14_TRANSACTIONS_PM
SELECT *
FROM CC_COBRA.FR14_TRANSACTIONS_PM_BKUP A
WHERE  EXISTS (
SELECT NULL 
FROM CC_COBRA.FR15_AVG_BAL_DATES B
WHERE A.REPORT_DT = B.CAL_DAY)
AND REPORT_DT/100 <> (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL);


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - STEP 04: CHECK THAT ALL THE DAYS REQUIRED EXIST - OTHERWISE FAIL*/

SELECT REPORT_DT FROM CC_COBRA.FR14_TRANSACTIONS_PM GROUP BY 1
MINUS
SELECT CAL_DAY FROM CC_COBRA.FR15_AVG_BAL_DATES GROUP BY 1;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO FOUNDERROR;

SELECT CAL_DAY FROM CC_COBRA.FR15_AVG_BAL_DATES GROUP BY 1
MINUS
SELECT REPORT_DT FROM CC_COBRA.FR14_TRANSACTIONS_PM GROUP BY 1;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - STEP 05: POPULATE AVERAGE BALANCE*/

DELETE FROM CC_COBRA.FR15_AVERAGE_BALANCE 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR15_AVERAGE_BALANCE
SELECT 
AGRMNT_ID
,PLAN_NO
,BALANC_TYPE_CD
,D.REPORT_DT
,CAST(TOTAL_BAL/D.DAYS_IN_MONTH AS DECIMAL(9,2))
FROM (
SELECT 
A.AGRMNT_ID
,A.PLAN_NO
,L.BALANC_TYPE_CD
,SUM(A.CLOSNG_BL) AS TOTAL_BAL
FROM   CC_COBRA.FR14_TRANSACTIONS_PM A
JOIN   CC_COBRA.FR15_AVG_BAL_DATES B
ON     A.REPORT_DT = B.CAL_DAY
JOIN   CC_COBRA.FR15_AGRMNT_PLAN_TYPE_LOOKUP L
ON     A.AGRMNT_ID = L.AGRMNT_ID
AND    A.PLAN_NO = L.PLAN_NO
AND    B.REPORT_DT BETWEEN L.SOURCE_START_DT AND L.SOURCE_END_DT-1
GROUP BY 1,2,3
)T1
CROSS JOIN  CC_COBRA.WK_FR15_DATE_CONTROL D
;   

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - STEP 06: CLEAR OUT DATA FROM PRIOR MONTH JUST USED FOR AVERAGE BALANCES*/

DELETE FROM CC_COBRA.FR14_TRANSACTIONS_PM WHERE REPORT_DT/100 <> (SELECT REPORT_DT/100 FROM CC_COBRA.WK_FR15_DATE_CONTROL);


/*SECTION 9 - STEP 01: CHECK FR15 DATA FOR ANY ERRORS AND FLAG THE VALIDATION TABLE*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR15V'
AND   A.RUN_STATUS = 'I'
;

SELECT TOP 2 * FROM CC_COBRA.FR15_AGREEMENT_BALANCE_WALK 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND BALANC_TYPE_CD = 'UPDPMB'
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO UPDPMBERR;


/*IF OK, THEN DELETE WORK TABLES NOT REQUIRED */

DELETE FROM CC_COBRA.WK_FR15_J06_TRANSACTION_T1 ALL;

DELETE FROM CC_COBRA.WK_FR15_J07_TRANSACTION_T2 ALL;


UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR15V'
;

.LABEL UPDPMBERR;

SELECT TOP 2 * FROM CC_COBRA.FR15_AGREEMENT_BALANCE_WALK 
WHERE PERIOD_END_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR15_DATE_CONTROL)
AND BALANC_TYPE_CD = 'UPDPMB'
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO UPDPMBOK;

/*IF NOT OK THEN FAIL FR15V*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR15V'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


.LABEL UPDPMBOK;

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR15'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR15';


.LABEL SKIPTOEND;

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR15D'
;


.LABEL JUSTEND;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR15D';

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR15'
;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR15D'
;

.QUIT 0;



