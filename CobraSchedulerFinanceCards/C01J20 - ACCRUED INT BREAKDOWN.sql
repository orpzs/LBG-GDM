/************************************************************************/
/*JOB:      C01J20 - ACCRUED INTEREST BREAKDOWN                         */
/*VERSION:  C01J20V07 REDUCE SAMPLE                                     */
/*DATE VERSION IMPLEMENTED: 2021-09-30                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J20                                                                */
/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;
   
DATABASE CC_COBRA;

/*STEP 00A: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*CHECK TO MAKE SURE C01J20 HAS COMPLETED*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*CHECK TO MAKE SURE C01J16 HAS COMPLETED*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J16';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J20';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'C01J20'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*UPDATE REPORT DATE*/

UPDATE CC_COBRA.WK_C01J20_REPORT_DATE
FROM 
(
SELECT B.REPORT_DT 
     , B.PRIOR_WORKDAY_DT
     , (B.REPORT_DT-EXTRACT(DAY FROM B.REPORT_DT)+1) AS REPORT_MTH
     , B.ACC_DAYS
     , CASE WHEN B.REPORT_DT/100 <> B.PRIOR_WORKDAY_DT/100 THEN 1 ELSE 0 END AS MONTH_START_FLAG  --WHEN MONTHS ARE DIFFERENT IT IS THE FIRST WORKDAY OF MONTH
     , CASE WHEN WORKDAYS_FROM_ME = 0 THEN 1 ELSE 0 END AS MONTH_END_FLAG
FROM CC_COBRA.CC_FD_CYCLE_REPORT_CALENDAR B
WHERE  B.REPORT_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
GROUP BY 1,2,3,4,5,6
) A
SET REPORT_DT = A.REPORT_DT
   ,PRIOR_REPORT_DT = A.PRIOR_WORKDAY_DT  
   ,REPORT_MTH = A.REPORT_MTH
   ,ACC_DAYS = A.ACC_DAYS
   ,MONTH_START_FLAG = A.MONTH_START_FLAG
   ,MONTH_END_FLAG = A.MONTH_END_FLAG
;       

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J20_REPORT_DATE INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J20_REPORT_DATE INDEX(REPORT_MTH);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

SELECT * FROM CC_COBRA.WK_C01J20_REPORT_DATE;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/**************************************/
/*TEMP CODE TO FIX INTEREST IN C01J16 */
/**************************************/


DELETE FROM CC_COBRA.WK_C01J16_L2SP_T1;

INSERT INTO CC_COBRA.WK_C01J16_L2SP_T1
SELECT B.AGRMNT_ID
     , A.FEATUR_ID
     , A.SOURCE_START_DT
     , YTD_INTRST_BILLED_AM

FROM   GDW_VIEWS.STATEMENT_FEATURE_SUMMARY A
JOIN   GDW_VIEWS.AGREEMENT_STATEMENT B
ON     A.STTMNT_DOCMNT_ID = B.STTMNT_DOCMNT_ID
AND    A.SOURCE_START_DT/10000 = (SELECT REPORT_DT/10000 FROM CC_COBRA.WK_C01J20_REPORT_DATE)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J16_L2SP_T1 INDEX (AGRMNT_ID);

/*SEQUENCE ALL THE STATEMENTS*/

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T2 ALL;

INSERT INTO CC_COBRA.WK_C01J16_L2SP_T2
SELECT 
AGRMNT_ID
,FEATUR_ID
,REPORT_DT
,YTD_INTRST_BILLED_AM 
,RANK () OVER (PARTITION BY AGRMNT_ID, FEATUR_ID ORDER BY REPORT_DT DESC) AS STTMNT_SEQ
FROM CC_COBRA.WK_C01J16_L2SP_T1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J16_L2SP_T2 INDEX (AGRMNT_ID);

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T1 ALL;


/*GET THE CHANGE IN THE YTD FIELD WHICH WILL EQUAL THE CURRENT STATEMENT INTEREST*/

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T3 ALL;

INSERT INTO CC_COBRA.WK_C01J16_L2SP_T3
SELECT 
A.AGRMNT_ID
,A.FEATUR_ID
,A.REPORT_DT
,A.YTD_INTRST_BILLED_AM - ZEROIFNULL(B.YTD_INTRST_BILLED_AM)
,A.STTMNT_SEQ
FROM CC_COBRA.WK_C01J16_L2SP_T2 A
LEFT JOIN CC_COBRA.WK_C01J16_L2SP_T2 B
ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.FEATUR_ID = B.FEATUR_ID
AND A.STTMNT_SEQ = B.STTMNT_SEQ-1 --GET PRIOR STATEMENT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J16_L2SP_T3 INDEX (AGRMNT_ID);

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T2 ALL;

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T4;

INSERT INTO CC_COBRA.WK_C01J16_L2SP_T4
SELECT 
T3.AGRMNT_ID
,T3.FEATUR_ID
,T3.REPORT_DT
,PN.AGRMNT_FEATUR_FEATUR_NO
,PS.AGRMNT_FEATUR_FEATUR_NO
,PNP.AGRMNT_FEATUR_FEATUR_NO
,PSP.AGRMNT_FEATUR_FEATUR_NO
,PN.EXPIRY_DT
,T3.CYC_INTRST_BILLED_AM
,T3.STTMNT_SEQ

FROM CC_COBRA.WK_C01J16_L2SP_T3 T3 
JOIN GDW_VIEWS.AGREEMENT_FEATURE_FEATURE PN
ON   T3.AGRMNT_ID = PN.AGRMNT_ID
AND  T3.FEATUR_ID = PN.FEATUR_ID
AND  PN.RELATD_FEATUR_ID = 5018 --PLAN_NO
AND  T3.REPORT_DT BETWEEN PN.SOURCE_START_DT AND PN.SOURCE_END_DT-1 
JOIN GDW_VIEWS.AGREEMENT_FEATURE_FEATURE PS
ON   T3.AGRMNT_ID = PS.AGRMNT_ID
AND  T3.FEATUR_ID = PS.FEATUR_ID
AND  PS.RELATD_FEATUR_ID = 5014 --PLAN_SEQ
AND  T3.REPORT_DT BETWEEN PS.SOURCE_START_DT AND PS.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWS.AGREEMENT_FEATURE_FEATURE PNP
ON   T3.AGRMNT_ID = PNP.AGRMNT_ID
AND  T3.FEATUR_ID = PNP.FEATUR_ID
AND  PNP.RELATD_FEATUR_ID = 5018 --PLAN_NO - PRIOR DAY
AND  T3.REPORT_DT-1 BETWEEN PNP.SOURCE_START_DT AND PNP.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWS.AGREEMENT_FEATURE_FEATURE PSP
ON   T3.AGRMNT_ID = PSP.AGRMNT_ID
AND  T3.FEATUR_ID = PSP.FEATUR_ID
AND  PSP.RELATD_FEATUR_ID = 5014 --PLAN_SEQ - PRIOR DAY
AND  T3.REPORT_DT-1 BETWEEN PSP.SOURCE_START_DT AND PSP.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J16_L2SP_T4 INDEX (AGRMNT_ID);

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T3 ALL;

/*GET ALL INTEREST TRANSACTIONS*/

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T5 ALL;

/*GET ALL THE INTEREST TXNS*/

INSERT INTO CC_COBRA.WK_C01J16_L2SP_T5
SELECT 
B.AGRMNT_ID
,A.EVENT_ID
,B.SOURCE_START_DT
,A.PLAN_NO
,A.PLAN_SEQ
,B.EVENT_AM
,B.EVENT_ACTVTY_CD
FROM CC_COBRA.CC_EVENT_FEATURE_ID A
JOIN GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST B
ON   A.EVENT_ID = B.EVENT_ID
AND  B.EVENT_ACTVTY_CD IN (SELECT EVENT_ACTVTY_CD FROM CC_COBRA.TRNSCN_DERVTN_GROUPS WHERE TRNSCN_DERVTN_GRP = 'INTEREST')
AND  B.SOURCE_START_DT/10000 = (SELECT REPORT_DT/10000 FROM CC_COBRA.WK_C01J20_REPORT_DATE)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*GET ALL THE UNMATCHED ONES*/

INSERT INTO CC_COBRA.WK_C01J16_L2SP_T5
SELECT 
B.AGRMNT_ID
,A.EVENT_ID
,B.SOURCE_START_DT
,A.PLAN_NO
,A.PLAN_SEQ
,B.EVENT_AM
,B.EVENT_ACTVTY_CD
FROM CC_COBRA.CC_L2PT_L2GT_UNM_TXNS A
JOIN GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST B
ON   A.EVENT_ID = B.EVENT_ID
AND  B.EVENT_ACTVTY_CD IN (SELECT EVENT_ACTVTY_CD FROM CC_COBRA.TRNSCN_DERVTN_GROUPS WHERE TRNSCN_DERVTN_GRP = 'INTEREST')
AND  B.SOURCE_START_DT/10000 = (SELECT REPORT_DT/10000 FROM CC_COBRA.WK_C01J20_REPORT_DATE)
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J16_L2SP_T5 INDEX (AGRMNT_ID);


  /*STEP 08G MATCH WHERE ALL THE INT FOR THE DAY/PLAN NO/SEQ = L2SP*/

DELETE FROM CC_COBRA.INT_TXN_FIX ALL;

INSERT INTO CC_COBRA.INT_TXN_FIX
SELECT
 T5.AGRMNT_ID
,M.FEATUR_ID
,T5.EVENT_ID
,T5.REPORT_DT
,T5.PLAN_NO
,T5.PLAN_SEQ
,T5.EVENT_AM
,T5.EVENT_ACTVTY_CD
FROM 
(
SELECT T.AGRMNT_ID
      ,T.REPORT_DT
      ,T.PLAN_NO
      ,T.PLAN_SEQ
      ,S.FEATUR_ID
FROM CC_COBRA.WK_C01J16_L2SP_T4 S
JOIN
(SELECT 
       AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_SEQ
      ,SUM(EVENT_AM*-1) AS TOTAL_INT
FROM CC_COBRA.WK_C01J16_L2SP_T5
GROUP BY 1,2,3,4
) T
ON  S.AGRMNT_ID = T.AGRMNT_ID
AND S.REPORT_DT = T.REPORT_DT
AND ABS(S.CYC_INTRST_BILLED_AM - T.TOTAL_INT) <= .01
AND S.EXPIRY_DT IS NULL
AND S.PLAN_NO = T.PLAN_NO
AND S.PLAN_SEQ = T.PLAN_SEQ) M

JOIN CC_COBRA.WK_C01J16_L2SP_T5 T5
ON  M.AGRMNT_ID = T5.AGRMNT_ID
AND M.REPORT_DT = T5.REPORT_DT
AND M.PLAN_NO   = T5.PLAN_NO
AND M.PLAN_SEQ  = T5.PLAN_SEQ
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.INT_TXN_FIX INDEX(AGRMNT_ID);

SELECT EVENT_ID FROM CC_COBRA.INT_TXN_FIX
GROUP BY 1 HAVING COUNT(*) > 1;

DELETE FROM CC_COBRA.WK_C01J16_L2SP_T5 A
WHERE EXISTS  (
      SELECT NULL
      FROM  CC_COBRA.INT_TXN_FIX B
      WHERE A.EVENT_ID = B.EVENT_ID)
;


  /*STEP 08H MATCH WHERE ALL THE INT FOR THE DAY/PLAN NO/SEQ = L2SP*/
  /*FOR EXPIRED PLANS - SO THE DAY BEFORE*/

INSERT INTO CC_COBRA.INT_TXN_FIX
SELECT
 T5.AGRMNT_ID
,M.FEATUR_ID
,T5.EVENT_ID
,T5.REPORT_DT
,T5.PLAN_NO
,T5.PLAN_SEQ
,T5.EVENT_AM
,T5.EVENT_ACTVTY_CD
FROM 
(
SELECT T.AGRMNT_ID
      ,T.REPORT_DT
      ,T.PLAN_NO
      ,T.PLAN_SEQ
      ,S.FEATUR_ID
FROM CC_COBRA.WK_C01J16_L2SP_T4 S
JOIN
(SELECT 
       AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_SEQ
      ,SUM(EVENT_AM*-1) AS TOTAL_INT
FROM CC_COBRA.WK_C01J16_L2SP_T5
GROUP BY 1,2,3,4
) T
ON  S.AGRMNT_ID = T.AGRMNT_ID
AND S.REPORT_DT = T.REPORT_DT
AND ABS(S.CYC_INTRST_BILLED_AM - T.TOTAL_INT) <= .01
AND S.PRIOR_PLAN_NO = T.PLAN_NO
AND S.PRIOR_PLAN_SEQ = T.PLAN_SEQ
AND S.EXPIRY_DT = S.REPORT_DT) M

JOIN CC_COBRA.WK_C01J16_L2SP_T5 T5
ON  M.AGRMNT_ID = T5.AGRMNT_ID
AND M.REPORT_DT = T5.REPORT_DT
AND M.PLAN_NO   = T5.PLAN_NO
AND M.PLAN_SEQ  = T5.PLAN_SEQ
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.INT_TXN_FIX INDEX(AGRMNT_ID);

SELECT EVENT_ID FROM CC_COBRA.INT_TXN_FIX
GROUP BY 1 HAVING COUNT(*) > 1;


DELETE FROM CC_COBRA.WK_C01J16_L2SP_T5 A
WHERE EXISTS  (
      SELECT NULL
      FROM  CC_COBRA.INT_TXN_FIX B
      WHERE A.EVENT_ID = B.EVENT_ID)
;


  /*STEP 08I FOR EXPIRED PLANS */
  /*THE DAY BEFORE THE PLAN AND SEQ MATCH*/

INSERT INTO CC_COBRA.INT_TXN_FIX
SELECT
 T5.AGRMNT_ID
,M.FEATUR_ID
,T5.EVENT_ID
,T5.REPORT_DT
,T5.PLAN_NO
,T5.PLAN_SEQ
,T5.EVENT_AM
,T5.EVENT_ACTVTY_CD
FROM 
(
SELECT T.AGRMNT_ID
      ,T.REPORT_DT
      ,T.PLAN_NO
      ,T.PLAN_SEQ
      ,S.FEATUR_ID
FROM CC_COBRA.WK_C01J16_L2SP_T4 S
JOIN
(SELECT 
       AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_SEQ
      ,SUM(EVENT_AM*-1) AS TOTAL_INT
FROM CC_COBRA.WK_C01J16_L2SP_T5
GROUP BY 1,2,3,4
) T
ON  S.AGRMNT_ID = T.AGRMNT_ID
AND S.REPORT_DT = T.REPORT_DT
AND S.PRIOR_PLAN_NO = T.PLAN_NO
AND S.PRIOR_PLAN_SEQ = T.PLAN_SEQ
AND S.EXPIRY_DT = S.REPORT_DT) M

JOIN CC_COBRA.WK_C01J16_L2SP_T5 T5
ON  M.AGRMNT_ID = T5.AGRMNT_ID
AND M.REPORT_DT = T5.REPORT_DT
AND M.PLAN_NO   = T5.PLAN_NO
AND M.PLAN_SEQ  = T5.PLAN_SEQ
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.INT_TXN_FIX INDEX(AGRMNT_ID);

SELECT EVENT_ID FROM CC_COBRA.INT_TXN_FIX
GROUP BY 1 HAVING COUNT(*) > 1;


DELETE FROM CC_COBRA.WK_C01J16_L2SP_T5 A
WHERE EXISTS  (
      SELECT NULL
      FROM  CC_COBRA.INT_TXN_FIX B
      WHERE A.EVENT_ID = B.EVENT_ID)
;

SELECT COUNT(*) 
FROM CC_COBRA.WK_C01J16_L2SP_T5 A
JOIN CC_COBRA.CC_L2PT_L2GT_UNM_TXNS B
ON   A.EVENT_ID = B.EVENT_ID
;

SELECT COUNT(*) 
FROM CC_COBRA.INT_TXN_FIX A
JOIN CC_COBRA.CC_EVENT_FEATURE_ID B
ON   A.EVENT_ID = B.EVENT_ID
AND  A.FEATUR_ID <> B.FEATUR_ID
;

UPDATE CC_COBRA.CC_EVENT_FEATURE_ID
FROM CC_COBRA.INT_TXN_FIX A
SET FEATUR_ID = A.FEATUR_ID
WHERE CC_COBRA.CC_EVENT_FEATURE_ID.EVENT_ID = A.EVENT_ID
AND   CC_COBRA.CC_EVENT_FEATURE_ID.FEATUR_ID <> A.FEATUR_ID;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


INSERT INTO CC_COBRA.CC_EVENT_FEATURE_ID
SELECT A.EVENT_ID
      ,A.FEATUR_ID
      ,B.PLAN_NO
      ,B.PLAN_SEQ
FROM  CC_COBRA.INT_TXN_FIX A
JOIN CC_COBRA.CC_L2PT_L2GT_UNM_TXNS B
ON   A.EVENT_ID = B.EVENT_ID
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

DELETE FROM CC_COBRA.CC_L2PT_L2GT_UNM_TXNS A
WHERE EXISTS (
SEL NULL
FROM CC_COBRA.INT_TXN_FIX B
WHERE A.EVENT_ID = B.EVENT_ID)
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

DELETE FROM CC_COBRA.CC_INTEREST_TXNS WHERE SOURCE_START_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.WK_C01J20_REPORT_DATE);


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.CC_INTEREST_TXNS
SELECT A.AGRMNT_ID
      ,A.EVENT_ID
      ,A.FEATUR_ID
      ,A.PLAN_NO
      ,A.PLAN_SEQ
      ,A.EVENT_AM
      ,A.REPORT_DT
      ,A.EVENT_ACTVTY_CD
      ,SUBSTR(M.TRNSCN_CATGRY_CD,8,1) 

FROM CC_COBRA.INT_TXN_FIX A
JOIN GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST M
ON   A.EVENT_ID = M.EVENT_ID
WHERE A.EVENT_ACTVTY_CD IN 
(SELECT EVENT_ACTVTY_CD FROM CC_COBRA.TRNSCN_DERVTN_GROUPS 
WHERE TRNSCN_DERVTN_GRP = 'INTEREST')
AND NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_INTEREST_TXNS D
WHERE A.EVENT_ID = D.EVENT_ID)
AND A.REPORT_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.WK_C01J20_REPORT_DATE)
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.CC_INTEREST_TXNS
SELECT A.AGRMNT_ID
      ,A.EVENT_ID
      ,B.FEATUR_ID
      ,A.PLAN_NO
      ,A.PLAN_SEQ
      ,A.EVENT_AM
      ,A.REPORT_DT
      ,A.EVENT_ACTVTY_CD
      ,SUBSTR(M.TRNSCN_CATGRY_CD,8,1) 

FROM CC_COBRA.WK_C01J16_L2SP_T5 A
JOIN GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST M
ON   A.EVENT_ID = M.EVENT_ID
JOIN CC_COBRA.CC_EVENT_FEATURE_ID B
ON   A.EVENT_ID = B.EVENT_ID
WHERE A.EVENT_ACTVTY_CD IN 
(SELECT EVENT_ACTVTY_CD FROM CC_COBRA.TRNSCN_DERVTN_GROUPS 
WHERE TRNSCN_DERVTN_GRP = 'INTEREST')
AND NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_INTEREST_TXNS D
WHERE A.EVENT_ID = D.EVENT_ID)
AND A.REPORT_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.WK_C01J20_REPORT_DATE)
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.CC_INTEREST_TXNS
SELECT A.AGRMNT_ID
      ,A.EVENT_ID
      ,NULL
      ,A.PLAN_NO
      ,A.PLAN_SEQ
      ,A.EVENT_AM
      ,A.REPORT_DT
      ,A.EVENT_ACTVTY_CD
      ,SUBSTR(M.TRNSCN_CATGRY_CD,8,1) 

FROM CC_COBRA.WK_C01J16_L2SP_T5 A
JOIN GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST M
ON   A.EVENT_ID = M.EVENT_ID
JOIN CC_COBRA.CC_L2PT_L2GT_UNM_TXNS B
ON   A.EVENT_ID = B.EVENT_ID
WHERE A.EVENT_ACTVTY_CD IN 
(SELECT EVENT_ACTVTY_CD FROM CC_COBRA.TRNSCN_DERVTN_GROUPS 
WHERE TRNSCN_DERVTN_GRP = 'INTEREST')
AND NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_INTEREST_TXNS D
WHERE A.EVENT_ID = D.EVENT_ID)
AND A.REPORT_DT/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.WK_C01J20_REPORT_DATE)
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

DELETE FROM WK_C01J16_L2SP_T4;


/******************************************/
/*END TEMP CODE TO FIX INTEREST IN C01J16 */
/******************************************/



/*CHECK TO SEE IF CHRISTMAS NEEDS TO BE PROCESSED*/

SELECT * 
FROM CC_COBRA.WK_C01J20_REPORT_DATE A
WHERE
( EXTRACT(MONTH FROM A.PRIOR_REPORT_DT) = 12
AND EXTRACT(DAY FROM A.PRIOR_REPORT_DT) = 25 )
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPSTCLAUS;

DELETE FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML WHERE REPORT_DT IN (
SELECT PRIOR_REPORT_DT
FROM CC_COBRA.WK_C01J20_REPORT_DATE A
WHERE
( EXTRACT(MONTH FROM A.PRIOR_REPORT_DT) = 12
AND EXTRACT(DAY FROM A.PRIOR_REPORT_DT) = 25 )
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML
SELECT  
A.AGRMNT_ID
,A.FEATUR_ID
,B.REPORT_DT
,A.BILLNG_CYCLE_NO
,A.PLAN_NO
,A.PLAN_BALANC_AM
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 0 ELSE A.CALC_ACCRUED_INT_AM END
,A.DEFERRED_INT_AM
,A.BILLED_INT_AM
,0
,0
,0
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 1 ELSE 0 END AS CYCLE_START 
,0
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 0 ELSE A.CALC_CTD_BAL_AM END
,0
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 0 ELSE A.CALC_CUML_CTD_BAL_AM END
,A.DAILY_RATE
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 0 ELSE A.PR_CALC_CUML_CTD_BAL_AM END
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 0 ELSE A.PR_DAILY_RATE END
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 0 ELSE A.CALC_CUML_CTD_ACC_INT END
,CASE WHEN A.CYCLE_END_FLAG = 1 THEN 0 ELSE A.CALC_CUML_STM_ACC_INT END
,A.RET_ME_CTD_ACC_INT
,A.ADJ_DEF_INT

FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML A
JOIN (
SELECT X.PRIOR_WORKDAY_DT, D.PRIOR_REPORT_DT AS REPORT_DT
FROM CC_COBRA.WK_C01J20_REPORT_DATE D
JOIN CC_COBRA.CC_FD_REPORT_CONTROL X
ON D.PRIOR_REPORT_DT = X.REPORT_DT) B
ON A.REPORT_DT = B.PRIOR_WORKDAY_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIPSTCLAUS;

/*STEP A: GET THE PRIOR DAY (PD) DATA ON THE SAME RECORD*/

/*
CREATE SET TABLE CC_COBRA.WK_C01J20_T1_PD ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      AGRMNT_ID INTEGER,
      FEATUR_ID INTEGER,
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      PRIOR_REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      PLAN_NO INTEGER COMPRESS (10001 ,10002 ,10003 ,10004 ,10005 ,30000 ,30001 ,30004 ,30005 ,30006 ,30012 ,15007 ,15009 ,15034 ,11002 ),
      PLAN_AIR DECIMAL(5,3) COMPRESS (0.000 ,13.572 ,21.252 ,14.880 ,24.096 ,20.004 ,14.886 ,9.516 ,22.068 ,17.472 ,24.900 ,13.128 ,11.340 ,25.692 ,20.832 ,22.884 ,14.448 ,26.484 ,19.584 ,15.756 ,18.324 ,5.784 ,26.520 ,21.660 ,14.004 ,12.228 ,20.424 ,12.233 ,22.476 ,15.324 ,19.164 ,19.170 ,26.088 ,16.620 ,17.904 ,23.292 ),
      PD_PLAN_AIR DECIMAL(5,3) COMPRESS (0.000 ,13.572 ,21.252 ,14.880 ,24.096 ,20.004 ,14.886 ,9.516 ,22.068 ,17.472 ,24.900 ,13.128 ,11.340 ,25.692 ,20.832 ,22.884 ,14.448 ,26.484 ,19.584 ,15.756 ,18.324 ,5.784 ,26.520 ,21.660 ,14.004 ,12.228 ,20.424 ,12.233 ,22.476 ,15.324 ,19.164 ,19.170 ,26.088 ,16.620 ,17.904 ,23.292 ),
      ACC_DAYS BYTEINT COMPRESS (1 ,2 ,3 ),
      MONTH_START_FLAG BYTEINT COMPRESS (0 ,1 ),
      MONTH_END_FLAG BYTEINT COMPRESS (0 ,1 ),
      NEW_PLAN_FLAG BYTEINT COMPRESS (0 ,1 ),
      PLAN_BALANC_AM DECIMAL(15,2) COMPRESS 0.00 ,
      ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0.00 ,
      PD_ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0.00 ,
      DEFERRED_INT_AM DECIMAL(15,2) COMPRESS 0.00 ,
      PD_DEFERRED_INT_AM DECIMAL(15,2) COMPRESS 0.00 ,
      BILLED_INT_AM DECIMAL(15,2) COMPRESS 0.00 ,
      PD_LS_INT_AM DECIMAL(15,2) COMPRESS 0.00 ,
      CTD_TXN_BAL_AM DECIMAL(15,2) COMPRESS 0.00 ,
      PD_CTD_TXN_BAL_AM DECIMAL(15,2) COMPRESS 0.00 ,
      L2SP_CTD_CI_DR_BAL_AM DECIMAL(15,2) COMPRESS 0.00 )
PRIMARY INDEX ( AGRMNT_ID );
*/
DELETE FROM CC_COBRA.WK_C01J20_T1_PD;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.WK_C01J20_T1_PD
SELECT 
F.AGRMNT_ID
,F.FEATUR_ID
,F.REPORT_DT
,D.PRIOR_REPORT_DT
,F.PLAN_NO
,F.PLAN_AIR
,F2.PLAN_AIR
,D.ACC_DAYS
,D.MONTH_START_FLAG
,D.MONTH_END_FLAG
,CASE WHEN F2.AGRMNT_ID IS NOT NULL THEN 0 ELSE 1 END AS NEW_PLAN_FLAG
,F.PLAN_BALANC_AM*-1
,F.ACCRUED_INT_AM
,ZEROIFNULL(F2.ACCRUED_INT_AM)
,F.DEFERRED_INT_AM
,ZEROIFNULL(F2.DEFERRED_INT_AM)
,F.LS_INT_AM
,ZEROIFNULL(F2.LS_INT_AM)
,CASE WHEN F.CTD_TXN_BAL_AM >= 0 THEN  F.CTD_TXN_BAL_AM ELSE 0 END AS CTD_TXN_BAL_AM
,CASE WHEN F2.CTD_TXN_BAL_AM >= 0 THEN  F2.CTD_TXN_BAL_AM ELSE 0 END AS PD_CTD_TXN_BAL_AM
,CASE WHEN F.L2SP_CTD_CI_DR_BAL_AM >= 0 
        AND F.L2SP_CTD_CI_DR_BAL_AM > F.PLAN_BALANC_AM*-1 
        AND F.PLAN_BALANC_AM*-1 > 0
        THEN F.PLAN_BALANC_AM*-1 /*SET TO PLAN BALANCE WERE THE DEBITS ARE GREATER THAN PLAN BALANCE*/
      WHEN F.PLAN_BALANC_AM*-1 <= 0 THEN 0 /*SET TO 0 FOR CREDIT BALS*/
      ELSE F.L2SP_CTD_CI_DR_BAL_AM END AS L2SP_CTD_CI_DR_BAL_AM

FROM CC_COBRA.CC_ACCOUNT_FEATURE_DAILY F
JOIN CC_COBRA.WK_C01J20_REPORT_DATE D
ON   F.REPORT_DT = D.REPORT_DT
LEFT JOIN CC_COBRA.CC_ACCOUNT_FEATURE_DAILY F2
ON   F.AGRMNT_ID = F2.AGRMNT_ID
AND  F.FEATUR_ID = F2.FEATUR_ID
AND  D.PRIOR_REPORT_DT = F2.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J20_T1_PD INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*STEP B: CALCULATE THE CUML CTD BALANCES*/


DELETE FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


INSERT INTO CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML     
SELECT  
T2.AGRMNT_ID
,T2.FEATUR_ID
,T2.REPORT_DT
,T1.BILLNG_CYCLE_NO

,T2.PLAN_NO
,T2.PLAN_BALANC_AM
,CASE WHEN T1.CYCLE_END_FLAG = 0 THEN T2.ACCRUED_INT_AM
      WHEN T1.CYCLE_END_FLAG = 1 AND T2.MONTH_END_FLAG = 1 THEN T2.ACCRUED_INT_AM  --THIS MAKES SURE THAT MONTH END POSITIONS RECORD THE ACTUAL ACC INT VALUE
      ELSE T2.ACCRUED_INT_AM+T2.DEFERRED_INT_AM+T2.BILLED_INT_AM END AS CORRECTED_ACCRUED_INT_AM --NOTE USED A DIFF NAME SO IT CAN BE REFERENCE IN OTHER FIELDS
,T2.DEFERRED_INT_AM
,T2.BILLED_INT_AM

,T2.NEW_PLAN_FLAG
,T2.MONTH_START_FLAG
,T2.MONTH_END_FLAG
,CASE WHEN T3.CYCLE_END_FLAG = 1 THEN 1 ELSE T1.CYCLE_START_FLAG END AS CYCLE_START --NOT DIFF NAME SO CAN BE REFERENCED
,T1.CYCLE_END_FLAG
--CALC_CTD_BAL_AM
,CASE WHEN T1.CYCLE_END_FLAG = 0 THEN T2.CTD_TXN_BAL_AM
      WHEN T1.CYCLE_END_FLAG = 1 THEN T2.L2SP_CTD_CI_DR_BAL_AM --CUSTOMER INITIATED DEBITS ONLY
      END AS CORRECTED_CTD_BAL_AM --NOTE USED A DIFF NAME SO IT CAN BE REFERENCE IN OTHER FIELDS     
,T2.ACC_DAYS 
--CALC_CUML_CTD_BAL_AM
,CASE WHEN T2.MONTH_START_FLAG = 0 AND CYCLE_START = 0 THEN ZEROIFNULL(T3.CALC_CUML_CTD_BAL_AM)+(CORRECTED_CTD_BAL_AM*T2.ACC_DAYS) --NOT START OF CYCLE SO ADD PRIOR DAY'S CUML AM
      WHEN T2.MONTH_START_FLAG = 0 AND CYCLE_START = 1 THEN (CORRECTED_CTD_BAL_AM*T2.ACC_DAYS)  --START OF CYCLE, DO NOT ADD CUML AM
      WHEN T2.MONTH_START_FLAG = 1 AND T2.ACC_DAYS = 1 THEN ZEROIFNULL(T3.CALC_CUML_CTD_BAL_AM)+(CORRECTED_CTD_BAL_AM*T2.ACC_DAYS) --NOT START OF CYCLE SO ADD PRIOR DAY'S CUML AM
      WHEN T2.MONTH_START_FLAG = 1 AND T2.ACC_DAYS = 2 THEN ZEROIFNULL(T3.CALC_CUML_CTD_BAL_AM)+CORRECTED_CTD_BAL_AM+T2.PD_CTD_TXN_BAL_AM --USE FRIDAY BALANCE FOR SUNDAY AND DON'T WORRY ABOUT USING CALC_CTD_BAL_AM FOR PRIOR DAY AS THERE ARE NO CYCLES AT END OF MONTH
      WHEN T2.MONTH_START_FLAG = 1 AND T2.ACC_DAYS = 3 AND EXTRACT(DAY FROM T2.REPORT_DT) = 3 THEN ZEROIFNULL(T3.CALC_CUML_CTD_BAL_AM)+CORRECTED_CTD_BAL_AM+(T2.PD_CTD_TXN_BAL_AM*2)--USE FRIDAY BALANCE FOR SATURDAY AND SUNDAY
      WHEN T2.MONTH_START_FLAG = 1 AND T2.ACC_DAYS = 3 AND EXTRACT(DAY FROM T2.REPORT_DT) = 1 THEN ZEROIFNULL(T3.CALC_CUML_CTD_BAL_AM)+(CORRECTED_CTD_BAL_AM*T2.ACC_DAYS) --USE FRIDAY BALANCE FOR SATURDAY AND SUNDAY NORMALLY 
      ELSE NULL END AS CUML_CTD_BAL_AM --NOTE USED A DIFF NAME SO IT CAN BE REFERENCE IN OTHER FIELDS
,CAST(CAST((CAST(T2.PLAN_AIR AS FLOAT)/CAST(36500 AS FLOAT))*1000000000 AS INT) AS FLOAT)/CAST(1000000000 AS FLOAT) AS DAILY_RT  
--PR_CALC_CUML_CTD_BAL_AM - DETAILS OF ANY CTD BALANCE THAT HAS JUST UNDERGONE A RATE CHANGE
,CASE WHEN T2.PD_PLAN_AIR = T2.PLAN_AIR AND T3.PR_CALC_CUML_CTD_BAL_AM = 0 THEN 0 --WHEN NO RATE CHANGE AND PREV RATE STORED CTD BAL AM IS ZERO THEN KEEP AS ZERO
      WHEN CYCLE_START = 0 AND T2.PD_PLAN_AIR IS NOT NULL AND T2.PD_PLAN_AIR <> T2.PLAN_AIR THEN T3.CALC_CUML_CTD_BAL_AM --WHEN NOT BEG OF CYCLE AND THERE IS A RATE CHANGE THEN STORE THE PREV DAY CTD CUML BAL
      WHEN CYCLE_START = 0 AND T3.PR_CALC_CUML_CTD_BAL_AM <> 0 THEN T3.PR_CALC_CUML_CTD_BAL_AM --WHEN NOT BEG OF CYCLE AND THERE IS A VALUE IN THE PREV RATE CTD CUML BAL VALUE THEN RETAIN THIS VALUE
      ELSE 0 END AS PR_CALC_CUML_CTD_BAL_AMT  -- ELSE SET TO 0
--PR_DAILY_RATE
,CASE WHEN PR_CALC_CUML_CTD_BAL_AMT = 0 THEN 0 --SIMPLY PREV RATE TO JUST EQUAL ZERO IF NO VALUE IN THE PREV RATE CTD CUML BAL
      WHEN PR_CALC_CUML_CTD_BAL_AMT <> 0 AND T2.PD_PLAN_AIR = T2.PLAN_AIR THEN T3.PR_DAILY_RATE 
      WHEN PR_CALC_CUML_CTD_BAL_AMT <> 0 THEN CAST(CAST((CAST(T2.PD_PLAN_AIR AS FLOAT)/CAST(36500 AS FLOAT))*1000000000 AS INT) AS FLOAT)/CAST(1000000000 AS FLOAT)
      END AS PR_DAILY_RT
--CALC_CUML_CTD_ACC_INT
,CASE WHEN T2.PLAN_NO IN (11001,11002) AND T1.CYCLE_END_FLAG = 0 THEN CORRECTED_ACCRUED_INT_AM -- FOR PREFERENCE PLANS ALL ACC INT GOES INTO CTD ACC INT, AND ON CYCLE DAYS THIS IS DONE BY THE NEXT STATEMENT
      WHEN T1.CYCLE_END_FLAG = 1 AND T2.DEFERRED_INT_AM > 0 THEN T2.DEFERRED_INT_AM --USED DEFERRED AMT WHEN IT IS SET ON CYCLE DATE
      WHEN (DAILY_RT*CUML_CTD_BAL_AM)-(DAILY_RT*PR_CALC_CUML_CTD_BAL_AMT)+(PR_DAILY_RT*PR_CALC_CUML_CTD_BAL_AMT) > CORRECTED_ACCRUED_INT_AM THEN CORRECTED_ACCRUED_INT_AM --ALWAY SET TO THE ACCRUED AMT IF THE CALCULATION IS GREATER THAN THE TOTAL ACCRUED - THIS TAKES INTO ACCOUNT PAYMENTS > OPEN BAL
      ELSE ROUND((DAILY_RT*CUML_CTD_BAL_AM)-(DAILY_RT*PR_CALC_CUML_CTD_BAL_AMT)+(PR_DAILY_RT*PR_CALC_CUML_CTD_BAL_AMT),2)
      END AS CUML_CTD_ACC_INT --NOTE USED A DIFF NAME SO IT CAN BE REFERENCE IN OTHER FIELDS           
--CALC_CUML_STM_ACC_INT
,CASE WHEN T2.MONTH_END_FLAG = 1 AND T1.CYCLE_END_FLAG = 1 THEN 0
      ELSE CORRECTED_ACCRUED_INT_AM-CUML_CTD_ACC_INT END AS CUML_STM_ACC_INT
--RET_ME_CTD_ACC_INT 
,CASE WHEN T2.MONTH_END_FLAG = 0 THEN ZEROIFNULL(T3.RET_ME_CTD_ACC_INT)  --PRIOR RECORD'S VALUE
      WHEN T2.MONTH_END_FLAG = 1 AND T1.CYCLE_END_FLAG = 1 THEN 0 --WHERE THERE IS A CYCLE ON THE LAST WORKING DAY OF MONTH FORCE THIS TO 0 (EG A FEBRUARY WHERE CYCLE 26 FALLS ON A FRIDAY)
      ELSE CUML_CTD_ACC_INT END AS RET_ME_CTD_ACC_INT  -- WHEN MONTH END = 1 THIS WILL EQUAL THE NEW VALUE IN CUML_CTD_ACC_INT
--ADJ_DEF_INT - THIS CALCUATES THE AMT OF DEFERRED THAT HAS NOT BEEN ASSESSED AT THE PRIOR MONTH END IN CTD ACC INT
,CASE WHEN T1.CYCLE_END_FLAG = 1 AND T2.DEFERRED_INT_AM > 0 AND T2.DEFERRED_INT_AM-T3.RET_ME_CTD_ACC_INT > 0 THEN T2.DEFERRED_INT_AM-T3.RET_ME_CTD_ACC_INT --TAKE OFF THE PRIOR MONTH END CTD ACC INTEREST AS THIS HAS ALREADY BEEN ASSESSED
      WHEN T1.CYCLE_END_FLAG = 1 AND T2.DEFERRED_INT_AM > 0 AND T2.DEFERRED_INT_AM-T3.RET_ME_CTD_ACC_INT <= 0 THEN 0 --ENSURE THAT THE ADJ DEFERRED IS NEVER LESS THAN ZERO
      WHEN T1.CYCLE_END_FLAG = 0 AND T2.DEFERRED_INT_AM >= T3.ADJ_DEF_INT THEN T3.ADJ_DEF_INT --WHERE THE DEFERRED INT EXISTS USE THE PRIOR DAY'S ADJ DEF INT
      ELSE 0 END AS ADJ_DEF_INT 

FROM CC_COBRA.WK_C01J20_T1_PD T2
LEFT JOIN GDW_VIEWS.AGREEMENT_RELATIONSHIP B  --TO JOIN TO TRADED FROM ACCOUNT IN ORDER TO DEAL WITH TRADES
ON   T2.AGRMNT_ID = B.AGRMNT_ID
AND  B.AGRMNT_RLTNSP_TYPE_CD = '00500001'  --NORMAL TRADES ONLY
AND  T2.REPORT_DT = B.SOURCE_START_DT --ON DAY OF TRADE
LEFT JOIN CC_COBRA.CC_ACCOUNT_DAILY T1
ON   T2.AGRMNT_ID = T1.AGRMNT_ID
AND  T2.REPORT_DT = T1.REPORT_DT
LEFT JOIN CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML T3
ON   COALESCE(B.RELATD_AGRMNT_ID,T2.AGRMNT_ID) = T3.AGRMNT_ID
AND  T2.FEATUR_ID = T3.FEATUR_ID
AND  T2.PRIOR_REPORT_DT = T3.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*STEP C: INSERT PURGED PLAN RECORDS SO THAT INTEREST CAN BE MATCHED UP*/

INSERT INTO CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML
SELECT 
C.AGRMNT_ID
,C.FEATUR_ID
,A.REPORT_DT --DAY OF PURGE
,C.BILLNG_CYCLE_NO
,C.PLAN_NO
,NULL --BALANCE IS MOVED SO TO FLAG THESE INSERTS I AM USING A NULL
,CASE WHEN B.MONTH_END_FLAG = 1 THEN 0 ELSE D.ACC_INT_TXN END AS CALC_ACC_INT
,CASE WHEN B.MONTH_END_FLAG = 1 THEN 0 ELSE D.DEF_INT_TXN END AS DEF_INT
,D.ACC_INT_TXN+D.DEF_INT_TXN
,C.NEW_PLAN_FLAG
,B.MONTH_START_FLAG
,B.MONTH_END_FLAG
,0 --CYCLE_START_FLAG
,1 --CYCLE_END_FLAG - PURGED AT CYCLE
,C.CALC_CTD_BAL_AM
,B.ACC_DAYS
,C.CALC_CUML_CTD_BAL_AM+(C.CALC_CTD_BAL_AM*B.ACC_DAYS) AS NEW_CALC_CUML_CTD_BAL_AM
,C.DAILY_RATE AS DAILY_RT
--PR_CALC_CUML_CTD_BAL_AM - DETAILS OF ANY CTD BALANCE THAT HAS JUST UNDERGONE A RATE CHANGE
,CASE WHEN C.PR_CALC_CUML_CTD_BAL_AM <> 0 THEN C.PR_CALC_CUML_CTD_BAL_AM --WHEN NOT BEG OF CYCLE AND THERE IS A VALUE IN THE PREV RATE CTD CUML BAL VALUE THEN RETAIN THIS VALUE
      ELSE 0 END AS PR_CALC_CUML_CTD_BAL_AM  -- ELSE SET TO 0 
--PR_DAILY_RATE
,CASE WHEN C.PR_CALC_CUML_CTD_BAL_AM = 0 THEN 0 --SIMPLY PREV RATE TO JUST EQUAL ZERO IF NO VALUE IN THE PREV RATE CTD CUML BAL
      WHEN C.PR_CALC_CUML_CTD_BAL_AM <> 0 THEN PR_DAILY_RATE
      END AS PR_DAILY_RT
,ROUND((DAILY_RT*NEW_CALC_CUML_CTD_BAL_AM)-(DAILY_RT*PR_CALC_CUML_CTD_BAL_AM)+(PR_DAILY_RT*PR_CALC_CUML_CTD_BAL_AM),2) AS NEW_CALC_CUML_CTD_ACC_INT
,D.ACC_INT_TXN-NEW_CALC_CUML_CTD_ACC_INT AS CALC_CUML_STM_ACC_INT
,C.RET_ME_CTD_ACC_INT
,C.ADJ_DEF_INT

FROM CC_COBRA.CC_CYCLE_PURGED_FEATURES A  --FROM C01J20
JOIN CC_COBRA.WK_C01J20_REPORT_DATE B
ON A.REPORT_DT = B.REPORT_DT
JOIN CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML C
ON A.AGRMNT_ID = C.AGRMNT_ID
AND A.FEATUR_ID = C.FEATUR_ID
AND C.REPORT_DT = B.PRIOR_REPORT_DT

JOIN (
SELECT 
  AGRMNT_ID
, FEATUR_ID
, SOURCE_START_DT
, SUM(CASE WHEN EVENT_ACTVTY_CD = '00505101' THEN (EVENT_AM*-1) ELSE 0 END) AS ACC_INT_TXN
, SUM(CASE WHEN EVENT_ACTVTY_CD = '00505125' THEN (EVENT_AM*-1) ELSE 0 END) AS DEF_INT_TXN
FROM CC_COBRA.CC_INTEREST_TXNS  --FROM C01J16
GROUP BY 1,2,3
)D
ON  A.AGRMNT_ID = D.AGRMNT_ID
AND A.FEATUR_ID = D.FEATUR_ID
AND A.REPORT_DT = D.SOURCE_START_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


/*STEP D: THIS SECTION COLLECTS DATA FOR SAMPLE TABLES */

/*
CREATE TABLE CC_COBRA.C01J20_SAMPLE (
AGRMNT_ID INT)
UNIQUE PRIMARY INDEX(AGRMNT_ID);
*/

/*GET SAMPLE OF NEW ACCOUNTS FOR DAY*/

INSERT INTO CC_COBRA.C01J20_SAMPLE
SELECT AGRMNT_ID
FROM   CC_COBRA.CC_AGREEMENT_ADDED_DATE A
JOIN   CC_COBRA.WK_C01J20_REPORT_DATE B
ON     A.ORIGNL_ADDED_DT = B.REPORT_DT
  /*MAKE SURE SAMPLE HASN'T ALREADY BEEN TAKEN FOR THE DAY*/
WHERE  NOT EXISTS (
SELECT NULL
FROM CC_COBRA.C01J20_SAMPLE C
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE D
ON   C.AGRMNT_ID = D.AGRMNT_ID
WHERE B.REPORT_DT = D.ORIGNL_ADDED_DT)
SAMPLE .005;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*PULL UP ANY ADDITIONAL AGRMNT_IDS IN ANY CHAIN FROM THE SAMPLE LIST*/

INSERT INTO CC_COBRA.C01J20_SAMPLE
SELECT C.AGRMNT_ID
FROM   CC_COBRA.C01J20_SAMPLE A
JOIN   GDW_VIEWS.AGREEMENT_RELATIONSHIP B
ON     A.AGRMNT_ID = B.AGRMNT_ID
AND    B.AGRMNT_RLTNSP_TYPE_CD = '00500001'
JOIN   GDW_VIEWS.AGREEMENT_RELATIONSHIP C
ON     B.ORIGNL_AGRMNT_ID = C.ORIGNL_AGRMNT_ID
AND    C.AGRMNT_RLTNSP_TYPE_CD = '00500001'
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.C01J20_SAMPLE D
WHERE C.AGRMNT_ID = D.AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*PULL UP ANY ADDITIONAL ORIGINAL AGRMNT_IDS IN ANY CHAIN FROM THE SAMPLE LIST*/
/*THIS WON'T OFTEN HAVE INSERTS GOING FORWARD*/

INSERT INTO CC_COBRA.C01J20_SAMPLE
SELECT B.ORIGNL_AGRMNT_ID
FROM   CC_COBRA.C01J20_SAMPLE A
JOIN   GDW_VIEWS.AGREEMENT_RELATIONSHIP B
ON     A.AGRMNT_ID = B.AGRMNT_ID
AND    B.AGRMNT_RLTNSP_TYPE_CD = '00500001'
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.C01J20_SAMPLE D
WHERE B.ORIGNL_AGRMNT_ID = D.AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

DELETE FROM CC_COBRA.CC_ACCOUNT_DAILY_SAMP 
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.CC_ACCOUNT_DAILY_SAMP 
SELECT A.AGRMNT_ID
      ,A.REPORT_DT
      ,A.BILLNG_CYCLE_NO
      ,A.INT_STATUS
      ,A.CYCLE_START_FLAG
      ,A.CYCLE_END_FLAG
FROM CC_COBRA.CC_ACCOUNT_DAILY A 
JOIN CC_COBRA.C01J20_SAMPLE B 
ON A.AGRMNT_ID = B.AGRMNT_ID 
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


DELETE FROM CC_COBRA.CC_ACCOUNT_FEATURE_DAILY_SAMP 
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.CC_ACCOUNT_FEATURE_DAILY_SAMP 
SELECT A.AGRMNT_ID
      ,A.FEATUR_ID
      ,A.REPORT_DT
      ,A.PLAN_NO
      ,A.PLAN_BALANC_AM
      ,A.PLAN_AIR
      ,A.ACCRUED_INT_AM
      ,A.DEFERRED_INT_AM
      ,A.LS_INT_AM
      ,A.OPEN_BAL_AM
      ,A.CTD_CR_BAL_AM
      ,A.L2SP_CTD_CR_BAL_AM
      ,A.L2SP_CTD_CI_DR_BAL_AM
      ,A.CTD_TXN_BAL_AM
FROM CC_COBRA.CC_ACCOUNT_FEATURE_DAILY A 
JOIN CC_COBRA.C01J20_SAMPLE B 
ON A.AGRMNT_ID = B.AGRMNT_ID 
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

DELETE FROM CC_COBRA.CC_ACC_FEATURE_CTD_CUML_SAMP 
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.CC_ACC_FEATURE_CTD_CUML_SAMP 
SELECT A.*
FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML A 
JOIN CC_COBRA.C01J20_SAMPLE B 
ON A.AGRMNT_ID = B.AGRMNT_ID 
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


/* FROM HERE - CODE ONLY RUNS MONTHLY*/

SELECT * FROM CC_COBRA.WK_C01J20_REPORT_DATE WHERE MONTH_END_FLAG = 1;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPMONTHEND;


/*STEP E: AGGREGATE INTEREST FOR MATCHING FOR ENTIRE MONTH*/

/*
CREATE TABLE CC_COBRA.WK_C01J20_T3_INT_TXNS_AGG (
 AGRMNT_ID INTEGER
,FEATUR_ID INTEGER
,REPORT_DT DATE FORMAT 'YYYY-MM-DD'
,BILLED_ACC_INT_AM DECIMAL(15,2)
,BILLED_DEF_INT_AM DECIMAL(15,2)
,ADJMNT_INT_AM DECIMAL(15,2)
) PRIMARY INDEX (AGRMNT_ID);
*/


DELETE FROM CC_COBRA.WK_C01J20_T3_INT_TXNS_AGG;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.WK_C01J20_T3_INT_TXNS_AGG
SELECT A.AGRMNT_ID
      ,A.FEATUR_ID
      ,A.SOURCE_START_DT
      ,SUM(CASE WHEN A.EVENT_ACTVTY_CD = '00505101' THEN EVENT_AM ELSE 0 END) AS ACC_INT
      ,SUM(CASE WHEN A.EVENT_ACTVTY_CD = '00505125' THEN EVENT_AM ELSE 0 END) AS DEF_INT
      ,SUM(CASE WHEN A.EVENT_ACTVTY_CD IN ('00505101','00505125') THEN 0 ELSE EVENT_AM END) AS ADJ_INT

FROM CC_COBRA.CC_INTEREST_TXNS A
JOIN CC_COBRA.WK_C01J20_REPORT_DATE B
ON   A.SOURCE_START_DT/100 = B.REPORT_DT/100
GROUP BY 1,2,3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J20_T3_INT_TXNS_AGG INDEX( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


/*STEP F - DETERMINE THE BILLED SPLIT - THIS RESTATES THE ENTIRE MONTH DAILY*/

/*
CREATE SET TABLE CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY 
     (
      AGRMNT_ID INTEGER,
      FEATUR_ID INTEGER COMPRESS 1002171247 ,
      REPORT_MTH DATE FORMAT 'YYYY-MM-DD' COMPRESS (DATE '2019-07-01',DATE '2019-08-01',DATE '2019-09-01',DATE '2019-10-01'),
      CYCLE_END_FLAG BYTEINT COMPRESS(0,1),
      DEFERRED_INT_AM DECIMAL(15,2) COMPRESS 0.00 ,
      BILLED_ACC_INT_AM DECIMAL(15,2) COMPRESS 0.00,
      BILLED_DEF_INT_AM DECIMAL(15,2) COMPRESS 0.00,
      ADJMNT_INT_AM DECIMAL(15,2) COMPRESS 0.00,
      BILLED_CTD_ACC_INT DECIMAL(15,2) COMPRESS 0.00,
      BILLED_STM_ACC_INT DECIMAL(15,2) COMPRESS 0.00
      )
PRIMARY INDEX ( AGRMNT_ID );
*/

DELETE FROM CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY WHERE REPORT_MTH/100 = (SELECT REPORT_DT/100 FROM CC_COBRA.WK_C01J20_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY 
SELECT
	T1.AGRMNT_ID
,	T1.FEATUR_ID
,	T1.REPORT_DT-EXTRACT(DAY FROM T1.REPORT_DT)+1 AS REPORT_MTH
,   MAX(T1.CYCLE_END_FLAG) AS MAX_CE_FLAG
,   SUM(DEF_INT_AM) AS DEF_INT_AM
,	SUM(BILLED_ACC) AS BILLED_ACC
,	SUM(BILLED_DEF) AS BILLED_DEF
,	SUM(BILLED_ADJ) AS BILLED_ADJ
,	SUM(BILLED_CTD_ACCRUED_INT) AS BILLED_CTD_ACC_INT
,	SUM(BILLED_STM_ACC_INT) AS  BILLED_STM_ACC_INT

FROM
(
SELECT
	A.AGRMNT_ID
,	A.FEATUR_ID
,	A.REPORT_DT
,   CYCLE_END_FLAG 
,   ZEROIFNULL(CASE WHEN A.CYCLE_END_FLAG = 1 THEN A.DEFERRED_INT_AM ELSE 0 END) AS DEF_INT_AM
,	ZEROIFNULL(I.BILLED_ACC_INT_AM)*-1 AS BILLED_ACC
,	ZEROIFNULL(I.BILLED_DEF_INT_AM)*-1 AS BILLED_DEF
,	ZEROIFNULL(I.ADJMNT_INT_AM)*-1 AS BILLED_ADJ
,	ZEROIFNULL(CASE WHEN A.CYCLE_END_FLAG = 1 
            AND A.DEFERRED_INT_AM > 0 
         THEN 0 --IF DEFERRED IS POPULATED THEN THIS CTD ACC INT MUST BE 0
         WHEN A.CYCLE_END_FLAG = 1 AND BILLED_ACC > 0
         THEN A.CALC_CUML_CTD_ACC_INT
         ELSE 0 END) AS BILLED_CTD_ACCRUED_INT
,	ZEROIFNULL(CASE WHEN A.CYCLE_END_FLAG = 1  AND BILLED_ACC > 0 
            AND A.CALC_CUML_STM_ACC_INT-BILLED_DEF <= (BILLED_ACC-BILLED_CTD_ACCRUED_INT)
         THEN A.CALC_CUML_STM_ACC_INT-BILLED_DEF --THIS REMOVES THE DEFERRED ELEMENT FROM TEH CALCULATION IN THE CC_ACCOUNT_FEATURE_CTD_CUML TABLE
         WHEN A.CYCLE_END_FLAG = 1  AND BILLED_ACC > 0  
         THEN BILLED_ACC-BILLED_CTD_ACCRUED_INT
         ELSE BILLED_ACC
         END) AS  BILLED_STM_ACC_INT

FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML A
JOIN CC_COBRA.WK_C01J20_T3_INT_TXNS_AGG I
ON   A.AGRMNT_ID = I.AGRMNT_ID
AND  A.FEATUR_ID = I.FEATUR_ID
AND  A.REPORT_DT = I.REPORT_DT ) T1
GROUP BY 1,2,3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*INSERT WHERE NO BILLINGS*/

INSERT INTO CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY 
SELECT
	A.AGRMNT_ID
,	A.FEATUR_ID
,	A.REPORT_DT-EXTRACT(DAY FROM A.REPORT_DT)+1 AS REPORT_MTH
,   MAX(CYCLE_END_FLAG )
,   SUM(ZEROIFNULL(CASE WHEN A.CYCLE_END_FLAG = 1 THEN A.DEFERRED_INT_AM ELSE 0 END)) AS DEF_INT_AM
,	SUM(0) AS BILLED_ACC
,	SUM(0) AS BILLED_DEF
,	SUM(0) AS BILLED_ADJ
,	SUM(0) AS BILLED_CTD_ACCRUED_INT
,	SUM(0) AS BILLED_STM_ACC_INT


FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML A
JOIN CC_COBRA.WK_C01J20_REPORT_DATE D
ON   A.REPORT_DT/100 = D.REPORT_DT/100
WHERE CYCLE_END_FLAG = 1
AND NOT EXISTS (
SELECT NULL 
FROM CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY B
WHERE   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.FEATUR_ID = B.FEATUR_ID
AND  A.REPORT_DT/100 = B.REPORT_MTH/100)
GROUP BY 1,2,3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


/*STEP G - FOR NON CYCLE DAYS INSERT ACTUAL CONVERSION AMOUNTS WHERE THE DATA IS AVAILABLE*/

/*
CREATE SET TABLE CC_COBRA.WK_C01J20_CONV_REPORT_DATE ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      REPORT_DT DATE FORMAT 'YY/MM/DD',
      REPORT_MTH DATE FORMAT 'YY/MM/DD',
      IM1_REPORT_MTH DATE FORMAT 'YY/MM/DD',
      IM2_REPORT_MTH DATE FORMAT 'YY/MM/DD',
      STATUS CHAR(1) COMPRESS ('C','I','P')
     )
UNIQUE PRIMARY INDEX ( REPORT_DT )
;
*/

DELETE FROM CC_COBRA.WK_C01J20_CONV_REPORT_DATE ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.WK_C01J20_CONV_REPORT_DATE
SELECT A.REPORT_DT
      ,(A.REPORT_DT-EXTRACT(DAY FROM A.REPORT_DT)+1) AS REPORT_MONTH 
      ,ADD_MONTHS((A.REPORT_DT-EXTRACT(DAY FROM A.REPORT_DT)+1),1) AS IM1
      ,ADD_MONTHS((A.REPORT_DT-EXTRACT(DAY FROM A.REPORT_DT)+1),2) AS IM2
      ,CASE WHEN D.REPORT_DT/100 = IM2/100 THEN 'C'
            WHEN D.REPORT_DT/100 = IM1/100 THEN 'P'
            WHEN D.REPORT_DT/100 = REPORT_MONTH/100 THEN 'I' END AS STATUS
FROM CC_COBRA.CC_FD_REPORT_CONTROL A
JOIN CC_COBRA.WK_C01J20_REPORT_DATE D
ON   A.REPORT_DT/100 BETWEEN ADD_MONTHS((D.REPORT_DT-EXTRACT(DAY FROM D.REPORT_DT)+1),-2)/100 AND D.REPORT_DT/100
WHERE (
NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_FD_CYCLE_CALENDAR B
WHERE B.BILLNG_CYCLE_NO BETWEEN 1 AND 26
AND   A.REPORT_DT = B.SOURCE_START_DT)
OR EXISTS (
SELECT NULL
FROM (SELECT REPORT_DT FROM CC_COBRA.CC_FD_REPORT_CONTROL WHERE WORKDAYS_FROM_ME = 0) K --ALWAYS PICK UP LAST WORKING DAY OF MONTH
WHERE   A.REPORT_DT = K.REPORT_DT)
)
AND   TRIM(EXTRACT(MONTH FROM A.REPORT_DT))||TRIM(EXTRACT(DAY FROM A.REPORT_DT)) <> '1225' --EXCLUDE XMAS DAY AS WELL
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J20_CONV_REPORT_DATE INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

SELECT * FROM CC_COBRA.WK_C01J20_CONV_REPORT_DATE;

/*
CREATE TABLE CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV (
REPORT_DT DATE
, ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195','180')
, CREDIT_CARD_LOGO_CD SMALLINT COMPRESS (514 ,520 ,524 ,530 ,540 ,300 ,301 ,304 ,314 ,315 ,320 ,584 ,330 ,331 ,332 ,333 ,334 ,338 ,340 ,344 ,350 ,354 ,355 ,100 ,110 ,380 ,900 ,500 ,505 )
, AGRMNT_ID INT
, FEATUR_ID INT
, PLAN_NO INTEGER COMPRESS (15108 ,15109 ,15110 ,15111 ,15112 ,10001 ,10002 ,10003 ,10004 ,15124 ,10005 ,10008 ,10018 ,30000 ,30001 ,30003 ,30004 ,60212 ,30005 ,30006 ,30012 ,30015 ,30017 ,30021 ,30022 ,50005 ,50006 ,50007 ,60002 ,50023 ,60014 ,60016 ,60018 ,60022 ,50045 ,50057 ,50073 ,15004 ,15005 ,15007 ,15009 ,15013 ,15014 ,15023 ,15026 ,15028 ,15030 ,15031 ,15035 ,15038 ,15048 ,60104 ,34006 ,60129 ,60131 ,15076 ,60133 ,60138 ,15092 ,15094 ,11001 ,11002 ,11005 )  
, BILLNG_CYCLE_NO SMALLINT COMPRESS (1 ,2 ,4 ,5 ,6 ,7 ,8 ,9 ,11 ,15 ,17 ,18 ,20 ,25 ,26 )
, NEW_BALANC_TYPE_CD CHAR(6) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('BHRDSP','BIBB  ','BIMPRD','BZIBB ','CHRDSP','CIBB  ','CIMPRD','IHRDSP','IIBB  ','IIMPRD','ISTAT ','IZIBB ','MHRDSP','MIBB  ','MIMPRD','MZIBB ','PHRDSP','PIBB  ','PIMPRD','PZIBB ','RHRDSP','RIBB  ','RIMPRD','RNIBB ','ZZZZZZ')
, ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0
, STM_ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0
, CTD_ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0
, DEFERRED_INT_AM DECIMAL(15,2) COMPRESS 0
, ADJ_DEFERRED_INT_AM DECIMAL(15,2) COMPRESS 0
, CONV_STM_ACC_INT_AM DECIMAL(15,2) COMPRESS 0
, CONV_CTD_ACC_INT_M1_AM DECIMAL(15,2) COMPRESS 
, CONV_CTD_ACC_INT_M2_AM DECIMAL(15,2) COMPRESS 0
, CONV_ADJ_DEF_INT_AM DECIMAL(15,2) COMPRESS 0
) PRIMARY INDEX (AGRMNT_ID);
*/
      
DELETE FROM CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV WHERE REPORT_DT IN 
(SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_CONV_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*FIRST INSERT ALL BUT PREFERENCE ACCOUNTS*/
      
INSERT INTO CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV
SELECT 
A.REPORT_DT
,D.ORG_TX
,D.CREDIT_CARD_LOGO_CD
,A.AGRMNT_ID
,A.FEATUR_ID
,A.PLAN_NO
,A.BILLNG_CYCLE_NO
,L.NEW_BALANC_TYPE_CD
,A.CALC_ACCRUED_INT_AM --ON NON CYCLING DAYS THIS SHOULD MATCH THE FD REPORTS - ON CYCLE DAYS THIS HAS BEEN ADJUSTED TO ACCOUNT FOR PRE-CYCLE POSITION
,A.CALC_CUML_STM_ACC_INT
,A.CALC_CUML_CTD_ACC_INT
,A.DEFERRED_INT_AM --ON NON CYCLING DAYS THIS SHOULD MATCH THE FD REPORTS - ON CYCLE DAYS THIS HAS BEEN ADJUSTED TO ACCOUNT FOR PRE-CYCLE POSITION, FOR PURGED PLANS ONLY
,A.ADJ_DEF_INT
,CASE WHEN A.CALC_CUML_STM_ACC_INT > 0 AND IM1.BILLED_STM_ACC_INT > 0 AND IM1.BILLED_STM_ACC_INT >= A.CALC_CUML_STM_ACC_INT THEN A.CALC_CUML_STM_ACC_INT --ALL OF THE STM_ACC_INT IS REAL
      WHEN A.CALC_CUML_STM_ACC_INT > 0 AND IM1.BILLED_STM_ACC_INT > 0 AND IM1.BILLED_STM_ACC_INT < A.CALC_CUML_STM_ACC_INT THEN IM1.BILLED_STM_ACC_INT  --ONLY A PORTION OF THE STM_ACC_INT IS REAL
      ELSE 0 END AS CONV_STM_ACC_INT_AM
,CASE WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND IM1.BILLED_CTD_ACC_INT > 0 AND IM1.BILLED_CTD_ACC_INT >= A.CALC_CUML_CTD_ACC_INT THEN A.CALC_CUML_CTD_ACC_INT --ALL OF THE CTD_ACC_INT IS REALISED IN THE NEXT MONTH
      WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND IM1.BILLED_CTD_ACC_INT > 0 AND IM1.BILLED_CTD_ACC_INT < A.CALC_CUML_CTD_ACC_INT THEN IM1.BILLED_CTD_ACC_INT  --ONLY A PORTION OF THE CTD_ACC_INT IS REALISED IN THE NEXT MONTH
      ELSE 0 END AS CONV_CTD_ACC_INT_M1_AM
,CASE WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND IM1.DEFERRED_INT_AM > 0    AND IM2.BILLED_DEF_INT_AM > 0 AND IM2.BILLED_DEF_INT_AM >= A.CALC_CUML_CTD_ACC_INT THEN A.CALC_CUML_CTD_ACC_INT --ALL OF THE CTD_ACC_INT IS REALISED IN THE MONTH AFTER NEXT
      WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND IM1.DEFERRED_INT_AM > 0    AND IM2.BILLED_DEF_INT_AM > 0 AND IM2.BILLED_DEF_INT_AM < A.CALC_CUML_CTD_ACC_INT THEN IM2.BILLED_DEF_INT_AM --ONLY A PORTION OF THE CTD_ACC_INT IS REALISED IN THE MONTH AFTER NEXT
      ELSE 0 END AS CONV_CTD_ACC_INT_M2_AM
,CASE WHEN A.ADJ_DEF_INT > 0 AND IM1.BILLED_DEF_INT_AM > 0 AND IM1.BILLED_DEF_INT_AM >= A.ADJ_DEF_INT THEN A.ADJ_DEF_INT --ALL OF THE ADJ_DEF_INT IS REAL
      WHEN A.ADJ_DEF_INT > 0 AND IM1.BILLED_DEF_INT_AM > 0 AND IM1.BILLED_DEF_INT_AM < A.ADJ_DEF_INT THEN IM1.BILLED_DEF_INT_AM --PORTION OF THE ADJ_DEF_INT IS REAL (THIS SHOULDN'T EVER BE MET)
      ELSE 0 END AS CONV_ADJ_DEF_INT_AM

FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML A
JOIN CC_COBRA.WK_C01J20_CONV_REPORT_DATE DC
ON   A.REPORT_DT = DC.REPORT_DT
JOIN CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE L
ON   A.AGRMNT_ID = L.AGRMNT_ID
AND  A.FEATUR_ID = L.FEATUR_ID
AND  A.REPORT_DT BETWEEN L.SOURCE_START_DT AND L.SOURCE_END_DT-1
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE D
ON   A.AGRMNT_ID = D.AGRMNT_ID
AND  D.CREDIT_CARD_LOGO_CD <> 505 --EXCLUDE PREFERENCE
LEFT JOIN CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY IM1
ON   A.AGRMNT_ID = IM1.AGRMNT_ID
AND  A.FEATUR_ID = IM1.FEATUR_ID
AND  DC.IM1_REPORT_MTH = IM1.REPORT_MTH
LEFT JOIN CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY IM2
ON   A.AGRMNT_ID = IM2.AGRMNT_ID
AND  A.FEATUR_ID = IM2.FEATUR_ID
AND  DC.IM2_REPORT_MTH = IM2.REPORT_MTH
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*CREATE WORK TABLE FOR PREFERENCE BILLING DATES FOR DEFERRED INT TO DECREASE SPOOL SPACE REQUIREMENT*/

/*
CREATE TABLE CC_COBRA.WK_C01J20_PREF_INT_CALENDAR (
      BILLNG_CYCLE_NO SMALLINT,
      STTMNT_MTH DATE FORMAT 'YYYY/MM/DD',
      PIC DATE FORMAT 'YYYY/MM/DD', 
      PIC_MTH DATE  FORMAT 'YYYY/MM/DD')
PRIMARY INDEX(BILLNG_CYCLE_NO);
*/

DELETE FROM CC_COBRA.WK_C01J20_PREF_INT_CALENDAR ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO CC_COBRA.WK_C01J20_PREF_INT_CALENDAR
SELECT 
BILLNG_CYCLE_NO
,STTMNT_MTH
,CASE WHEN DAY_NO IN (5,6,7) THEN STTMNT_DT+15 --WHEN STTMNT IS ON A SUNDAY THE PDD WILL BE 15 DAYS AFTER
      ELSE STTMNT_DT+14 END AS PIC --PREFERENCE INT CHARGED DT
,PIC-EXTRACT(DAY FROM PIC) + 1 AS PIC_MTH --PREFERENCE INT CHARGED MONTH FOR CTD INTEREST
FROM CC_COBRA.CC_FD_CYCLE_CALENDAR T1
WHERE T1.STTMNT_MTH IN (SELECT IM1_REPORT_MTH FROM CC_COBRA.WK_C01J20_CONV_REPORT_DATE)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.WK_C01J20_PREF_INT_CALENDAR INDEX(BILLNG_CYCLE_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


/*SEPERATE CODE FOR PREFERENCE ACCOUNTS*/
/*THESE ACCOUNTS ARE BILLED DEFERRED INT 14 DAYS AFTER STATEMENT DATE*/
      
INSERT INTO CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV
SELECT 
A.REPORT_DT
,D.ORG_TX
,D.CREDIT_CARD_LOGO_CD
,A.AGRMNT_ID
,A.FEATUR_ID
,A.PLAN_NO
,A.BILLNG_CYCLE_NO
,L.NEW_BALANC_TYPE_CD
,A.CALC_ACCRUED_INT_AM --ON NON CYCLING DAYS THIS SHOULD MATCH THE FD REPORTS - ON CYCLE DAYS THIS HAS BEEN ADJUSTED TO ACCOUNT FOR PRE-CYCLE POSITION
,A.CALC_CUML_STM_ACC_INT
,A.CALC_CUML_CTD_ACC_INT
,A.DEFERRED_INT_AM --ON NON CYCLING DAYS THIS SHOULD MATCH THE FD REPORTS - ON CYCLE DAYS THIS HAS BEEN ADJUSTED TO ACCOUNT FOR PRE-CYCLE POSITION, FOR PURGED PLANS ONLY
,A.ADJ_DEF_INT
,0 AS CONV_STM_ACC_INT_AM --NOTE PREFERENCE IS ONLY EVER BILLED DEFERRED INTEREST
,CASE WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND DC.IM1_REPORT_MTH = PIC.PIC_MTH AND A.DEFERRED_INT_AM = 0 AND IM1.BILLED_DEF_INT_AM > 0 AND IM1.BILLED_DEF_INT_AM >= A.CALC_CUML_CTD_ACC_INT THEN A.CALC_CUML_CTD_ACC_INT --ALL OF THE CTD_ACC_INT IS REALISED IN THE NEXT MONTH
      WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND DC.IM1_REPORT_MTH = PIC.PIC_MTH AND A.DEFERRED_INT_AM = 0 AND IM1.BILLED_DEF_INT_AM > 0 AND IM1.BILLED_DEF_INT_AM < A.CALC_CUML_CTD_ACC_INT THEN IM1.BILLED_DEF_INT_AM --ONLY A PORTION OF THE CTD_ACC_INT IS REALISED IN THE NEXT MONTH
      ELSE 0 END AS CONV_CTD_ACC_INT_M1_AM --THIS WILL APPLY TO MOSTLY CYCLES 1-14
,CASE WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND DC.IM2_REPORT_MTH = PIC.PIC_MTH AND IM2.BILLED_DEF_INT_AM > 0 AND IM2.BILLED_DEF_INT_AM >= A.CALC_CUML_CTD_ACC_INT THEN A.CALC_CUML_CTD_ACC_INT --ALL OF THE CTD_ACC_INT IS REALISED IN THE FOLLOWING MONTH
      WHEN A.CALC_CUML_CTD_ACC_INT > 0 AND DC.IM2_REPORT_MTH = PIC.PIC_MTH AND IM2.BILLED_DEF_INT_AM > 0 AND IM2.BILLED_DEF_INT_AM < A.CALC_CUML_CTD_ACC_INT THEN IM2.BILLED_DEF_INT_AM --ONLY A PORTION OF THE CTD_ACC_INT IS REALISED IN THE FOLLOWING MONTH
      ELSE 0 END AS CONV_CTD_ACC_INT_M2_AM --THIS WILL APPLY TO MOSTLY CYCLES 15-26
,CASE WHEN A.ADJ_DEF_INT > 0 AND IM1.BILLED_DEF_INT_AM > 0 AND IM1.BILLED_DEF_INT_AM >= A.ADJ_DEF_INT THEN A.ADJ_DEF_INT --ALL OF THE ADJ_DEF_INT IS REAL
      WHEN A.ADJ_DEF_INT > 0 AND IM1.BILLED_DEF_INT_AM > 0 AND IM1.BILLED_DEF_INT_AM < A.ADJ_DEF_INT THEN IM1.BILLED_DEF_INT_AM --PORTION OF THE ADJ_DEF_INT IS REAL (THIS SHOULDN'T EVER BE MET)
      ELSE 0 END AS CONV_ADJ_DEF_INT_AM --THIS WILL APPLY TO MOSTLY CYCLES 15-26

FROM CC_COBRA.CC_ACCOUNT_FEATURE_CTD_CUML A
JOIN CC_COBRA.WK_C01J20_CONV_REPORT_DATE DC
ON   A.REPORT_DT = DC.REPORT_DT
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE D
ON   A.AGRMNT_ID = D.AGRMNT_ID
AND  D.CREDIT_CARD_LOGO_CD = 505 --ONLY PREFERENCE
JOIN CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE L
ON   A.AGRMNT_ID = L.AGRMNT_ID
AND  A.FEATUR_ID = L.FEATUR_ID
AND  A.REPORT_DT BETWEEN L.SOURCE_START_DT AND L.SOURCE_END_DT-1

--THIS PICKS UP WHEN DEFERRED INT IS BILLED FOR EACH CYCLE
JOIN CC_COBRA.WK_C01J20_PREF_INT_CALENDAR PIC
ON A.BILLNG_CYCLE_NO = PIC.BILLNG_CYCLE_NO
AND DC.IM1_REPORT_MTH = PIC.STTMNT_MTH

LEFT JOIN CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY IM1
ON   A.AGRMNT_ID = IM1.AGRMNT_ID
AND  A.FEATUR_ID = IM1.FEATUR_ID
AND  DC.IM1_REPORT_MTH = IM1.REPORT_MTH
LEFT JOIN CC_COBRA.CC_AGRMNT_FEATUR_INT_SUMMARY IM2
ON   A.AGRMNT_ID = IM2.AGRMNT_ID
AND  A.FEATUR_ID = IM2.FEATUR_ID
AND  DC.IM2_REPORT_MTH = IM2.REPORT_MTH
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*STEP H - AGGREGATE DATA*/

/*
CREATE TABLE CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV_AGG (
REPORT_DT DATE
, ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195','180')
, CREDIT_CARD_LOGO_CD SMALLINT COMPRESS (514 ,520 ,524 ,530 ,540 ,300 ,301 ,304 ,314 ,315 ,320 ,584 ,330 ,331 ,332 ,333 ,334 ,338 ,340 ,344 ,350 ,354 ,355 ,100 ,110 ,380 ,900 ,500 ,505 )
, BILLNG_CYCLE_NO SMALLINT COMPRESS (1 ,2 ,4 ,5 ,6 ,7 ,8 ,9 ,11 ,15 ,17 ,18 ,20 ,25 ,26 )
, NEW_BALANC_TYPE_CD CHAR(6) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('BHRDSP','BIBB  ','BIMPRD','BZIBB ','CHRDSP','CIBB  ','CIMPRD','IHRDSP','IIBB  ','IIMPRD','ISTAT ','IZIBB ','MHRDSP','MIBB  ','MIMPRD','MZIBB ','PHRDSP','PIBB  ','PIMPRD','PZIBB ','RHRDSP','RIBB  ','RIMPRD','RNIBB ','ZZZZZZ')
, ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0
, STM_ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0
, CTD_ACCRUED_INT_AM DECIMAL(15,2) COMPRESS 0
, DEFERRED_INT_AM DECIMAL(15,2) COMPRESS 0
, ADJ_DEFERRED_INT_AM DECIMAL(15,2) COMPRESS 0
, CONV_STM_ACC_INT_AM DECIMAL(15,2) COMPRESS 0
, CONV_CTD_ACC_INT_M1_AM DECIMAL(15,2) COMPRESS 0
, CONV_CTD_ACC_INT_M2_AM DECIMAL(15,2) COMPRESS 0
, CONV_ADJ_DEF_INT_AM DECIMAL(15,2) COMPRESS 0
) PRIMARY INDEX (REPORT_DT);
*/

DELETE FROM CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV_AGG WHERE REPORT_DT IN 
(SELECT REPORT_DT FROM CC_COBRA.WK_C01J20_CONV_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

INSERT INTO  CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV_AGG
SELECT
 A.REPORT_DT
, A.ORG_TX 
, CREDIT_CARD_LOGO_CD
, BILLNG_CYCLE_NO 
, NEW_BALANC_TYPE_CD 
, SUM(ACCRUED_INT_AM)
, SUM(STM_ACCRUED_INT_AM) 
, SUM(CTD_ACCRUED_INT_AM)
, SUM(DEFERRED_INT_AM)
, SUM(ADJ_DEFERRED_INT_AM) 
, SUM(CONV_STM_ACC_INT_AM)
, SUM(CONV_CTD_ACC_INT_M1_AM) 
, SUM(CONV_CTD_ACC_INT_M2_AM)
, SUM(CONV_ADJ_DEF_INT_AM)
FROM  CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV A
JOIN  CC_COBRA.WK_C01J20_CONV_REPORT_DATE DC
ON    A.REPORT_DT = DC.REPORT_DT
GROUP BY 1,2,3,4,5;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

COLLECT STATS ON CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV_AGG;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR


.LABEL SKIPMONTHEND;

/*CLEAR WORK TABLES*/

DELETE FROM CC_COBRA.WK_C01J20_T1_PD ALL;
DELETE FROM CC_COBRA.WK_C01J20_T3_INT_TXNS_AGG ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR

/*SELECT FOR XL*/
/*
SELECT ORG_TX
, NEW_BALANC_TYPE_CD 
, SUM(ACCRUED_INT_AM)
, SUM(STM_ACCRUED_INT_AM) 
, SUM(CTD_ACCRUED_INT_AM)
, SUM(DEFERRED_INT_AM)
, SUM(ADJ_DEFERRED_INT_AM) 
, SUM(CONV_STM_ACC_INT_AM)
, SUM(CONV_CTD_ACC_INT_M1_AM) 
, SUM(CONV_CTD_ACC_INT_M2_AM)
, SUM(CONV_ADJ_DEF_INT_AM)
FROM CC_COBRA.CC_AGRMNT_FEATUR_INT_CONV_AGG
*/

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'C01J20'
;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J20';

.QUIT 0;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'C01J20'
;

.QUIT 0;

