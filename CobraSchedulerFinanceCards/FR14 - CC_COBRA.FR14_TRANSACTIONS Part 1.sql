/************************************************************************/
/*JOB:      FR14 - Part 1 CC_COBRA.FR14_TRANSACTIONS                    */
/*          PAYMENTS AND CHARGE OFFS BY PLAN NO                         */
/*VERSION:  FR14 Part 1v15 increase tolerance                           */
/*DATE VERSION IMPLEMENTED: 2022-02-23                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/*C01J04                                                                */
/*C01J07                                                                */
/*FR09                                                                  */
/*C01J11                                                                */
/************************************************************************/
/*PART 1*/
.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

--.GOTO FOUNDERROR;

/*SECTION 1: LOAD CHECKS*/

/*STEP 01: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_EVENTS_TO_EXCLUDE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF CC_BT_OUT_CNFRMD_TRANSACTION IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J07';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF FR09 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR09';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF C01J11 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J11';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF C01J11 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_REF_DATA_LIVE_SYNC
WHERE TABLE_NM = 'STEP 06: CC_COBRA.CC_PLAN_LOOKUP FULL'
AND SYNC_IN = 'Y'
;
.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;



/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR14';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;


/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR14'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 02: SET UP DATE CONTROL - THIS JUST MOVES THE DATE ON ONE BUSINESS DAY*/

UPDATE CC_COBRA.WK_FR14_DATE_CONTROL
FROM 
(SELECT SOURCE_START_DT , B.PRIOR_WORKDAY_DT
FROM CC_COBRA.CC_COBRA_LOAD_START_DT A
JOIN CC_COBRA.GRID_REPORTS_CONTROL B
ON   A.SOURCE_START_DT = B.CALENDAR_DATE
) A
SET REPORT_DT = A.SOURCE_START_DT
   ,PRIOR_REPORT_DT = A.PRIOR_WORKDAY_DT   
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR14_DATE_CONTROL;

COLLECT STATS ON CC_COBRA.WK_FR14_DATE_CONTROL  INDEX (REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CHECK CC_WK_FR14_RUN_STATUS TO SEE IF WE NEED TO SKIP PART 1 BECAUSE IT ALREADY RAN SUCCESSFULLY*/
/*
  1= PART 1 IN PROGRESS
  P= PART 1 COMPLETED
  2= PART 2 IN PROGRESS
  C= PART 2 COMPLETED
*/

SELECT * FROM CC_COBRA.CC_WK_FR14_RUN_STATUS 
WHERE STATUS IN ('P','2') 
AND STATUS_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL);

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*FLAG START TIME*/

DELETE FROM CC_COBRA.WK_FR14_DATE_CONTROL_LOG WHERE REPORT_DT = (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.WK_FR14_DATE_CONTROL_LOG
SELECT 
REPORT_DT
,DATE
,TIME
,NULL
,NULL
FROM CC_COBRA.WK_FR14_DATE_CONTROL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE FR14 RUN STATUS - PART 1 START*/

/*
  1= PART 1 IN PROGRESS
  P= PART 1 COMPLETED
  2= PART 2 IN PROGRESS
  C= PART 2 COMPLETED
*/

UPDATE CC_COBRA.CC_WK_FR14_RUN_STATUS 
FROM CC_COBRA.WK_FR14_DATE_CONTROL 
SET STATUS = '1'
,   STATUS_DT = CC_COBRA.WK_FR14_DATE_CONTROL.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_WK_FR14_RUN_STATUS INDEX (STATUS);

/*STEP 03: GET ANY NEW PRODUCTS*/

INSERT INTO CC_COBRA.FR14_PRODUCT_SCHEME
SELECT 
A.ORG_TX
,A.LOGO_VL
,A.PRODCT_NM
,CASE WHEN A.SCHEME = 'E' THEN 'M' ELSE A.SCHEME END AS SCHEME
FROM
(
SEL	CPL.ORG_TX,
	CPL.LOGO_VL,
	P.PRODCT_NM,
	SUBSTRING (PF.PRODCT_FEATUR_NO FROM 1 FOR 1) AS SCHEME
FROM GDW_VIEWS.PRODUCT P		
JOIN GDW_VIEWS.CC_PRODUCT_LOOKUP CPL		
ON P.PRODCT_ID = CPL.PRODCT_ID		
AND P.SOURCE_END_DT = '3500/12/31'		
JOIN GDW_VIEWS.PRODUCT_FEATURE PF		
ON PF.PRODCT_ID = CPL.PRODCT_ID		
AND PF.FEATUR_ID = 4612			
) A
WHERE NOT EXISTS (SELECT NULL
                  FROM  CC_COBRA.FR14_PRODUCT_SCHEME B
                  WHERE A.LOGO_VL = B.LOGO_VL
                  AND   A.ORG_TX = B.ORG_TX)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PRODUCT_SCHEME INDEX(LOGO_VL);

/*SECTION 2 - ACCOUNT BALANCE & TRANSACTIONS*/

/*STEP 04: GET BALANCE*/

DELETE FROM CC_COBRA.WK_FR14_BALANCE ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CHECK TO SEE IF WE CAN USE DATA FROM C01J15*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIP01;

INSERT INTO CC_COBRA.WK_FR14_BALANCE
SELECT 
CCA.ORG_TX
,CCA.AGRMNT_ID
,DT.REPORT_DT 
,DT.PRIOR_REPORT_DT
,CASE WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT  THEN 'P'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,AD.INT_STATUS 
,COALESCE(CCA.PURGED_DT,ASS.SOURCE_START_DT)
,COALESCE(ADP.INT_STATUS ,' ')
,COALESCE(ADP.ACCONT_BALANC_AM,0) AS OPENING_BAL
,COALESCE(AD.ACCONT_BALANC_AM,0) AS CLOSING_BAL
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
JOIN CC_COBRA.WK_FR14_DATE_CONTROL DT
ON   CCA.ADDED_DT <= DT.REPORT_DT
AND  (CCA.PURGED_DT IS NULL OR DT.REPORT_DT < CCA.PURGED_DT)
JOIN CC_COBRA.CC_ACCOUNT_DAILY AD
ON   CCA.AGRMNT_ID = AD.AGRMNT_ID
AND  DT.REPORT_DT = AD.REPORT_DT
LEFT JOIN CC_COBRA.CC_ACCOUNT_DAILY ADP
ON   CCA.AGRMNT_ID = ADP.AGRMNT_ID
AND  DT.PRIOR_REPORT_DT = ADP.REPORT_DT
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   CCA.AGRMNT_ID = ASS.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIP02;

.LABEL SKIP01;

INSERT INTO CC_COBRA.WK_FR14_BALANCE
SELECT 
CCA.ORG_TX
,CCA.AGRMNT_ID
,DT.REPORT_DT 
,DT.PRIOR_REPORT_DT
,CASE WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT  THEN 'P'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(CCA.PURGED_DT,ASS.SOURCE_START_DT)
,COALESCE(ASS2.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(BALP.BL_SUMMRY_AM,' ') AS OPENING_BAL
,COALESCE(BAL.BL_SUMMRY_AM,' ') AS CLOSING_BAL
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
JOIN CC_COBRA.WK_FR14_DATE_CONTROL DT
ON   CCA.ADDED_DT <= DT.REPORT_DT
AND  (CCA.PURGED_DT IS NULL OR DT.REPORT_DT < CCA.PURGED_DT)
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   CCA.AGRMNT_ID = ASS.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS2
ON   CCA.AGRMNT_ID = ASS2.AGRMNT_ID
AND  DT.REPORT_DT-1 BETWEEN ASS2.SOURCE_START_DT AND ASS2.SOURCE_END_DT-1
AND  ASS2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BAL
ON    CCA.AGRMNT_ID = BAL.AGRMNT_ID
AND   BAL.BL_SUMMRY_AM_CD = '00500003'
AND   DT.REPORT_DT BETWEEN BAL.SOURCE_START_DT AND BAL.SOURCE_END_DT-1
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BALP
ON    CCA.AGRMNT_ID = BALP.AGRMNT_ID
AND   BALP.BL_SUMMRY_AM_CD = '00500003'
AND   DT.REPORT_DT-1 BETWEEN BALP.SOURCE_START_DT AND BALP.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIP02;

COLLECT STATS ON CC_COBRA.WK_FR14_BALANCE INDEX (AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/****************************ERRONEOUS TXN FIX****************************/
/*THIS STEP CORRECTS THE CLOSING/OPENING BALANCE FOR THE ACCOUNT AFFECTED*/
/*************************************************************************/

/*CODE FOR THE DAY OF ERROR*/
/*
UPDATE CC_COBRA.WK_FR14_BALANCE
SET CLOSNG_BL = -146.28         --SET BALANCE TO EQUAL THE PRIOR DAY BEFORE THE ERROR, ASSUMING NO OTHER TRANSACTIONS TO TAKE INTO ACCOUNT ON DAY OF ERROR
WHERE AGRMNT_ID = 1041730651    --SET TO EQUAL THE AFFECTED AGRMNT_ID
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
*/
/*CODE FOR THE DAY AFTER ERROR*/

/*
UPDATE CC_COBRA.WK_FR14_BALANCE
SET OPENNG_BL = -146.28         --SET BALANCE TO EQUAL THE PRIOR DAY BEFORE THE ERROR, ASSUMING NO OTHER TRANSACTIONS TO TAKE INTO ACCOUNT ON DAY OF ERROR
   ,CLOSNG_BL = -119.73         --SET BALANCE TO EQUAL THE CORRECTED OPENING BALANCE PLUS TXNS THAT ARE NOT PROBLEMATIC
WHERE AGRMNT_ID = 1041730651    --SET TO EQUAL THE AFFECTED AGRMNT_ID
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
*/

/****************************ERRONEOUS TXN FIX****************************/


/*STEP 05: GET ALL TRANSACTIONS FOR DAY'S PROCESSING*/

/*STEP 05A: GET TRANSACTIONS*/

DELETE FROM CC_COBRA.WK_FR14_TXNS_T1 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO  CC_COBRA.WK_FR14_TXNS_T1
SELECT     MT.AGRMNT_ID
          ,MT.EVENT_ACTVTY_CD
          ,COALESCE((CASE 
                       WHEN C.TRNSCN_DERVTN_GRP = 'RETAIL' AND MRCHNT_DS LIKE ANY ('%SENTINEL GOLD%','%FER OF SENTINEL%','%SENTINEL CARD%') THEN 'SENTINEL'
                       WHEN C.TRNSCN_DERVTN_GRP = 'RETAIL' AND MRCHNT_DS LIKE '%PRIVACY%' AND MRCHNT_DS LIKE '%GUARD%' THEN 'PRIVACY GUARD'
                       ELSE C.TRNSCN_DERVTN_GRP END), 'UNKNOWN') 
          ,MT.EVENT_AM
          ,MT.EVENT_ID  
          ,DC.REPORT_DT
          ,CASE 
             WHEN MT.TRNSCN_CRRNCY_CD IS NULL
              THEN 'D'
             WHEN MT.TRNSCN_CRRNCY_CD IN ('GBP','826')
              THEN 'D'
             WHEN MT.TRNSCN_CRRNCY_CD IN ('EUR','978' -- Euro
                                         ,'BGN','975' -- Bulgarian lev
                                         ,'CZK','203' -- Czech koruna
                                         ,'DKK','208' -- Danish krone, Faeroe Islands, Greenland
                                         ,'EEK','233' -- Estonian kroon
                                         ,'GIP','292' -- Gibraltar pound
                                         ,'HUF','348' -- Hungarian forint
                                         ,'ISK','352' -- Iceland
                                         ,'ILS','376' -- Israel
                                         ,'CHF','756' -- Liechtenstein
                                         ,'LTL','440' -- Lithuanian litas
                                         ,'LVL','428' -- Latvian lats
                                         ,'NOK','578' -- Norway
                                         ,'PLN','985' -- Polish Zloty
                                         ,'RON','946' -- Romanian leu
                                         ,'SKK'       -- Slovakia
                                         ,'SIT'       -- Slovenia
                                         ,'SEK','752' -- Swedish krona
                                         ,'CHE','947' -- Switzerland
                                         ,'TRY','949' -- Turkey
                                         )
              THEN 'E'
              ELSE 'F' END
             ,C.REVRSL_IN

FROM 	   CC_COBRA.CC_MONETARY_TRANSACTION_TODAY MT
INNER JOIN CC_COBRA.WK_FR14_DATE_CONTROL DC
ON         MT.SOURCE_START_DT = DC.REPORT_DT
AND       (MT.POSTNG_DT = MT.SOURCE_START_DT
OR         MT.TRNSCN_CATGRY_CD = '005    G')
INNER JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS C
ON         MT.EVENT_ACTVTY_CD = C.EVENT_ACTVTY_CD   
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPFULLTXN;

COLLECT STATS ON CC_COBRA.WK_FR14_TXNS_T1 INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_TXNS_T1 INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 05B: INSERT FROM MAIN TABLE IF FIRST INSERT DOESN'T INSERT ANY RECORDS (WILL SKIP IF IT DOES INSERT RECORDS)*/

INSERT INTO  CC_COBRA.WK_FR14_TXNS_T1
SELECT     MT.AGRMNT_ID
          ,MT.EVENT_ACTVTY_CD
          ,COALESCE((CASE 
                       WHEN C.TRNSCN_DERVTN_GRP = 'RETAIL' AND MRCHNT_DS LIKE ANY ('%SENTINEL GOLD%','%FER OF SENTINEL%','%SENTINEL CARD%') THEN 'SENTINEL'
                       WHEN C.TRNSCN_DERVTN_GRP = 'RETAIL' AND MRCHNT_DS LIKE '%PRIVACY%' AND MRCHNT_DS LIKE '%GUARD%' THEN 'PRIVACY GUARD'
                       ELSE C.TRNSCN_DERVTN_GRP END), 'UNKNOWN') 
          ,MT.EVENT_AM
          ,MT.EVENT_ID  
          ,DC.REPORT_DT
          ,CASE 
             WHEN MT.TRNSCN_CRRNCY_CD IS NULL
              THEN 'D'
             WHEN MT.TRNSCN_CRRNCY_CD IN ('GBP','826')
              THEN 'D'
             WHEN MT.TRNSCN_CRRNCY_CD IN ('EUR','978' -- Euro
                                         ,'BGN','975' -- Bulgarian lev
                                         ,'CZK','203' -- Czech koruna
                                         ,'DKK','208' -- Danish krone, Faeroe Islands, Greenland
                                         ,'EEK','233' -- Estonian kroon
                                         ,'GIP','292' -- Gibraltar pound
                                         ,'HUF','348' -- Hungarian forint
                                         ,'ISK','352' -- Iceland
                                         ,'ILS','376' -- Israel
                                         ,'CHF','756' -- Liechtenstein
                                         ,'LTL','440' -- Lithuanian litas
                                         ,'LVL','428' -- Latvian lats
                                         ,'NOK','578' -- Norway
                                         ,'PLN','985' -- Polish Zloty
                                         ,'RON','946' -- Romanian leu
                                         ,'SKK'       -- Slovakia
                                         ,'SIT'       -- Slovenia
                                         ,'SEK','752' -- Swedish krona
                                         ,'CHE','947' -- Switzerland
                                         ,'TRY','949' -- Turkey
                                         )
              THEN 'E'
              ELSE 'F' END
             ,C.REVRSL_IN

FROM       GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST MT
INNER JOIN CC_COBRA.WK_FR14_DATE_CONTROL DC
ON         MT.SOURCE_START_DT = DC.REPORT_DT
AND       (MT.POSTNG_DT = MT.SOURCE_START_DT
OR         MT.TRNSCN_CATGRY_CD = '005    G')
INNER JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS C
ON         MT.EVENT_ACTVTY_CD = C.EVENT_ACTVTY_CD   
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE E
WHERE MT.EVENT_ID = E.EVENT_ID) 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_TXNS_T1 INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR14_TXNS_T1 INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


.LABEL SKIPFULLTXN;

/****************************ERRONEOUS TXN FIX****************************/
/*THIS STEP REMOVE THE PROBLEMATIC TRANSACTION                           */
/*************************************************************************/
/*
DELETE FROM CC_COBRA.WK_FR14_TXNS_T1 WHERE EVENT_ID =  342693956031 --SET TO THE TRANSACTION ID THAT NEEDS TO BE REMOVED
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
*/
/****************************ERRONEOUS TXN FIX****************************/

/*STEP 05C: GET SCHEME FOR TRANSACTIONS*/

DELETE FROM  CC_COBRA.WK_FR14_TXNS_T2 ALL;

INSERT INTO  CC_COBRA.WK_FR14_TXNS_T2
SELECT A.AGRMNT_ID
      ,A.EVENT_ID
      /*ADJUST FOR DUO MASTERCARD ONLY*/
      ,CASE WHEN S.SCHEME = 'A' AND S.PRODCT_NM LIKE '%DUO%' AND CAST(D.CREDIT_CARD_LOGO_CD/100 AS INT) = 1 THEN S.SCHEME
            WHEN S.SCHEME = 'A' AND S.PRODCT_NM LIKE '%DUO%' THEN 'M' /*FORCE NON-CONFIRMED AMEX TXNS INTO MASTERCARD*/
            ELSE S.SCHEME
       END
      
FROM   CC_COBRA.WK_FR14_TXNS_T1 A
JOIN   GDW_VIEWSX.CREDIT_CARD_AGREEMENT C
ON     A.AGRMNT_ID = C.AGRMNT_ID
AND    C.SOURCE_END_DT = '3500/12/31'
AND    A.TRNSCN_DERVTN_GRP IN ('RETAIL','CASH','QUASI')
JOIN   CC_COBRA.FR14_PRODUCT_SCHEME S
ON     C.CREDIT_CARD_LOGO_CD = S.LOGO_VL
AND    C.ORG_TX = S.ORG_TX
LEFT JOIN   GDW_VIEWSX.CARD_EVENT B
ON     A.EVENT_ID = B.EVENT_ID
LEFT JOIN   GDW_VIEWSX.CARD D
ON     B.CARD_ID = D.CARD_ID
AND    D.SOURCE_END_DT = '3500/12/31';


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_TXNS_T2 INDEX(EVENT_ID);

/*STEP 05D: JOIN ALL DATA TOGETHER*/

DELETE FROM CC_COBRA.WK_FR14_TXNS ALL;

INSERT INTO CC_COBRA.WK_FR14_TXNS
SELECT MT.AGRMNT_ID
      ,MT.EVENT_ACTVTY_CD 
      ,MT.TRNSCN_DERVTN_GRP 
      ,MT.EVENT_AM 
      ,MT.EVENT_ID
      ,MT.REPORT_DT 
      ,MT.CURNCY_GRP 
      ,MT.REVRSL_IN
      /*THIS CASE STATEMENT FLAGS TXNS THAT SHOULD HAVE PLAN NOS WITH DEFAULT PLAN NOS FOR UPDATING LATER*/
      ,CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('PAYMENT') THEN NULL /*OVERWRITE FOR CONSISTENCY AS WITH FD THERE IS NONE!!!*/
            WHEN SUBSTR(DF.FEATUR_TX,4,5) IS NOT NULL THEN SUBSTR(DF.FEATUR_TX,4,5) 
            WHEN MT.TRNSCN_DERVTN_GRP IN  ('CASH', 'CASH ADVANCE FEE') THEN 99998 
            WHEN MT.TRNSCN_DERVTN_GRP NOT IN ('PAYMENT','ADJUSTMENT','CHARGE-OFF','CASHBACK') THEN 99999 
            ELSE NULL END AS PLAN_NO
      ,S.SCHEME
      
FROM       CC_COBRA.WK_FR14_TXNS_T1 MT
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_EVENT AFE
ON         MT.EVENT_ID = AFE.EVENT_ID
LEFT JOIN  GDW_VIEWSX.DESCRIPTIVE_FEATURE DF
ON         AFE.FEATUR_ID = DF.FEATUR_ID
AND        DF.EFFCTV_DT IS NULL
LEFT JOIN  CC_COBRA.WK_FR14_TXNS_T2 S
ON         MT.EVENT_ID = S.EVENT_ID ;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_TXNS INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR14_TXNS INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR14_TXNS_T1 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 3 - PAYMENTS AND DRAWDOWN*/

/*STEP 06: GET NON-PAYMENTS*/

DELETE FROM CC_COBRA.WK_FR14_DRAWDOWN ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR14_DRAWDOWN
SELECT     MT.AGRMNT_ID
          ,MT.REPORT_DT
          ,MT.PLAN_NO
          /*THIS SEPARATES TXNS INTO TWO CATEGORIES DRAWDOWN AND PAYMENTS PLUS AND EXTRA TO CAPTURE PAY DOWN ON INTEREST*/
          ,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP <> 'PAYMENT' THEN MT.EVENT_AM ELSE 0 END) AS DRAWDOWN  
          ,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'PAYMENT' THEN MT.EVENT_AM ELSE 0 END) AS PAYMENT     
          ,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'INTEREST' THEN MT.EVENT_AM ELSE 0 END) AS INTEREST          
FROM       CC_COBRA.WK_FR14_TXNS MT
WHERE      MT.PLAN_NO IS NOT NULL
GROUP BY 1,2,3;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_DRAWDOWN INDEX (AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 07: GET PAYMENTS*/

DELETE FROM CC_COBRA.WK_FR14_PAYMENTS ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR14_PAYMENTS
SELECT     A.AGRMNT_ID
          ,A.REPORT_DT
          ,A.PAYMENT
          ,A.PAYMENT
          ,A.BT_OUT_AM
          ,A.BT_OUT_CT
          ,A.ADJUST
          ,A.COFF
          , CAST(CASE WHEN BT_OUT_AM > 0 AND CAST(PAYMENT AS FLOAT)<>0 
                 THEN CAST(BT_OUT_AM AS FLOAT)/CAST(PAYMENT AS FLOAT) ELSE 0 END AS DECIMAL(16,11)) 
          , CAST(CASE WHEN ADJUST <> 0 AND (CAST(PAYMENT AS FLOAT)+CAST(ADJUST AS FLOAT)+CAST(COFF AS FLOAT)) <> 0 
                 THEN CAST(ADJUST AS FLOAT)/(CAST(PAYMENT AS FLOAT)+CAST(ADJUST AS FLOAT)+CAST(COFF AS FLOAT)) ELSE 0 END AS DECIMAL(16,11))
          , CAST(CASE WHEN COFF <> 0 AND (CAST(PAYMENT AS FLOAT)+CAST(ADJUST AS FLOAT)+CAST(COFF AS FLOAT)) <> 0 
                 THEN CAST(COFF AS FLOAT)/(CAST(PAYMENT AS FLOAT)+CAST(ADJUST AS FLOAT)+CAST(COFF AS FLOAT)) ELSE 0 END AS DECIMAL(15,11))
FROM (
SELECT     MT.AGRMNT_ID
          ,REPORT_DT
          ,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'PAYMENT' THEN MT.EVENT_AM ELSE 0 END) AS PAYMENT  
          ,SUM(ZEROIFNULL(B.EVENT_AM)) AS BT_OUT_AM  
          ,SUM(CASE WHEN B.EVENT_AM IS NOT NULL THEN 1 ELSE 0 END) AS BT_OUT_CT 
          ,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('ADJUSTMENT','CASHBACK') THEN MT.EVENT_AM ELSE 0 END) AS ADJUST 
          ,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'CHARGE-OFF' THEN MT.EVENT_AM ELSE 0 END) AS COFF 
               
FROM       CC_COBRA.WK_FR14_TXNS  MT
LEFT JOIN  CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
ON         MT.EVENT_ID = B.CC_MON_TXN_EVENT_ID
WHERE      TRNSCN_DERVTN_GRP IN ('PAYMENT','ADJUSTMENT','CHARGE-OFF','CASHBACK')
AND        MT.PLAN_NO IS NULL

GROUP BY 1,2) A
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_PAYMENTS INDEX (AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 4 - PAYMENTS, FEATURES & PLAN BALANCE*/

/*STEP 08: GET CHARGE-OFFS*/

DELETE FROM CC_COBRA.WK_FR14_CHARGE_OFFS ALL;

INSERT INTO CC_COBRA.WK_FR14_CHARGE_OFFS
SELECT     MT.AGRMNT_ID
          ,REPORT_DT
          ,SUM(MT.EVENT_AM) AS CHARGEOFF                
FROM       CC_COBRA.WK_FR14_TXNS MT
WHERE      MT.TRNSCN_DERVTN_GRP ='CHARGE-OFF'
AND        MT.PLAN_NO IS NULL
GROUP BY 1,2
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_CHARGE_OFFS INDEX (AGRMNT_ID);


/*STEP 09A: GET FEATURES*/

DELETE FROM CC_COBRA.WK_FR14_FEATURES1 ALL;

INSERT INTO CC_COBRA.WK_FR14_FEATURES1
SELECT     A.ORG_TX     
          ,A.AGRMNT_ID
          ,AF.FEATUR_ID
          ,AFF.AGRMNT_FEATUR_FEATUR_NO
          ,A.REPORT_DT
          ,AF.EXPIRY_DT
          ,A.STATUS
          ,0
          ,PL.BW_PLAN_TYPE_CD
FROM       CC_COBRA.WK_FR14_BALANCE A
INNER JOIN GDW_VIEWSX.AGREEMENT_FEATURE AF
ON         A.AGRMNT_ID = AF.AGRMNT_ID
AND        A.REPORT_DT BETWEEN AF.SOURCE_START_DT AND AF.SOURCE_END_DT-1
AND        (AF.EXPIRY_DT IS NULL OR AF.EXPIRY_DT >= A.REPORT_DT)
AND        (A.STATUS <> 'P'
           OR (A.STATUS = 'P' AND INT_STATUS_DT = A.REPORT_DT))
INNER JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF
ON         AF.AGRMNT_ID = AFF.AGRMNT_ID
AND        AF.FEATUR_ID = AFF.FEATUR_ID
AND        AFF.RELATD_FEATUR_ID = 5018
AND        A.REPORT_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1
INNER JOIN CC_COBRA.CC_PLAN_LOOKUP PL
ON         A.ORG_TX = PL.ORG_TX
AND        AFF.AGRMNT_FEATUR_FEATUR_NO = PL.PLAN_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_FEATURES1 INDEX(AGRMNT_ID);

/*STEP 09B: GET FEATURES - SPLIT JOINS TO INCREASE EFFICIENCY*/

DELETE FROM CC_COBRA.WK_FR14_FEATURES ALL;

INSERT INTO CC_COBRA.WK_FR14_FEATURES
SELECT     F1.ORG_TX     
	      ,F1.AGRMNT_ID
          ,F1.FEATUR_ID
          ,F1.PLAN_NO
          ,AFF2.AGRMNT_FEATUR_FEATUR_NO
          ,F1.REPORT_DT
          ,F1.EXPIRY_DT
          ,F1.STATUS
          ,F1.INTRO_RETAIL_FLAG
          ,AFF4.AGRMNT_FEATUR_FEATUR_NO
          ,F1.BW_PLAN_TYPE_CD
FROM       CC_COBRA.WK_FR14_FEATURES1 F1
LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF2
ON         F1.AGRMNT_ID = AFF2.AGRMNT_ID
AND        F1.FEATUR_ID = AFF2.FEATUR_ID
AND        AFF2.RELATD_FEATUR_ID = 5018
AND        F1.REPORT_DT-1 BETWEEN AFF2.SOURCE_START_DT AND AFF2.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF4
ON         F1.AGRMNT_ID = AFF4.AGRMNT_ID
AND        F1.FEATUR_ID = AFF4.FEATUR_ID
AND        AFF4.RELATD_FEATUR_ID IN (4302,4303,4307,4305)--4305 ADDED FOR HBOS K TYPE
AND        F1.REPORT_DT BETWEEN AFF4.SOURCE_START_DT AND AFF4.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_FEATURES INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR14_FEATURES INDEX(FEATUR_ID);
COLLECT STATS ON CC_COBRA.WK_FR14_FEATURES COLUMN(REPORT_DT);


/*STEP 09C: FLAG PROMO RETAIL PLANS WHERE THEY ARE CURRENTLY UNDER PROMO RATES*/

UPDATE CC_COBRA.WK_FR14_FEATURES
FROM (
SELECT     A.AGRMNT_ID, A.FEATUR_ID
FROM       CC_COBRA.WK_FR14_FEATURES A
INNER JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF
ON         A.AGRMNT_ID = AFF.AGRMNT_ID
AND        A.FEATUR_ID = AFF.FEATUR_ID
/*BUS DATE BEING PROCESSED*/
AND        A.REPORT_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1 
/*RETAIL PROMO PLAN RANGES*/
AND        A.BW_PLAN_TYPE_CD = 'P' /*PROMO RETAIL*/
AND        A.PLAN_TYPE = 'R' /*MAKE SURE THAT WE ONLY PICK UP RETAIL PROMO PLANS - BELT AND BRACES*/
AND        AFF.RELATD_FEATUR_ID = 5019 /*ITO OVERRIDE TABLE*/
AND        AFF.AGRMNT_FEATUR_FEATUR_NO <> '0' /*WHEN THIS FIELD IS ANYTHING OTHER THAN ZERO IT IS A PROMO IN FORCE*/

) A
SET INTRO_RETAIL_FLAG = 2 
WHERE CC_COBRA.WK_FR14_FEATURES.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.WK_FR14_FEATURES.FEATUR_ID = A.FEATUR_ID;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 09D: FLAG PROMO RETAIL PLANS WHERE THEY HAVE JUST FLIPPED*/

UPDATE CC_COBRA.WK_FR14_FEATURES
FROM (
SELECT     A.AGRMNT_ID, A.FEATUR_ID
FROM       CC_COBRA.WK_FR14_FEATURES A
INNER JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF
ON         A.AGRMNT_ID = AFF.AGRMNT_ID
AND        A.FEATUR_ID = AFF.FEATUR_ID
/*DAY PRIOR TO BUSINESS DATE BEING PROCESSED*/
AND        A.REPORT_DT-1 BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1 
/*RETAIL PROMO PLAN RANGES*/
AND        A.BW_PLAN_TYPE_CD = 'P' /*PROMO RETAIL*/
AND        A.PLAN_TYPE = 'R' /*MAKE SURE THAT WE ONLY PICK UP RETAIL PROMO PLANS - BELT AND BRACES*/
AND        A.INTRO_RETAIL_FLAG = 0
AND        AFF.RELATD_FEATUR_ID = 5019
/*BY MAKING SURE THE DAY PRIOR IS UNDER THE ITO OVERRIDE AND BY SELECTING ONLY THOSE THAT ARE STILL ZERO AFTER PREVIOUS UPDATE - YOU CAN BE SURE THEY ARE JUST FLIPPED*/
AND        AFF.AGRMNT_FEATUR_FEATUR_NO <> '0' 
) A
SET INTRO_RETAIL_FLAG = 1
WHERE CC_COBRA.WK_FR14_FEATURES.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.WK_FR14_FEATURES.FEATUR_ID = A.FEATUR_ID;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 10A: GET PLAN BALANCE*/

DELETE FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1 ALL;


/*CHECK TO SEE IF WE CAN USE DATA FROM C01J15*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIP03;


INSERT INTO CC_COBRA.WK_FR14_PLAN_BALANCE_T1
SELECT     A.AGRMNT_ID
          ,A2.PLAN_NO
          ,A.REPORT_DT
          /* NEW WHERE THE PLAN NO CHANGES - THIS WILL SET THE OPENING BALANCE TO 0*/
          ,ZEROIFNULL(SUM(CASE WHEN A.PRIOR_INT_STATUS <> 'Z' 
                               AND A2.PLAN_NO = A2.PRIOR_PLAN_NO 
                               THEN ZEROIFNULL(AF.PLAN_BALANC_AM) ELSE 0 END)) AS YESTER_BL
          ,ZEROIFNULL(SUM(CASE WHEN A.REPORT_DT = A2.EXPIRY_DT THEN 0
                               WHEN A.INT_STATUS <> 'Z' AND A.STATUS <> 'P' THEN AFB.PLAN_BALANC_AM ELSE 0 END)) AS TODAY_BL
                        
FROM       CC_COBRA.WK_FR14_BALANCE A
JOIN       CC_COBRA.WK_FR14_FEATURES A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
LEFT JOIN  CC_COBRA.CC_ACCOUNT_FEATURE_DAILY AFB
ON         A.AGRMNT_ID = AFB.AGRMNT_ID
AND        A2.FEATUR_ID = AFB.FEATUR_ID
AND        A.REPORT_DT = AFB.REPORT_DT      
LEFT JOIN  CC_COBRA.CC_ACCOUNT_FEATURE_DAILY AF
ON         A.AGRMNT_ID = AF.AGRMNT_ID
AND        A2.FEATUR_ID = AF.FEATUR_ID
AND        A.PRIOR_REPORT_DT = AF.REPORT_DT
GROUP BY 1,2,3;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIP04;

.LABEL SKIP03;

INSERT INTO CC_COBRA.WK_FR14_PLAN_BALANCE_T1 
SELECT     A.AGRMNT_ID
          ,A2.PLAN_NO
          ,A.REPORT_DT
          /* NEW WHERE THE PLAN NO CHANGES - THIS WILL SET THE OPENING BALANCE TO 0*/
          ,ZEROIFNULL(SUM(CASE WHEN A.PRIOR_INT_STATUS <> 'Z' 
                               AND A2.PLAN_NO = A2.PRIOR_PLAN_NO 
                               AND AF.EXPIRY_DT IS NULL THEN AFB2.AGRMNT_FEATUR_BL_AM ELSE 0 END)) AS YESTER_BL
          ,ZEROIFNULL(SUM(CASE WHEN A.REPORT_DT = A2.EXPIRY_DT THEN 0
                               WHEN A.INT_STATUS <> 'Z' THEN AFB.AGRMNT_FEATUR_BL_AM ELSE 0 END)) AS TODAY_BL
                        
FROM       CC_COBRA.WK_FR14_BALANCE A
JOIN       CC_COBRA.WK_FR14_FEATURES A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE AF
ON         A.AGRMNT_ID = AF.AGRMNT_ID
AND        A2.FEATUR_ID = AF.FEATUR_ID
AND        A.REPORT_DT-1 BETWEEN AF.SOURCE_START_DT AND AF.SOURCE_END_DT-1
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON         A.AGRMNT_ID = AFB.AGRMNT_ID
AND        A2.FEATUR_ID = AFB.FEATUR_ID
AND        A.STATUS <> 'P'
AND        A.REPORT_DT BETWEEN AFB.SOURCE_START_DT AND AFB.SOURCE_END_DT-1
AND        AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB2
ON         A.AGRMNT_ID = AFB2.AGRMNT_ID
AND        A2.FEATUR_ID = AFB2.FEATUR_ID
AND        A.REPORT_DT-1 BETWEEN AFB2.SOURCE_START_DT AND AFB2.SOURCE_END_DT-1
AND        AFB2.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
GROUP BY 1,2,3;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIP04;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_BALANCE_T1 INDEX (AGRMNT_ID);


/****************************ERRONEOUS TXN FIX****************************/
/*THIS STEP CORRECTS THE CLOSING/OPENING BALANCE FOR THE ACCOUNT AFFECTED*/
/*************************************************************************/

/*CODE FOR THE DAY OF ERROR*/
/*
UPDATE CC_COBRA.WK_FR14_PLAN_BALANCE_T1
SET CLOSNG_BL = -146.28         --SET BALANCE TO EQUAL THE PRIOR DAY BEFORE THE ERROR, ASSUMING NO OTHER TRANSACTIONS TO TAKE INTO ACCOUNT ON DAY OF ERROR
WHERE AGRMNT_ID = 1041730651    --SET TO THE AFFECTED ACCOUNT
AND PLAN_NO = 30005             --SET TO THE AFFECTED PLAN FOR THE ACCOUNT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
*/

/*CODE FOR THE DAY AFTER ERROR*/
/*
UPDATE CC_COBRA.WK_FR14_PLAN_BALANCE_T1
SET OPENNG_BL = -146.28         --SET BALANCE TO EQUAL THE PRIOR DAY BEFORE THE ERROR, ASSUMING NO OTHER TRANSACTIONS TO TAKE INTO ACCOUNT ON DAY OF ERROR
,   CLOSNG_BL = -119.73         --SET BALANCE TO EQUAL THE PRIOR DAY BEFORE THE ERROR, ASSUMING NO OTHER TRANSACTIONS TO TAKE INTO ACCOUNT ON DAY OF ERROR
WHERE AGRMNT_ID = 1041730651    --SET TO THE AFFECTED ACCOUNT
AND PLAN_NO = 30005             --SET TO THE AFFECTED PLAN FOR THE ACCOUNT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
*/
 
/****************************ERRONEOUS TXN FIX****************************/


/*STEP 10B: UPDATE THE PRIOR PLAN NO OPENING BALANCE IF IT EXISTS ALREADY TO INCLUDE THE OPENING BALANCE OF THE PRIOR PLAN NO */

UPDATE CC_COBRA.WK_FR14_PLAN_BALANCE_T1
FROM (
SELECT     A.AGRMNT_ID
          ,A2.PRIOR_PLAN_NO
          ,A.REPORT_DT
          ,ZEROIFNULL(SUM(CASE WHEN A.PRIOR_INT_STATUS <> 'Z'  AND PLAN_NO <> PRIOR_PLAN_NO THEN AFB2.AGRMNT_FEATUR_BL_AM ELSE 0 END)) AS YESTER_BL
FROM       CC_COBRA.WK_FR14_BALANCE A
JOIN       CC_COBRA.WK_FR14_FEATURES A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
AND        A2.PLAN_NO <> A2.PRIOR_PLAN_NO
/*ALREADY EXISTS IN TABLE*/
AND EXISTS (SELECT NULL FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1 PB WHERE A.AGRMNT_ID = PB.AGRMNT_ID AND A2.PRIOR_PLAN_NO = PB.PLAN_NO)
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON         A.AGRMNT_ID = AFB.AGRMNT_ID
AND        A2.FEATUR_ID = AFB.FEATUR_ID
AND        A.STATUS <> 'P'
AND        A.REPORT_DT BETWEEN AFB.SOURCE_START_DT AND AFB.SOURCE_END_DT-1
AND        AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB2
ON         A.AGRMNT_ID = AFB2.AGRMNT_ID
AND        A2.FEATUR_ID = AFB2.FEATUR_ID
AND        A.REPORT_DT-1 BETWEEN AFB2.SOURCE_START_DT AND AFB2.SOURCE_END_DT-1
AND        AFB2.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
GROUP BY 1,2,3) A
SET OPENNG_BL = CC_COBRA.WK_FR14_PLAN_BALANCE_T1.OPENNG_BL+YESTER_BL
WHERE CC_COBRA.WK_FR14_PLAN_BALANCE_T1.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.WK_FR14_PLAN_BALANCE_T1.PLAN_NO = A.PRIOR_PLAN_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 10C: INSERT A DUMMY RECORD FOR THE OLD PLAN NO FOR PLAN NO CHANGES - TO ENSURE THAT THE CLOSING BALANCE IS 0*/

INSERT INTO CC_COBRA.WK_FR14_PLAN_BALANCE_T1 
SELECT     A.AGRMNT_ID
          ,A2.PRIOR_PLAN_NO
          ,A.REPORT_DT
          ,ZEROIFNULL(SUM(CASE WHEN A.PRIOR_INT_STATUS <> 'Z' AND PLAN_NO <> PRIOR_PLAN_NO THEN AFB2.AGRMNT_FEATUR_BL_AM ELSE 0 END)) AS YESTER_BL
          ,SUM(0) AS TODAY_BL
FROM       CC_COBRA.WK_FR14_BALANCE A
JOIN       CC_COBRA.WK_FR14_FEATURES A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
AND        A2.PLAN_NO <> A2.PRIOR_PLAN_NO
AND NOT EXISTS (SELECT NULL FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1 PB WHERE A.AGRMNT_ID = PB.AGRMNT_ID AND A2.PRIOR_PLAN_NO = PB.PLAN_NO)
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON         A.AGRMNT_ID = AFB.AGRMNT_ID
AND        A2.FEATUR_ID = AFB.FEATUR_ID
AND        A.STATUS <> 'P'
AND        A.REPORT_DT BETWEEN AFB.SOURCE_START_DT AND AFB.SOURCE_END_DT-1
AND        AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB2
ON         A.AGRMNT_ID = AFB2.AGRMNT_ID
AND        A2.FEATUR_ID = AFB2.FEATUR_ID
AND        A.REPORT_DT-1 BETWEEN AFB2.SOURCE_START_DT AND AFB2.SOURCE_END_DT-1
AND        AFB2.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
GROUP BY 1,2,3;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_BALANCE_T1 INDEX (AGRMNT_ID);

/*STEP 10D: PICK UP INTEREST BNP BUCKETS*/

DELETE FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T2 ALL;

INSERT INTO CC_COBRA.WK_FR14_PLAN_BALANCE_T2
SELECT     A.AGRMNT_ID
          ,A2.PLAN_NO
          ,A.REPORT_DT
          ,ZEROIFNULL(SUM(CASE WHEN A.PRIOR_INT_STATUS <> 'Z' AND PLAN_NO = PRIOR_PLAN_NO THEN AFS2.AGRMNT_FEATUR_AM ELSE 0 END)) AS YESTER_INT_BL
          ,ZEROIFNULL(SUM(CASE WHEN A.REPORT_DT = A2.EXPIRY_DT THEN 0
                               WHEN A.INT_STATUS <> 'Z' THEN AFS.AGRMNT_FEATUR_AM ELSE 0 END)) AS TODAY_INT_BL
FROM       CC_COBRA.WK_FR14_BALANCE A
JOIN       CC_COBRA.WK_FR14_FEATURES A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_SUMMARY AFS
ON         A.AGRMNT_ID = AFS.AGRMNT_ID
AND        A2.FEATUR_ID = AFS.FEATUR_ID
AND        A.REPORT_DT BETWEEN AFS.SOURCE_START_DT AND AFS.SOURCE_END_DT-1
AND        AFS.AGRMNT_FEATUR_SUMMRY_TYPE_CD = '00500013'
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_SUMMARY AFS2
ON         A.AGRMNT_ID = AFS2.AGRMNT_ID
AND        A2.FEATUR_ID = AFS2.FEATUR_ID
AND        A.REPORT_DT-1 BETWEEN AFS2.SOURCE_START_DT AND AFS2.SOURCE_END_DT-1
AND        AFS2.AGRMNT_FEATUR_SUMMRY_TYPE_CD = '00500013'
GROUP BY 1,2,3;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_BALANCE_T2 INDEX (AGRMNT_ID);

/*STEP 10E: UPDATE INTERESTING OPENING BALANCE*/

UPDATE CC_COBRA.WK_FR14_PLAN_BALANCE_T2
FROM (
SELECT     A.AGRMNT_ID
          ,A2.PRIOR_PLAN_NO
          ,A.REPORT_DT
          ,ZEROIFNULL(SUM(CASE WHEN A.PRIOR_INT_STATUS <> 'Z'  AND PLAN_NO <> PRIOR_PLAN_NO THEN AFS2.AGRMNT_FEATUR_AM ELSE 0 END)) AS YESTER_BL
FROM       CC_COBRA.WK_FR14_BALANCE A
JOIN       CC_COBRA.WK_FR14_FEATURES A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
AND        A2.PLAN_NO <> A2.PRIOR_PLAN_NO
AND EXISTS (SELECT NULL FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T2 PB WHERE A.AGRMNT_ID = PB.AGRMNT_ID AND A2.PRIOR_PLAN_NO = PB.PLAN_NO)
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_SUMMARY AFS
ON         A.AGRMNT_ID = AFS.AGRMNT_ID
AND        A2.FEATUR_ID = AFS.FEATUR_ID
AND        A.STATUS <> 'P'
AND        A.REPORT_DT BETWEEN AFS.SOURCE_START_DT AND AFS.SOURCE_END_DT-1
AND        AFS.AGRMNT_FEATUR_SUMMRY_TYPE_CD = '00500013'
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_SUMMARY AFS2
ON         A.AGRMNT_ID = AFS2.AGRMNT_ID
AND        A2.FEATUR_ID = AFS2.FEATUR_ID
AND        A.REPORT_DT-1 BETWEEN AFS2.SOURCE_START_DT AND AFS2.SOURCE_END_DT-1
AND        AFS2.AGRMNT_FEATUR_SUMMRY_TYPE_CD = '00500013'
GROUP BY 1,2,3) A
SET INTRST_OPENNG_BL = CC_COBRA.WK_FR14_PLAN_BALANCE_T2.INTRST_OPENNG_BL+YESTER_BL
WHERE CC_COBRA.WK_FR14_PLAN_BALANCE_T2.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.WK_FR14_PLAN_BALANCE_T2.PLAN_NO = A.PRIOR_PLAN_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 10F: INSERT RECORDS WITH A ZERO BALANCE TODAY UNDER THE OLD PLAN NO (THAT HAD A CHANGE IN PLAN NO) WHERE NO RECORD WOULD OTHERWISE BE INSERTED*/

INSERT INTO CC_COBRA.WK_FR14_PLAN_BALANCE_T2 
SELECT     A.AGRMNT_ID
          ,A2.PRIOR_PLAN_NO
          ,A.REPORT_DT
          ,ZEROIFNULL(SUM(CASE WHEN A.PRIOR_INT_STATUS <> 'Z'  AND PLAN_NO <> PRIOR_PLAN_NO THEN AFS2.AGRMNT_FEATUR_AM ELSE 0 END)) AS YESTER_BL
          ,SUM(0) AS TODAY_BL
FROM       CC_COBRA.WK_FR14_BALANCE A
JOIN       CC_COBRA.WK_FR14_FEATURES A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
AND        A2.PLAN_NO <> A2.PRIOR_PLAN_NO
AND NOT EXISTS (SELECT NULL FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T2 PB WHERE A.AGRMNT_ID = PB.AGRMNT_ID AND A2.PRIOR_PLAN_NO = PB.PLAN_NO)
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_SUMMARY AFS
ON         A.AGRMNT_ID = AFS.AGRMNT_ID
AND        A2.FEATUR_ID = AFS.FEATUR_ID
AND        A.STATUS <> 'P'
AND        A.REPORT_DT BETWEEN AFS.SOURCE_START_DT AND AFS.SOURCE_END_DT-1
AND        AFS.AGRMNT_FEATUR_SUMMRY_TYPE_CD = '00500013'
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_SUMMARY AFS2
ON         A.AGRMNT_ID = AFS2.AGRMNT_ID
AND        A2.FEATUR_ID = AFS2.FEATUR_ID
AND        A.REPORT_DT-1 BETWEEN AFS2.SOURCE_START_DT AND AFS2.SOURCE_END_DT-1
AND        AFS2.AGRMNT_FEATUR_SUMMRY_TYPE_CD = '00500013'
GROUP BY 1,2,3;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_BALANCE_T2 INDEX (AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_BALANCE_T2 COLUMN (PLAN_NO);

/*STEP 10G: THIS STEP CHECKS THAT IN GRID THE PLAN BALANCE IS WITHIN A REASONABLE TOLERANCE THE ACCOUNT BALANCE*/

SELECT SUM(A.CLOSNG_BL) AS ACCOUNT_CLOSNG_BL, SUM(PLAN_CLOSNG_BL) AS PLAN_CLOSNG_BL
FROM CC_COBRA.WK_FR14_BALANCE A
JOIN (SELECT AGRMNT_ID, SUM(CLOSNG_BL) AS PLAN_CLOSNG_BL FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1 GROUP BY 1) B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.STATUS <> 'Z' --REMOVE CHARGE OFF ACCOUNTS
;

SELECT *
FROM 
(
SELECT SUM(A.CLOSNG_BL) AS ACCOUNT_CLOSNG_BL, SUM(PLAN_CLOSNG_BL) AS PLAN_CLOSNG_BL, ABS(SUM(A.CLOSNG_BL) - SUM(PLAN_CLOSNG_BL)) AS ABS_BAL_VARIANCE
FROM CC_COBRA.WK_FR14_BALANCE A
JOIN (SELECT AGRMNT_ID, SUM(CLOSNG_BL) AS PLAN_CLOSNG_BL FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1 GROUP BY 1) B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.STATUS <> 'Z' --REMOVE CHARGE OFF ACCOUNTS
) A
/*PICK TOLERANCE OF 30K*/
WHERE ABS_BAL_VARIANCE > 600000 --CHANGED FROM 50000 ON 23/02/2022
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO FOUNDERROR;

/*PART 1 COMPLETION*/

UPDATE CC_COBRA.CC_WK_FR14_RUN_STATUS 
SET STATUS = 'P'
WHERE STATUS = '1' 
;

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

--IF THE JOB REACHES HERE IT WON'T UPDATE CC_WK_FR14_RUN_STATUS WHICH MEANS PART 2 WON'T RUN.

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR14'
;

.QUIT 0;



