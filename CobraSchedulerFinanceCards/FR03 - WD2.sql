/************************************************************************/
/*JOB:      FR03 - WD2                                                  */
/*VERSION:  FR03V0$ - fix skip job.SQL                                  */
/*DATE VERSION IMPLEMENTED: 2020-02-02                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/*C01J04                                                                */
/************************************************************************/
.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'APPLICATIONNAME=CC_FINANCE_DAILY_RUN;JOBID=GRFD043;WORKTYPE=TRIPLER;VERSION=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*CHECK TO SEE IF PROCESSING LAST WORKING DAY OF MONTH*/

SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPJOB;


/*INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_EVENTS_TO_EXCLUDE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR03';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*UPDATE START_DT AND TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR03'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 02: DATE CONTROL*/
/*
CREATE SET TABLE CC_COBRA.WK_FR03_REPORT_DATE ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      REPORT_DT DATE FORMAT 'YY/MM/DD')
UNIQUE PRIMARY INDEX ( REPORT_DT );
*/


UPDATE CC_COBRA.WK_FR03_REPORT_DATE
SET REPORT_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT);
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR03_REPORT_DATE INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR03_REPORT_DATE;

/*CHECK FOR NEW PPI FEATURES - INSERT ANY NEW ONES INTO CC_COBRA FR03_PPI_FEATURES*/

SELECT * FROM GDW_VIEWS.FEATURE WHERE FEATUR_ID BETWEEN 4110 AND 4504 AND FEATUR_NM LIKE '%INSURANCE PRODUCT%' AND FEATUR_ID NOT IN (4113,4159,4112,4142,4183,4114,4111,4158,4116,4157,4115,4118,4117)
AND FEATUR_ID NOT IN (SELECT FEATUR_ID FROM CC_COBRA.FR03_PPI_FEATURES);

.IF ACTIVITYCOUNT <> 0 THEN .GOTO FOUNDERROR;

/*STEP 03: COLLECT MONTHS TRANSACTIONS*/

/*
CREATE TABLE CC_COBRA.WK_FR03_MONTH_TXNS (
AGRMNT_ID INT
,EVENT_ID BIGINT
,EVENT_AM DECIMAL(15,2) 
,SOURCE_START_DT DATE
,EVENT_ACTVTY_CD CHAR(10) COMPRESS ('00500001  ','00500002  ','00500176  ','00505101  ','00505107  ','00505109  ','00505125  ','00505138  ','00505243  ','00505913  ','00508053  ','00508102  ','00508110  ','00508112  ','00508138  ','00508175  ','00508908  ')
,TRNSCN_CRRNCY_CD CHAR(3) 
,TRNSCN_DERVTN_GRP VARCHAR(30) 
,DEBIT_ACTIVE_IN BYTEINT COMPRESS (0,1)
,MRCHNT_DS CHAR(40)
)
UNIQUE PRIMARY INDEX (EVENT_ID)
INDEX(AGRMNT_ID);
*/


DELETE FROM CC_COBRA.WK_FR03_MONTH_TXNS ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;  

INSERT INTO CC_COBRA.WK_FR03_MONTH_TXNS
SELECT
MT.AGRMNT_ID
,MT.EVENT_ID
,MT.EVENT_AM
,MT.SOURCE_START_DT
,MT.EVENT_ACTVTY_CD
,MT.TRNSCN_CRRNCY_CD
,TDG.TRNSCN_DERVTN_GRP
,TDG.DEBIT_ACTIVE_IN
,MT.MRCHNT_DS

FROM        GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST MT
JOIN 		CC_COBRA.WK_FR03_REPORT_DATE DC
ON          MT.SOURCE_START_DT/100 = DC.REPORT_DT/100
AND         NOT EXISTS 
            (SELECT NULL
             FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE E
             WHERE MT.EVENT_ID = E.EVENT_ID)
JOIN		CC_COBRA.TRNSCN_DERVTN_GROUPS TDG
ON 			MT.EVENT_ACTVTY_CD = TDG.EVENT_ACTVTY_CD
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;  

COLLECT STATS ON CC_COBRA.WK_FR03_MONTH_TXNS INDEX(EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR03_MONTH_TXNS INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CREATE SET TABLE CC_COBRA.WK_FR03_WD2_MIA ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      AGRMNT_ID INTEGER,
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      CREDIT_CARD_LOGO_CD SMALLINT,
      VINTAGE CHAR(8) CHARACTER SET LATIN NOT CASESPECIFIC,
      ACQ_CHANNEL CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL COMPRESS 'BLANK',
      HAS_BALANCE_FLAG CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'),
      HAS_BALANCE_ASSET_FLAG CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'),
      IS_NEW_FLAG CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'),
      HAS_TXN_FLAG CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'),
      HAS_TXN_ACTIVITY_FLAG CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'),
      IS_GROSS_ACTIVE CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'),
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('B','N','U'),
      HAS_PPI_FLAG CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'))
UNIQUE PRIMARY INDEX ( AGRMNT_ID );
*/
DELETE FROM  CC_COBRA.WK_FR03_WD2_MIA ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR03_WD2_MIA
SELECT  A.AGRMNT_ID
      , WD2.REPORT_DT
      , A.ORG_TX
      , A.CREDIT_CARD_LOGO_CD 
	  , CASE WHEN A.ORIGNL_ADDED_DT IS NULL THEN '19991231'
	         WHEN CAST(CAST(ADD_MONTHS(((((A.ORIGNL_ADDED_DT/100)*100)+1)(DATE)),1)-1 AS FORMAT 'YYYYMMDD') AS CHAR(8))   < '20000000' THEN '19991231'
	         ELSE  CAST(CAST(ADD_MONTHS(((((A.ORIGNL_ADDED_DT/100)*100)+1)(DATE)),1)-1 AS FORMAT 'YYYYMMDD') AS CHAR(8))  END AS VINTAGE
      , 'BLANK' ACQ_CHANNEL
      , COALESCE(TB.HAS_BALANCE,'N') AS HAS_BALANCE
	  , COALESCE(TB.HAS_DEBIT_BALANCE,'N') AS HAS_BALANCE_ASSET
      , CASE WHEN A.OPENED_DT/100 = WD2.REPORT_DT/100 THEN 'Y' ELSE 'N'	END AS IS_NEW
      , COALESCE(GAI.HAS_TRANSACTION_IN_MONTH,'N') AS HAS_TXN 
      , COALESCE(DAI.HAS_RETAIL_OR_CASH_TRANSACTION,'N') AS HAS_TXN_ACTIVITY
      , CASE WHEN GAI.HAS_TRANSACTION_IN_MONTH = 'Y' OR TB.HAS_BALANCE = 'Y' THEN 'Y' ELSE 'N' END IS_GROSS_ACTIVE
      , CASE WHEN STA.AGRMNT_STATUS_SUMMRY_VL IN ('9','P','T','F') THEN '*' 
             WHEN STA.AGRMNT_STATUS_SUMMRY_VL IN ('Z','8') THEN 'N'   
             
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('A','B','I','E','F') THEN 'U' /*USABLE*/
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('S','T','U','L','Z') THEN 'N' /*NOT USABLE*/
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('W','X','C') THEN 'B' /*BLOCKED*/
             
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IN ('A','B','I','E','F') THEN 'U' /*USABLE*/
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IN ('S','T','U','L','Z') THEN 'N' /*NOT USABLE*/
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IN ('W','X','C') THEN 'B' /*BLOCKED*/ 
             
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IS NOT NULL  THEN 'U' /*USABLE*/
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IS NOT NULL  THEN 'U' /*USABLE*/
             ELSE 'U' /*USABLE*/
             END AS EXTERNAL_STATUS 
      , COALESCE(PPI.HAS_PPI,'N')  HAS_PPI       
         
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE A

JOIN CC_COBRA.WK_FR03_REPORT_DATE WD2
ON   A.ADDED_DT <= WD2.REPORT_DT
AND  (A.PURGED_DT IS NULL OR A.PURGED_DT > WD2.REPORT_DT)

JOIN GDW_VIEWS.CREDIT_CARD_AGREEMENT CCA
ON   A.AGRMNT_ID = CCA.AGRMNT_ID     
AND  CCA.SOURCE_END_DT = '3500-12-31'

LEFT JOIN GDW_VIEWS.AGREEMENT_STATUS_SUMMARY STA  
ON   A.AGRMNT_ID = STA.AGRMNT_ID
AND  STA.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026' /*L2BS-INTERNAL-STATUS*/
AND  WD2.REPORT_DT BETWEEN STA.SOURCE_START_DT AND STA.SOURCE_END_DT-1 

LEFT JOIN GDW_VIEWS.AGREEMENT_STATUS_SUMMARY BC1
ON   A.AGRMNT_ID = BC1.AGRMNT_ID
AND  BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023' /*L2BS-BLOCK-CODE1*/
AND  WD2.REPORT_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1 

LEFT JOIN GDW_VIEWS.AGREEMENT_STATUS_SUMMARY BC2
ON   A.AGRMNT_ID = BC2.AGRMNT_ID
AND  BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024' /*L2BS-BLOCK-CODE2*/
AND  WD2.REPORT_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1 

LEFT JOIN 

(SELECT  AGRMNT_ID
       , CASE WHEN T1.BL_SUMMRY_AM <> 0 THEN 'Y' ELSE 'N' END HAS_BALANCE
	   , CASE WHEN T1.BL_SUMMRY_AM < 0 THEN 'Y' ELSE 'N' END HAS_DEBIT_BALANCE     
FROM       GDW_VIEWS.CC_AGREEMENT_BALANCE_SUMMARY T1
CROSS JOIN (SELECT REPORT_DT AS REPORT_DATE FROM CC_COBRA.WK_FR03_REPORT_DATE) T2
WHERE BL_SUMMRY_AM_CD = '00500003' /*CURR BAL*/  
AND T2.REPORT_DATE BETWEEN T1.SOURCE_START_DT AND T1.SOURCE_END_DT-1
) TB

ON A.AGRMNT_ID = TB.AGRMNT_ID

LEFT JOIN
(
SELECT AGRMNT_ID, 'Y' AS HAS_TRANSACTION_IN_MONTH
FROM CC_COBRA.WK_FR03_MONTH_TXNS
GROUP BY 1
) GAI /*GROSS_ACTIVE_IND*/
ON A.AGRMNT_ID = GAI.AGRMNT_ID

LEFT JOIN
(
SELECT AGRMNT_ID, 'Y' AS HAS_RETAIL_OR_CASH_TRANSACTION
FROM CC_COBRA.WK_FR03_MONTH_TXNS 
WHERE DEBIT_ACTIVE_IN = 1
GROUP BY 1
) DAI /*DEBIT_ACTIVE_IND*/
ON A.AGRMNT_ID = DAI.AGRMNT_ID

	/* PPI */
	
LEFT JOIN
	
	(SELECT 
			AGF.AGRMNT_ID,
			'Y' HAS_PPI
		FROM CC_COBRA.WK_FR03_REPORT_DATE D
        JOIN GDW_VIEWS.AGREEMENT_FEATURE AGF  
        ON   D.REPORT_DT BETWEEN AGF.SOURCE_START_DT AND AGF.SOURCE_END_DT-1
        AND  AGF.FEATUR_ID IN (SELECT FEATUR_ID FROM CC_COBRA.FR03_PPI_FEATURES)
		JOIN GDW_VIEWS.AGREEMENT_FEATURE_STATUS AFSS 
        ON   AGF.AGRMNT_ID = AFSS.AGRMNT_ID                                         
		AND  AGF.FEATUR_ID = AFSS.FEATUR_ID
        AND  D.REPORT_DT BETWEEN  AFSS.SOURCE_START_DT AND AFSS.SOURCE_END_DT-1
		AND  AFSS.AGRMNT_FEATUR_STATUS_TYPE_CD = '00000001'    
		AND  AFSS.AGRMNT_FEATUR_STATUS_CD = 'F'   
        GROUP BY 1,2
	) PPI
	ON CCA.AGRMNT_ID = PPI.AGRMNT_ID 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR03_WD2_MIA INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE KEY DATA ITEMS TO ACCOUNT FOR MONTH OF TRADES*/

UPDATE CC_COBRA.WK_FR03_WD2_MIA
FROM
(
SELECT 
  A.AGRMNT_ID
, CASE WHEN OA.HAS_BALANCE_FLAG = 'Y' AND NA.HAS_BALANCE_FLAG = 'N' THEN 'Y' ELSE NA.HAS_BALANCE_FLAG END AS HAS_BALANCE_FLAG
, CASE WHEN OA.HAS_BALANCE_ASSET_FLAG = 'Y' AND NA.HAS_BALANCE_ASSET_FLAG = 'N' THEN 'Y' ELSE NA.HAS_BALANCE_ASSET_FLAG END AS HAS_BALANCE_ASSET_FLAG
, CASE WHEN OA.HAS_TXN_FLAG = 'Y' AND NA.HAS_TXN_FLAG = 'N' THEN 'Y' ELSE NA.HAS_TXN_FLAG END AS HAS_TXN_FLAG
, CASE WHEN OA.HAS_TXN_ACTIVITY_FLAG = 'Y' AND NA.HAS_TXN_ACTIVITY_FLAG = 'N' THEN 'Y' ELSE NA.HAS_TXN_ACTIVITY_FLAG END AS HAS_TXN_ACTIVITY_FLAG
, CASE WHEN OA.IS_GROSS_ACTIVE = 'Y' AND NA.IS_GROSS_ACTIVE = 'N' THEN 'Y' ELSE NA.IS_GROSS_ACTIVE END AS IS_GROSS_ACTIVE

FROM GDW_VIEWS.AGREEMENT_RELATIONSHIP A
JOIN CC_COBRA.WK_FR03_REPORT_DATE B
ON   A.SOURCE_START_DT/100 = B.REPORT_DT/100
AND  A.AGRMNT_RLTNSP_TYPE_CD = '00500001'
JOIN CC_COBRA.WK_FR03_WD2_MIA OA
ON   A.RELATD_AGRMNT_ID = OA.AGRMNT_ID
JOIN CC_COBRA.WK_FR03_WD2_MIA NA
ON   A.AGRMNT_ID = NA.AGRMNT_ID
) B
SET HAS_BALANCE_FLAG = B.HAS_BALANCE_FLAG 
,   HAS_BALANCE_ASSET_FLAG = B.HAS_BALANCE_ASSET_FLAG
,   HAS_TXN_FLAG = B.HAS_TXN_FLAG
,   HAS_TXN_ACTIVITY_FLAG = B.HAS_TXN_ACTIVITY_FLAG
,   IS_GROSS_ACTIVE = B.IS_GROSS_ACTIVE
WHERE CC_COBRA.WK_FR03_WD2_MIA.AGRMNT_ID = B.AGRMNT_ID
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE KEY DATA ITEMS TO ACCOUNT FOR MONTH OF TRADES - FOR OLD ACCOUNT TO AVOID DOUBLE COUNTING*/

UPDATE CC_COBRA.WK_FR03_WD2_MIA
FROM
(
SELECT 
  A.RELATD_AGRMNT_ID AS AGRMNT_ID
, 'N' AS HAS_BALANCE_FLAG
, 'N' AS HAS_BALANCE_ASSET_FLAG
, 'N' AS HAS_TXN_FLAG
, 'N' AS HAS_TXN_ACTIVITY_FLAG
, 'N' AS IS_GROSS_ACTIVE

FROM GDW_VIEWS.AGREEMENT_RELATIONSHIP A
JOIN CC_COBRA.WK_FR03_REPORT_DATE B
ON   A.SOURCE_START_DT/100 = B.REPORT_DT/100
AND  A.AGRMNT_RLTNSP_TYPE_CD = '00500001'
JOIN CC_COBRA.WK_FR03_WD2_MIA OA
ON   A.RELATD_AGRMNT_ID = OA.AGRMNT_ID
JOIN CC_COBRA.WK_FR03_WD2_MIA NA
ON   A.AGRMNT_ID = NA.AGRMNT_ID
) B
SET HAS_BALANCE_FLAG = B.HAS_BALANCE_FLAG 
,   HAS_BALANCE_ASSET_FLAG = B.HAS_BALANCE_ASSET_FLAG
,   HAS_TXN_FLAG = B.HAS_TXN_FLAG
,   HAS_TXN_ACTIVITY_FLAG = B.HAS_TXN_ACTIVITY_FLAG
,   IS_GROSS_ACTIVE = B.IS_GROSS_ACTIVE
WHERE CC_COBRA.WK_FR03_WD2_MIA.AGRMNT_ID = B.AGRMNT_ID
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*
CREATE MULTISET TABLE CC_COBRA.FR03_WD2_MIA ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      CREDIT_CARD_LOGO_CD SMALLINT,
      VINTAGE CHAR(8),
      ACQ_CHANNEL CHAR(5) NOT NULL COMPRESS 'BLANK',
      HAS_BALANCE CHAR(1) COMPRESS('N','Y'),
      HAS_BALANCE_ASSET CHAR(1) COMPRESS('N','Y'),
      IS_NEW CHAR(1) COMPRESS('N','Y'),
      HAS_TXN CHAR(1) COMPRESS('N','Y'),
      HAS_TXN_ACTIVITY CHAR(1) COMPRESS('N','Y'),
      IS_GROSS_ACTIVE CHAR(1) COMPRESS('N','Y'),
      STATUS CHAR(1) COMPRESS ('B','U','N'),
      HAS_PPI  CHAR(1) COMPRESS('N','Y'),
      VOLUME INT
      ) PRIMARY INDEX(REPORT_DT, ORG, CREDIT_CARD_LOGO_CD,VINTAGE)
;      
*/


DELETE FROM CC_COBRA.FR03_WD2_MIA WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR03_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR03_WD2_MIA
SELECT  A.REPORT_DT
      , A.ORG
      , A.CREDIT_CARD_LOGO_CD 
	  , A.VINTAGE
      , A.ACQ_CHANNEL
      , A.HAS_BALANCE_FLAG
	  , A.HAS_BALANCE_ASSET_FLAG
      , A.IS_NEW_FLAG
      , A.HAS_TXN_FLAG
      , A.HAS_TXN_ACTIVITY_FLAG
      , A.IS_GROSS_ACTIVE
      , A.STATUS
      , A.HAS_PPI_FLAG
      , COUNT(*)

FROM CC_COBRA.WK_FR03_WD2_MIA A
WHERE A.STATUS <> '*'
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 04: COLLECT DATA*/

/* DROP TABLE CC_COBRA.FR03_WD2;
CREATE SET TABLE CC_COBRA.FR03_WD2 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      V_ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      LOGO SMALLINT,
      EXTERNAL_STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC,
      ZERO_BAL_FLAG CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC,
      NEW_ACC_CT INTEGER,
      ALL_ACC_CT INTEGER,
      ALL_CARD_CT INTEGER,
      GROSS_ACTIVE_CT INTEGER,
      DEBIT_ACTIVE_CT INTEGER,
      MONTH_END_BAL_AMT DECIMAL(15,2)
      )
PRIMARY INDEX ( REPORT_DT );
*/

DELETE FROM CC_COBRA.FR03_WD2 WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR03_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR03_WD2
SELECT WD2.REPORT_DT
      , A.ORG_TX
      , A.V_ORG
      , CCA.CREDIT_CARD_LOGO_CD 
      , CASE WHEN STA.AGRMNT_STATUS_SUMMRY_VL IN ('8','9','P','T','F') THEN '*' 
             WHEN STA.AGRMNT_STATUS_SUMMRY_VL IN ('Z') THEN 'Z' 
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('A','B','C','Z','I','E','F','L','U')
              THEN BC1.AGRMNT_STATUS_SUMMRY_VL
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL = 'S' THEN 'U'
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL = 'T' THEN 'U'
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL = 'W' THEN 'C' 
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL = 'X' THEN 'C' 
             
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IN ('A','B','C','Z','I','E','F','L','U')
              THEN BC2.AGRMNT_STATUS_SUMMRY_VL
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL = 'S' THEN 'U'
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL = 'T' THEN 'U'
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL = 'W' THEN 'C' 
             
             WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IS NOT NULL 
              THEN 'O'
             WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IS NOT NULL 
              THEN 'O'
             ELSE ' '
             END AS EXTERNAL_STATUS  /*INCONSISTENT WITH BBR FOR Z/I STATUS*/
      , CASE WHEN TB.AGRMNT_ID IS NULL OR TB.BAL_CT = 0 --SETS TO 'Y' IF IN CREDIT OR A ZERO BAL
              THEN 'Y' 
             ELSE 'N' 
             END AS ZERO_BAL_FLAG
      , SUM(CASE WHEN A.ORIGNL_ADDED_DT/100 = WD2.REPORT_DT/100 
                  THEN 1
                 ELSE 0
                 END) AS NEW_ACC_CT
      , COUNT(*) AS ALL_ACC_CT 
      , SUM(ZEROIFNULL(AGRMNT_ACTVTY_QY)) AS ALL_CARD_CT
      , SUM(CASE WHEN GAI.AGRMNT_ID IS NOT NULL 
                  THEN 1
                 WHEN  TB.BAL_CT2 > 0 --INCLUDES CREDIT BALANCES AS GROSS ACTIVE
                  THEN 1
                 ELSE 0
                 END) AS GROSS_ACTIVE_CT 
      , SUM(CASE WHEN DAI.AGRMNT_ID IS NOT NULL 
                  THEN 1
                 ELSE 0
                 END) AS DEBIT_ACTIVE_CT 
      , SUM(TB.TOTAL_BAL) AS MONTH_END_BALANCE  

FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE A

JOIN CC_COBRA.WK_FR03_REPORT_DATE WD2
ON   A.ADDED_DT <= WD2.REPORT_DT
AND  (A.PURGED_DT IS NULL OR A.PURGED_DT > WD2.REPORT_DT)

JOIN GDW_VIEWS.CREDIT_CARD_AGREEMENT CCA
ON   A.AGRMNT_ID = CCA.AGRMNT_ID     
AND  CCA.SOURCE_END_DT = '3500-12-31'

LEFT JOIN GDW_VIEWS.AGREEMENT_STATUS_SUMMARY STA  
ON   A.AGRMNT_ID = STA.AGRMNT_ID
AND  STA.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026' /*L2BS-INTERNAL-STATUS*/
AND  WD2.REPORT_DT BETWEEN STA.SOURCE_START_DT AND STA.SOURCE_END_DT-1 

LEFT JOIN GDW_VIEWS.AGREEMENT_STATUS_SUMMARY BC1
ON   A.AGRMNT_ID = BC1.AGRMNT_ID
AND  BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023' /*L2BS-BLOCK-CODE1*/
AND  WD2.REPORT_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1 

LEFT JOIN GDW_VIEWS.AGREEMENT_STATUS_SUMMARY BC2
ON   A.AGRMNT_ID = BC2.AGRMNT_ID
AND  BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024' /*L2BS-BLOCK-CODE2*/
AND  WD2.REPORT_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1 

LEFT JOIN GDW_VIEWS.AGREEMENT_ACTIVITY_SUMMARY AAS
ON   A.AGRMNT_ID = AAS.AGRMNT_ID
AND  AAS.AGRMNT_ACTVTY_SUMMRY_TYPE_CD = '00500013' /*L2BS-NBR-UNBLKED-CARDS*/
AND  WD2.REPORT_DT BETWEEN AAS.SOURCE_START_DT AND AAS.SOURCE_END_DT-1 

LEFT JOIN 

(SELECT  AGRMNT_ID
       , SUM(BL_SUMMRY_AM) AS TOTAL_BAL
       , SUM(CASE WHEN BL_SUMMRY_AM < 0 THEN 1 ELSE 0 END) AS BAL_CT
       , SUM(CASE WHEN BL_SUMMRY_AM <> 0 THEN 1 ELSE 0 END) AS BAL_CT2 --INCLUDES CREDIT BALANCES
       
FROM       GDW_VIEWS.CC_AGREEMENT_BALANCE_SUMMARY T1
CROSS JOIN (SELECT REPORT_DT AS REPORT_DATE FROM CC_COBRA.WK_FR03_REPORT_DATE) T2
WHERE BL_SUMMRY_AM_CD = '00500003' /*CURR BAL*/  
AND T2.REPORT_DATE BETWEEN T1.SOURCE_START_DT AND T1.SOURCE_END_DT-1
GROUP BY 1 ) TB

ON A.AGRMNT_ID = TB.AGRMNT_ID

LEFT JOIN
(
SELECT AGRMNT_ID, 1 AS GROSS_ACTIVE_IND
FROM CC_COBRA.WK_FR03_MONTH_TXNS
GROUP BY 1
) GAI /*GROSS_ACTIVE_IND*/
ON A.AGRMNT_ID = GAI.AGRMNT_ID

LEFT JOIN
(
SELECT AGRMNT_ID, 1 AS DEBIT_ACTIVE_IND
FROM CC_COBRA.WK_FR03_MONTH_TXNS 
WHERE DEBIT_ACTIVE_IN = 1
GROUP BY 1
) DAI /*DEBIT_ACTIVE_IND*/
ON A.AGRMNT_ID = DAI.AGRMNT_ID

GROUP BY 1,2,3,4,5,6
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR03_WD2 INDEX ( REPORT_DT );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 05: DELETE DATA NOT WANTED FOR REPORTING*/

DELETE FROM CC_COBRA.FR03_WD2 WHERE EXTERNAL_STATUS = '*';

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.FR03_WD2 WHERE EXTERNAL_STATUS IN ('L','U','Z');

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.FR03_WD2 WHERE EXTERNAL_STATUS IN ('C') AND ZERO_BAL_FLAG = 'Y';

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE WORK TABLE*/

DELETE FROM CC_COBRA.WK_FR03_MONTH_TXNS ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR03'
;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR03';

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR03'
;

.QUIT 0;


