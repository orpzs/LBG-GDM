/************************************************************************/
/*JOB:      FR19 - AVIOS Monthly Extract                                */
/*VERSION:  C01J16v04 - amended views.sql                               */
/*DATE VERSION IMPLEMENTED: 2017-01-04                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/*C01J04                                                                */
/*C01J08                                                                */
/*C01J13                                                                */
/*FR09                                                                  */
/*FR15                                                                  */

/* 20180914PG - Code amended to included Deka Logo Codes. BIWT 5353.		*/

/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;
   
DATABASE CC_COBRA;

/*STEP 00: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*CHECK TO SEE IF PROCESSING LAST WORKING DAY OF MONTH - removed */

/*
SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1;
*/


/*INITIAL CHECKS TO SEE IF FR15 IS SUCCESSFUL AND HAS BEEN UPDATED (FIRST WORKING DAY) */

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPJOB;


/*INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_EVENTS_TO_EXCLUDE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF AGREEMENT_STATIC_DAILY IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J08';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_AGREEMENT_CHANNEL IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J13';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF FR09 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR09';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR19';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR19'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 01: UPDATE DATE PARAMETER TABLE*/

/*
CREATE SET TABLE CC_COBRA.WK_FR19_REPORT_DATE ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      MONTH_END_DT DATE FORMAT 'YY/MM/DD',
      PRIOR_MONTH_END_DT DATE FORMAT 'YY/MM/DD')
UNIQUE PRIMARY INDEX ( MONTH_END_DT );
*/


UPDATE CC_COBRA.WK_FR19_REPORT_DATE
SET MONTH_END_DT = 
(SELECT CAST(((CALENDAR_DATE/100*100)+1) AS DATE)-1 FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM  CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT)
   ,PRIOR_MONTH_END_DT = 
(SELECT ADD_MONTHS(CAST(((CALENDAR_DATE/100*100)+1) AS DATE),-1)-1 FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM  CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT)  
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR19_REPORT_DATE INDEX(MONTH_END_DT);

/*DISPLAY DATE INSERTED ABOVE FOR OUTPUT*/

SELECT * FROM CC_COBRA.WK_FR19_REPORT_DATE;


/*
 
----------------------------------------------------------------------------------------------------------
---
--- SECTION 1
--- Count of accounts & cards
----------------------------------------------------------------------------------------------------------
 
/*
DROP TABLE CC_COBRA.WK_FR19_CLOSING_ACCOUNTS;
CREATE SET TABLE CC_COBRA.WK_FR19_CLOSING_ACCOUNTS ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      ACCONT_IN_FORCE_IN BYTEINT COMPRESS (0,1),
      INT_STATUS CHAR(1) COMPRESS ('A','D','T','Z','F'),
      BC1 CHAR(1) COMPRESS '',
      BC2 CHAR(1) COMPRESS '',
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','170'),
      CREDIT_CARD_LOGO_CD SMALLINT COMPRESS (100,110,160),
      V_ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','170'),
      ANNIV BYTEINT  COMPRESS (0,1),
      ENHANCED_PRD BYTEINT COMPRESS (0,1),
      MONTH_END_DT DATE FORMAT 'YY/MM/DD')
PRIMARY INDEX ( AGRMNT_ID );
*/



/* 1 - CLEAR TABLE*/
DELETE FROM  CC_COBRA.WK_FR19_CLOSING_ACCOUNTS ALL;
 
/* 2 - Create closing accounts table */ 

/*JM: THE MAIN CHANGE HERE IS TO THE NOT EXISTS IN AGREEMENT RELATIONSHIP. BY ONLY INCLUDED THE 1'S YOU EXCLUDE ALL THE VERDE TRADES - THE BLOCK CODES MEAN IT ENDS UP VIRTUALLY THE SAME APART FROM 2*/
/*ONE IS CHARGED OFF ON VERDE IN MAY AND THE OTHER HAS HAD THE X STATUS CHANGED*/
/*THE OTHER CHANGE IS TO THE ANNIVERSARY DATE FOR VERDE MIGRATIONS - I'VE PICKED UP THE ADDED DATE FOR THE 120 ACCOUNT*/
INSERT INTO CC_COBRA.WK_FR19_CLOSING_ACCOUNTS
SELECT *
FROM
(
SELECT
DISTINCT A.AGRMNT_ID
,CASE WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('D','S','T','U','Y','Z','X')
       THEN 0
      WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IN ('D','S','T','U','Y','Z','X')
       THEN 0
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('H','P','X','Z','8','9','T','F') 
       THEN 0
      WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('C','W')
       AND BAL.BL_SUMMRY_AM >= 0
       THEN 0
      WHEN A.PURGED_DT <= DC.MONTH_END_DT THEN 0
      ELSE 1
 END AS ACCONT_IN_FORCE_IN
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ') AS INT_STATUS
,COALESCE(BC1.AGRMNT_STATUS_SUMMRY_VL,' ') AS BC1
,COALESCE(BC2.AGRMNT_STATUS_SUMMRY_VL,' ') AS BC2
,A.ORG_TX 
,B.CREDIT_CARD_LOGO_CD
,A.V_ORG
,CASE WHEN AR.AGRMNT_ID IS NULL AND EXTRACT(MONTH FROM A.ADDED_DT) = EXTRACT(MONTH FROM DC.MONTH_END_DT) AND EXTRACT(YEAR FROM A.ADDED_DT) <> EXTRACT(YEAR FROM DC.MONTH_END_DT)  THEN 1 
      WHEN AR.AGRMNT_ID IS NOT NULL AND EXTRACT(MONTH FROM A2.ADDED_DT) = EXTRACT(MONTH FROM DC.MONTH_END_DT) AND EXTRACT(YEAR FROM A2.ADDED_DT) <> EXTRACT(YEAR FROM DC.MONTH_END_DT)  THEN 1  
	  ELSE 0 
 END AS ANNIV
 ,CASE WHEN HC.HIGH_CHANNL_DESC LIKE '%Airmiles%' THEN 1 ELSE 0 END AS ENHANCED_PRD
,DC.MONTH_END_DT

FROM        CC_COBRA.CC_AGREEMENT_ADDED_DATE A
JOIN        GDW_VIEWS.CREDIT_CARD_AGREEMENT B
ON 			A.AGRMNT_ID = B.AGRMNT_ID
AND         B.SOURCE_END_DT = '3500/12/31'
AND         B.CREDIT_CARD_LOGO_CD IN ('100', '110', '160', '150', '120', '130', '360', '365' )  /* 20180914PG - DEKA LOGOS ADDED		*/
JOIN        CC_COBRA.WK_FR19_REPORT_DATE DC
ON          A.ADDED_DT <= DC.MONTH_END_DT
AND         (A.PURGED_DT IS NULL
         OR  A.PURGED_DT > DC.MONTH_END_DT)
LEFT JOIN   CC_COBRA.CC_AGREEMENT_CHANNEL CHNL
ON 			A.AGRMNT_ID = CHNL.AGRMNT_ID
LEFT JOIN   CC_COBRA.CC_HIGH_CHANNL_CD HC
ON          CHNL.HIGH_CHANNL_CD = HC.HIGH_CHANNL_CD
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON 			A.AGRMNT_ID = ASS.AGRMNT_ID
AND 		DC.MONTH_END_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND 		ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026' -- INTERNAL STATUS CODE
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC1
ON 			A.AGRMNT_ID = BC1.AGRMNT_ID
AND 		DC.MONTH_END_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1
AND 		BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023' -- BLOCK 1 CODE
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC2
ON 			A.AGRMNT_ID = BC2.AGRMNT_ID
AND 		DC.MONTH_END_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1
AND 		BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024' -- BLOCK 2 CODE
LEFT JOIN 	GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BAL
ON 			A.AGRMNT_ID = BAL.AGRMNT_ID
AND 		BAL.BL_SUMMRY_AM_CD = '00500003' -- CURRENT BALANCE
AND 		DC.MONTH_END_DT BETWEEN BAL.SOURCE_START_DT AND BAL.SOURCE_END_DT-1
/*PICK UP ADDED DATE OF 120 ACCOUNT WHERE IT HAS BEEN A MIGRATION*/
LEFT JOIN	GDW_VIEWSX.AGREEMENT_RELATIONSHIP AR
ON          A.AGRMNT_ID = AR.AGRMNT_ID
AND         AR.AGRMNT_RLTNSP_TYPE_CD = '00500002' --MIGRATIONS
LEFT JOIN   CC_COBRA.CC_AGREEMENT_ADDED_DATE A2
ON          AR.RELATD_AGRMNT_ID = A2.AGRMNT_ID --PICK UP 120 RECORD
) A
WHERE ACCONT_IN_FORCE_IN = 1 

AND INT_STATUS <> 'F'

AND NOT EXISTS
( /* 2.5 - Excludes previous account in trade chain - most recent account included only */
SELECT *
FROM GDW_VIEWS.AGREEMENT_RELATIONSHIP AR
WHERE AR.SOURCE_START_DT <= (SELECT MONTH_END_DT FROM CC_COBRA.WK_FR19_REPORT_DATE)  --there are a handful that don't have the same ssd as eff dt
AND A.AGRMNT_ID = AR.RELATD_AGRMNT_ID
) 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR19_CLOSING_ACCOUNTS INDEX ( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 3 - Create volatile table containing all CLOSING active platics */

/*
DROP TABLE CC_COBRA.WK_FR19_AVIOS_COF_CLOSE;
CREATE TABLE CC_COBRA.WK_FR19_AVIOS_COF_CLOSE (
 AGRMNT_ID INT
,COUNT_VISA_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_VISA_SEC SMALLINT COMPRESS (0,1)
,COUNT_MCARD_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_MCARD_SEC SMALLINT COMPRESS (0,1)
,COUNT_AMEX_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_SEC SMALLINT COMPRESS (0,1,2)
,COUNT_ACH SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_SMCARD_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_SMCARD_SEC SMALLINT COMPRESS (0,1,2)
,COUNT_AMEX_ACT_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_ACT_SEC SMALLINT COMPRESS (0,1,2)
)
UNIQUE PRIMARY INDEX(AGRMNT_ID);
*/

DELETE FROM CC_COBRA.WK_FR19_AVIOS_COF_CLOSE ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR19_AVIOS_COF_CLOSE
SELECT 
/* 308 Cards in March do not have a record in PARTY_CARD (at the month end position) - which would enable us to distinguish between primary/seconday cards holders. These default as primary card holders */
AGC.AGRMNT_ID, 
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '4' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END) AS COUNT_VISA_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '4' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END) AS COUNT_VISA_SEC,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '5' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END) AS COUNT_MCARD_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '5' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END) AS COUNT_MCARD_SEC,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END) AS COUNT_AMEX_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END) AS COUNT_AMEX_SEC,
COUNT(AGC.CARD_ID) COUNT_ACH ,
SUM((CASE WHEN CARD_NO.TCHNLY_TYPE_CD = '00000003' AND SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END)) AS COUNT_AMEX_SMCARD_PRI, -- CONTACTLESS SMART-CARD 
SUM((CASE WHEN CARD_NO.TCHNLY_TYPE_CD = '00000003' AND SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END)) AS COUNT_AMEX_SMCARD_SEC, -- CONTACTLESS SMART-CARD 
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' AND ACTIVE.CARD_ID IS NOT NULL THEN 1 ELSE 0 END) AS COUNT_AMEX_ACT_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' AND ACTIVE.CARD_ID IS NOT NULL THEN 1 ELSE 0 END) AS COUNT_AMEX_ACT_SEC

FROM  		CC_COBRA.WK_FR19_CLOSING_ACCOUNTS CCA
JOIN 		GDW_VIEWSX.AGREEMENT_CARD AGC 
ON 			CCA.AGRMNT_ID = AGC.AGRMNT_ID
AND			CCA.MONTH_END_DT BETWEEN AGC.SOURCE_START_DT AND AGC.SOURCE_END_DT -1 
AND 		AGC.AGRMNT_CARD_ROLE_CD = '00000001' -- Posting Account for card
/*  3.1 - Exclude all Cards with a Card Level block code - except V, E, H, J, K, M, O, P - as confirmed by design authority. These card block retain charging privileges. D (deceased) card blocks do retail charging privileges, however after discussions with MS - we will exclude these cards */ 
AND NOT EXISTS (SELECT NULL
                FROM   GDW_VIEWSX.CARD_STATUS_SUMMARY CSS
                WHERE  (SELECT MONTH_END_DT FROM CC_COBRA.WK_FR19_REPORT_DATE) BETWEEN CSS.SOURCE_START_DT AND CSS.SOURCE_END_DT -1 
                AND    AGC.CARD_ID = CSS.CARD_ID
                AND    CSS.CARD_STATUS_TYPE_CD = '00500005'    
                AND    SUBSTR(CSS.CARD_STATUS_SUMMRY_VL,1,1) NOT IN ('V', 'E', 'H', 'J', 'K', 'M', 'O', 'P')
                )  

JOIN       	GDW_VIEWSX.CARD_STATUS_SUMMARY CSS2
ON 			AGC.CARD_ID = CSS2.CARD_ID 
AND 		CSS2.CARD_STATUS_TYPE_CD = '00500004' -- SYSTEM STATUS CODE 
AND         CCA.MONTH_END_DT BETWEEN CSS2.SOURCE_START_DT AND CSS2.SOURCE_END_DT -1
AND 		CSS2.CARD_STATUS_SUMMRY_VL IN ('0','1') -- ACTIVE / PERMANENT / TEMPORARY  

JOIN		GDW_VIEWS.CARD CARD_NO
ON 			AGC.CARD_ID = CARD_NO.CARD_ID 
AND 		CCA.MONTH_END_DT BETWEEN CARD_NO.SOURCE_START_DT AND CARD_NO.SOURCE_END_DT -1

/* 3.2 - Return just those cards that have not expired		*/
JOIN		GDW_VIEWSX.CARD_ACTIVITY_HISTORY CAH
ON 			CAH.CARD_ID = AGC.CARD_ID    
AND         CCA.MONTH_END_DT BETWEEN CAH.SOURCE_START_DT AND CAH.SOURCE_END_DT -1
AND 		CARD_ACTVTY_TYPE_CD = '00500003' -- CODE FOR EXPIRY DATE
AND 		CARD_ACTVTY_DT >= CCA.MONTH_END_DT

/* 3.3 - Pri/Sec Card Indicator		*/ 
LEFT JOIN   GDW_VIEWS.PARTY_CARD ADC
ON 			ADC.CARD_ID = AGC.CARD_ID
AND         CCA.MONTH_END_DT BETWEEN ADC.SOURCE_START_DT AND ADC.SOURCE_END_DT -1


LEFT JOIN	
( 
/* 3.4 - Identify Active Plastics - need to be able to distinguish between Primary & Secondary Active Plastics */
SELECT 
DISTINCT EVENT.CARD_ID
FROM
( 
/* 3.5 - Retrieve every event ID associated to a Retail Amex Transaction */
SELECT 
TXN.EVENT_ID
FROM GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST TXN
JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS LKUP
ON TXN.EVENT_ACTVTY_CD = LKUP.EVENT_ACTVTY_CD
WHERE TXN.SOURCE_START_DT/100 = (SELECT MONTH_END_DT/100 FROM CC_COBRA.WK_FR19_REPORT_DATE) 
AND LKUP.TRNSCN_DERVTN_GRP = 'RETAIL'
AND SUBSTR(TXN.CARD_TRNSCN_REFRNC_NO,1,1) = 'A'
) TR1 
LEFT JOIN GDW_VIEWSX.CARD_EVENT EVENT
ON TR1.EVENT_ID = EVENT.EVENT_ID
) ACTIVE
ON ACTIVE.CARD_ID = AGC.CARD_ID
GROUP BY 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR19_AVIOS_COF_CLOSE INDEX ( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 4 - Load Closing summerised data from stages 2 & 3 into the summary table */

/*
DROP TABLE  CC_COBRA.WK_FR19_SUMMARY_TABLE;
CREATE TABLE CC_COBRA.WK_FR19_SUMMARY_TABLE (
  MONTH_END_DT DATE
 ,RECORD_TYPE CHAR(16) COMPRESS ('CLOSING', 'OPENING')
 ,ORG_TX CHAR(3) COMPRESS ('120','170')
 ,V_ORG CHAR(3) COMPRESS ('120','170')
 ,CREDIT_CARD_LOGO_CD SMALLINT
 ,ENHANCED_PRD BYTEINT COMPRESS (0,1)
 ,ANNIV BYTEINT  COMPRESS (0,1)
 ,COUNT_ACCOUNTS INTEGER
 ,COUNT_CIF_PRI INTEGER
 ,COUNT_CIF_SEC INTEGER
 ,COUNT_SM_CARD_PRI INTEGER
 ,COUNT_SM_CARD_SEC INTEGER
 ,COUNT_ACT_PRI INTEGER
 ,COUNT_ACT_SEC INTEGER
 ,FOREIGN_IND INTEGER
 ,TRAN_NO INTEGER
 ,TRAN_AMT DECIMAL(15,2)
) PRIMARY INDEX(MONTH_END_DT);
*/


DELETE FROM CC_COBRA.WK_FR19_SUMMARY_TABLE ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR19_SUMMARY_TABLE
SELECT
A.MONTH_END_DT
, 'CLOSING' AS RECORD_TYPE
, A.ORG_TX
, A.V_ORG
, A.CREDIT_CARD_LOGO_CD
, A.ENHANCED_PRD
, A.ANNIV
,COUNT(A.AGRMNT_ID) AS COUNT_ACCOUNTS
,SUM(B.COUNT_AMEX_PRI) AS COUNT_CIF_PRI
,SUM(B.COUNT_AMEX_SEC) AS COUNT_CIF_SEC
,SUM(B.COUNT_AMEX_SMCARD_PRI) AS COUNT_SM_CARD_PRI
,SUM(B.COUNT_AMEX_SMCARD_SEC) AS COUNT_SM_CARD_SEC
,SUM(B.COUNT_AMEX_ACT_PRI) AS COUNT_ACT_PRI
,SUM(B.COUNT_AMEX_ACT_SEC) AS COUNT_ACT_SEC
,0 AS FOREIGN_IND
,0 AS TRAN_NO
,CAST(0 AS DECIMAL(15,2)) AS TRAN_AMT
FROM
CC_COBRA.WK_FR19_CLOSING_ACCOUNTS A
LEFT OUTER JOIN CC_COBRA.WK_FR19_AVIOS_COF_CLOSE B
ON A.AGRMNT_ID = B.AGRMNT_ID
GROUP BY
1,2,3,4,5,6,7,15,16,17
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*
DROP TABLE CC_COBRA.WK_FR19_OPENING_ACCOUNTS;
CREATE SET TABLE CC_COBRA.WK_FR19_OPENING_ACCOUNTS ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      ACCONT_IN_FORCE_IN BYTEINT COMPRESS (0,1),
      INT_STATUS CHAR(1) COMPRESS ('A','D','T','Z','F'),
      BC1 CHAR(1) COMPRESS '',
      BC2 CHAR(1) COMPRESS '',
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','170'),
      CREDIT_CARD_LOGO_CD SMALLINT COMPRESS (100,110,160),
      V_ORG CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','170'),
      ANNIV BYTEINT  COMPRESS (0,1),
      ENHANCED_PRD BYTEINT COMPRESS (0,1),
      MONTH_END_DT DATE FORMAT 'YY/MM/DD',
      PRIOR_MONTH_END_DT DATE FORMAT 'YY/MM/DD')
PRIMARY INDEX ( AGRMNT_ID );
*/

 
/* 5 - Drop opening accounts table */
DELETE FROM CC_COBRA.WK_FR19_OPENING_ACCOUNTS ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
 
/* 6 - Create opening accounts table */ 
INSERT INTO CC_COBRA.WK_FR19_OPENING_ACCOUNTS
SELECT *
FROM
(
SELECT
DISTINCT A.AGRMNT_ID
,CASE WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('D','S','T','U','Y','Z', 'X')
       THEN 0
      WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IN ('D','S','T','U','Y','Z', 'X')
       THEN 0
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('H','P','X','Z','8','9','T','F') 
       THEN 0
      WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('C','W')
       AND BAL.BL_SUMMRY_AM >= 0
       THEN 0
      WHEN A.PURGED_DT <= DC.PRIOR_MONTH_END_DT THEN 0
      ELSE 1
 END AS ACCONT_IN_FORCE_IN
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ') AS INT_STATUS
,COALESCE(BC1.AGRMNT_STATUS_SUMMRY_VL,' ') AS BC1
,COALESCE(BC2.AGRMNT_STATUS_SUMMRY_VL,' ') AS BC2
,A.ORG_TX 
,B.CREDIT_CARD_LOGO_CD
,A.V_ORG
,CASE WHEN AR.AGRMNT_ID IS NULL AND EXTRACT(MONTH FROM A.ADDED_DT) = EXTRACT(MONTH FROM DC.MONTH_END_DT) AND EXTRACT(YEAR FROM A.ADDED_DT) <> EXTRACT(YEAR FROM DC.MONTH_END_DT)  THEN 1 
      WHEN AR.AGRMNT_ID IS NOT NULL AND EXTRACT(MONTH FROM A2.ADDED_DT) = EXTRACT(MONTH FROM DC.MONTH_END_DT) AND EXTRACT(YEAR FROM A2.ADDED_DT) <> EXTRACT(YEAR FROM DC.MONTH_END_DT)  THEN 1  
	  ELSE 0 
 END AS ANNIV
,CASE WHEN HC.HIGH_CHANNL_DESC LIKE '%Airmiles%' THEN 1 ELSE 0 END AS ENHANCED_PRD
,DC.MONTH_END_DT
,DC.PRIOR_MONTH_END_DT
/* 6.2 - Revised acc open date */
FROM        CC_COBRA.CC_AGREEMENT_ADDED_DATE A
JOIN        GDW_VIEWS.CREDIT_CARD_AGREEMENT B
ON 			A.AGRMNT_ID = B.AGRMNT_ID
AND         B.SOURCE_END_DT = '3500/12/31'
 /* 6.1 - Limit to AVIOS Credit Card Logo's only */ 
AND         B.CREDIT_CARD_LOGO_CD IN ('100', '110', '160', '150', '120', '130', '360', '365' )  /* 20180914PG - DEKA LOGOS ADDED		*/
JOIN        CC_COBRA.WK_FR19_REPORT_DATE DC
ON          A.ADDED_DT <= DC.PRIOR_MONTH_END_DT
AND         (A.PURGED_DT IS NULL
         OR  A.PURGED_DT > DC.PRIOR_MONTH_END_DT)
/* 6.3 - Channel */
LEFT JOIN   CC_COBRA.CC_AGREEMENT_CHANNEL CHNL
ON 			A.AGRMNT_ID = CHNL.AGRMNT_ID
LEFT JOIN   CC_COBRA.CC_HIGH_CHANNL_CD HC
ON          CHNL.HIGH_CHANNL_CD = HC.HIGH_CHANNL_CD
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON 			A.AGRMNT_ID = ASS.AGRMNT_ID
AND 		DC.PRIOR_MONTH_END_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND 		ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026' -- INTERNAL STATUS CODE
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC1
ON 			A.AGRMNT_ID = BC1.AGRMNT_ID
AND 		DC.PRIOR_MONTH_END_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1
AND 		BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023' -- BLOCK 1 CODE
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC2
ON 			A.AGRMNT_ID = BC2.AGRMNT_ID
AND 		DC.PRIOR_MONTH_END_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1
AND 		BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024' -- BLOCK 2 CODE
LEFT JOIN 	GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BAL
ON 			A.AGRMNT_ID = BAL.AGRMNT_ID
AND 		BAL.BL_SUMMRY_AM_CD = '00500003' -- CURRENT BALANCE
AND 		DC.PRIOR_MONTH_END_DT BETWEEN BAL.SOURCE_START_DT AND BAL.SOURCE_END_DT-1
/*PICK UP ADDED DATE OF 120 ACCOUNT WHERE IT HAS BEEN A MIGRATION*/
LEFT JOIN	GDW_VIEWSX.AGREEMENT_RELATIONSHIP AR
ON          A.AGRMNT_ID = AR.AGRMNT_ID
AND         AR.AGRMNT_RLTNSP_TYPE_CD = '00500002' --MIGRATIONS
LEFT JOIN   CC_COBRA.CC_AGREEMENT_ADDED_DATE A2
ON          AR.RELATD_AGRMNT_ID = A2.AGRMNT_ID --PICK UP 120 RECORD
) A
WHERE ACCONT_IN_FORCE_IN = 1 
/* 6.4 - Standard exclusion - EXCLUDE CHARGED OFF ACCOUNTS. CAN ALSO BE USED TO EXCLUDE FRAUD - DETAILS BELOW. */
AND INT_STATUS <> 'F'
/* 6.5 - Excludes previous account in trade chain - most recent account included only */
AND NOT EXISTS
( 
SELECT *
FROM GDW_VIEWS.AGREEMENT_RELATIONSHIP AR
WHERE AR.SOURCE_START_DT <= (SELECT PRIOR_MONTH_END_DT FROM CC_COBRA.WK_FR19_REPORT_DATE)  --there are a handful that don't have the same ssd
AND A.AGRMNT_ID = AR.RELATD_AGRMNT_ID
) 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR19_OPENING_ACCOUNTS INDEX ( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 7 - Create volatile table containing all OPENING active platics */

/*
DROP TABLE CC_COBRA.WK_FR19_AVIOS_COF_OPEN;
CREATE TABLE CC_COBRA.WK_FR19_AVIOS_COF_OPEN (
 AGRMNT_ID INT
,COUNT_VISA_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_VISA_SEC SMALLINT COMPRESS (0,1)
,COUNT_MCARD_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_MCARD_SEC SMALLINT COMPRESS (0,1)
,COUNT_AMEX_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_SEC SMALLINT COMPRESS (0,1,2)
,COUNT_ACH SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_SMCARD_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_SMCARD_SEC SMALLINT COMPRESS (0,1,2)
,COUNT_AMEX_ACT_PRI SMALLINT COMPRESS (1,2,4)
,COUNT_AMEX_ACT_SEC SMALLINT COMPRESS (0,1,2)
)
UNIQUE PRIMARY INDEX(AGRMNT_ID);
*/

DELETE FROM CC_COBRA.WK_FR19_AVIOS_COF_OPEN ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR19_AVIOS_COF_OPEN
SELECT 
/* 308 Cards in March do not have a record in PARTY_CARD (at the month end position) - which would enable us to distinguish between primary/seconday cards holders. These default as primary card holders */
AGC.AGRMNT_ID, 
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '4' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END) AS COUNT_VISA_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '4' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END) AS COUNT_VISA_SEC,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '5' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END) AS COUNT_MCARD_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '5' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END) AS COUNT_MCARD_SEC,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END) AS COUNT_AMEX_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END) AS COUNT_AMEX_SEC,
COUNT(AGC.CARD_ID) COUNT_ACH ,
SUM((CASE WHEN CARD_NO.TCHNLY_TYPE_CD = '00000003' AND SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' THEN 1 ELSE 0 END)) AS COUNT_AMEX_SMCARD_PRI, -- CONTACTLESS SMART-CARD 
SUM((CASE WHEN CARD_NO.TCHNLY_TYPE_CD = '00000003' AND SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' THEN 1 ELSE 0 END)) AS COUNT_AMEX_SMCARD_SEC, -- CONTACTLESS SMART-CARD 
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') = '00000001' AND ACTIVE.CARD_ID IS NOT NULL THEN 1 ELSE 0 END) AS COUNT_AMEX_ACT_PRI,
SUM(CASE WHEN SUBSTR(TRIM(CARD_NO.CARD_NO),1,1) = '3' AND COALESCE(ADC.PARTY_CARD_ROLE_TYPE_CD, '00000001') <> '00000001' AND ACTIVE.CARD_ID IS NOT NULL THEN 1 ELSE 0 END) AS COUNT_AMEX_ACT_SEC

FROM  		CC_COBRA.WK_FR19_OPENING_ACCOUNTS CCA
JOIN 		GDW_VIEWSX.AGREEMENT_CARD AGC 
ON 			CCA.AGRMNT_ID = AGC.AGRMNT_ID
AND			CCA.PRIOR_MONTH_END_DT BETWEEN AGC.SOURCE_START_DT AND AGC.SOURCE_END_DT -1 
AND 		AGC.AGRMNT_CARD_ROLE_CD = '00000001' -- Posting Account for card
/*  7.1 - Exclude all Cards with a Card Level block code - except V, E, H, J, , K, M, O, P - as confirmed by design authority. These card block retain charging privileges. D (deceased) card blocks do retail charging privileges, however after discussions with MS - we will exclude these cards */ 
AND NOT EXISTS (SELECT NULL
                FROM   GDW_VIEWSX.CARD_STATUS_SUMMARY CSS
                WHERE  (SELECT PRIOR_MONTH_END_DT FROM CC_COBRA.WK_FR19_REPORT_DATE) BETWEEN CSS.SOURCE_START_DT AND CSS.SOURCE_END_DT -1 
                AND    AGC.CARD_ID = CSS.CARD_ID
                AND    CSS.CARD_STATUS_TYPE_CD = '00500005'    
                AND    SUBSTR(CSS.CARD_STATUS_SUMMRY_VL,1,1) NOT IN ('V', 'E', 'H', 'J', 'K', 'M', 'O', 'P')
               )  
                
JOIN       	GDW_VIEWSX.CARD_STATUS_SUMMARY CSS2
ON 			AGC.CARD_ID = CSS2.CARD_ID 
AND 		CSS2.CARD_STATUS_TYPE_CD = '00500004' -- SYSTEM STATUS CODE 
AND         CCA.PRIOR_MONTH_END_DT BETWEEN CSS2.SOURCE_START_DT AND CSS2.SOURCE_END_DT -1
AND 		CSS2.CARD_STATUS_SUMMRY_VL IN ('0','1') -- ACTIVE / PERMANENT / TEMPORARY  

JOIN		GDW_VIEWS.CARD CARD_NO
ON 			AGC.CARD_ID = CARD_NO.CARD_ID 
AND 		CCA.PRIOR_MONTH_END_DT BETWEEN CARD_NO.SOURCE_START_DT AND CARD_NO.SOURCE_END_DT -1

/* 3.2 - Return just those cards that have not expired		*/
JOIN		GDW_VIEWSX.CARD_ACTIVITY_HISTORY CAH
ON 			CAH.CARD_ID = AGC.CARD_ID    
AND         CCA.PRIOR_MONTH_END_DT BETWEEN CAH.SOURCE_START_DT AND CAH.SOURCE_END_DT -1
AND 		CARD_ACTVTY_TYPE_CD = '00500003' -- CODE FOR EXPIRY DATE
AND 		CARD_ACTVTY_DT >= CCA.PRIOR_MONTH_END_DT

/* 3.3 - Pri/Sec Card Indicator		*/ 
LEFT JOIN   GDW_VIEWS.PARTY_CARD ADC
ON 			ADC.CARD_ID = AGC.CARD_ID
AND         CCA.PRIOR_MONTH_END_DT BETWEEN ADC.SOURCE_START_DT AND ADC.SOURCE_END_DT -1


LEFT JOIN	
( 
/* 3.4 - Identify Active Plastics - need to be able to distinguish between Primary & Secondary Active Plastics */
SELECT 
DISTINCT EVENT.CARD_ID
FROM
( 
/* 3.5 - Retrieve every event ID associated to a Retail Amex Transaction */
SELECT 
TXN.EVENT_ID
FROM GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST TXN
JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS LKUP
ON TXN.EVENT_ACTVTY_CD = LKUP.EVENT_ACTVTY_CD
WHERE TXN.SOURCE_START_DT/100 = (SELECT PRIOR_MONTH_END_DT/100 FROM CC_COBRA.WK_FR19_REPORT_DATE) 
AND LKUP.TRNSCN_DERVTN_GRP = 'RETAIL'
AND SUBSTR(TXN.CARD_TRNSCN_REFRNC_NO,1,1) = 'A'
) TR1 
LEFT JOIN GDW_VIEWSX.CARD_EVENT EVENT
ON TR1.EVENT_ID = EVENT.EVENT_ID
) ACTIVE
ON ACTIVE.CARD_ID = AGC.CARD_ID
GROUP BY 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR19_AVIOS_COF_CLOSE INDEX ( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 8 - Load Opening summerised data from stages 6 & 7 into the summary table */
INSERT INTO CC_COBRA.WK_FR19_SUMMARY_TABLE
SELECT
A.MONTH_END_DT
, 'OPENING' AS RECORD_TYPE
, A.ORG_TX
, A.V_ORG
, A.CREDIT_CARD_LOGO_CD
, A.ENHANCED_PRD
, A.ANNIV
,COUNT(A.AGRMNT_ID) AS COUNT_ACCOUNTS
,SUM(B.COUNT_AMEX_PRI) AS COUNT_CIF_PRI
,SUM(B.COUNT_AMEX_SEC) AS COUNT_CIF_SEC
,SUM(B.COUNT_AMEX_SMCARD_PRI) AS COUNT_SM_CARD_PRI
,SUM(B.COUNT_AMEX_SMCARD_SEC) AS COUNT_SM_CARD_SEC
,SUM(B.COUNT_AMEX_ACT_PRI) AS COUNT_ACT_PRI
,SUM(B.COUNT_AMEX_ACT_SEC) AS COUNT_ACT_SEC
,0 AS FOREIGN_IND
,0 AS TRAN_NO
,CAST(0 AS DECIMAL(15,2)) AS TRAN_AMT
FROM CC_COBRA.WK_FR19_OPENING_ACCOUNTS A
LEFT OUTER JOIN CC_COBRA.WK_FR19_AVIOS_COF_OPEN B
ON A.AGRMNT_ID = B.AGRMNT_ID
GROUP BY
1,2,3,4,5,6,7,15,16,17 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 9 - Insert new accounts */
/*JM MAIN CHANGE HERE IS TO USE THE ADDED DATE - ADDITIONALLY THERE IS A STEP TO REMOVE MIGRATIONS FOR VERDE - THESE WOULD BE PICKED UP USING THE ADDED DATE*/
INSERT INTO CC_COBRA.WK_FR19_SUMMARY_TABLE
SELECT
A.MONTH_END_DT
, 'NEW' AS RECORD_TYPE
, A.ORG_TX
, A.V_ORG
, A.CREDIT_CARD_LOGO_CD
, A.ENHANCED_PRD
, A.ANNIV
,COUNT(A.AGRMNT_ID) AS COUNT_ACCOUNTS
,SUM(B.COUNT_AMEX_PRI) AS COUNT_CIF_PRI
,SUM(B.COUNT_AMEX_SEC) AS COUNT_CIF_SEC
,SUM(B.COUNT_AMEX_SMCARD_PRI) AS COUNT_SM_CARD_PRI
,SUM(B.COUNT_AMEX_SMCARD_SEC) AS COUNT_SM_CARD_SEC
,SUM(B.COUNT_AMEX_ACT_PRI) AS COUNT_ACT_PRI
,SUM(B.COUNT_AMEX_ACT_SEC) AS COUNT_ACT_SEC
,0 AS FOREIGN_IND
,0 AS TRAN_NO
,CAST(0 AS DECIMAL(15,2)) AS TRAN_AMT
FROM		CC_COBRA.WK_FR19_CLOSING_ACCOUNTS A
LEFT JOIN 	CC_COBRA.WK_FR19_AVIOS_COF_CLOSE B
ON 			A.AGRMNT_ID = B.AGRMNT_ID
INNER JOIN 	CC_COBRA.CC_AGREEMENT_ADDED_DATE ACC_OPN_NEW
ON 			A.AGRMNT_ID = ACC_OPN_NEW.AGRMNT_ID
WHERE		ACC_OPN_NEW.ADDED_DT/100 = A.MONTH_END_DT/100
AND 		NOT EXISTS
( /* 9.1 -  EXCLUDES MIGRATIONS WHICH WOULD CAUSE DUPLICATION */
SELECT *
FROM  GDW_VIEWS.AGREEMENT_RELATIONSHIP ARM
WHERE AGRMNT_RLTNSP_TYPE_CD = '00500002' 
AND   ARM.SOURCE_START_DT <= A.MONTH_END_DT
AND   A.AGRMNT_ID = ARM.AGRMNT_ID
)
AND 		NOT EXISTS
( /* 9.2 -  EXCLUDES PREVIOUS ACCOUNT IN TRADE CHAIN - MOST RECENT ACCOUNT INCLUDED ONLY - THIS WOULD EXCLUDE RECORDS THAT WERE OPENED AND THEN TRADED IN THE SAME MONTH */
SELECT *
FROM GDW_VIEWS.AGREEMENT_RELATIONSHIP AR
WHERE AGRMNT_RLTNSP_TYPE_CD = '00500001' 
-- AGRMNT_RLTNSP_TYPE_CD '00500001' Account 
-- has been traded from another account.
AND AR.SOURCE_START_DT <= A.MONTH_END_DT
AND A.AGRMNT_ID = AR.RELATD_AGRMNT_ID
) 
GROUP BY 
1,2,3,4,5,6,7,15,16,17;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 10 - INSERT CLOSED ACCOUNTS - LOOK AT THE ACCOUNTS PRESENT IN THE OPENING POOL THAT ARE NOT PRESENT WITHIN THE CLOSING POOL. THEN RETRIEVE THEIR BLOCK CODE ATTRIBUTES AS AT CLOSING DATE*/
/*JM: MAIN CHANGE WAS TO REMOVE THE CHECK IF LAST IN CHAIN AS IF THERE WAS A TRADE TO A NON AMEX - IT WOULD STILL BE A PRODUCT CLOSURE*/
INSERT INTO CC_COBRA.WK_FR19_SUMMARY_TABLE
SELECT
 B.MONTH_END_DT
,(CASE WHEN BC1.AGRMNT_STATUS_SUMMRY_VL IN ('C', 'L', 'S') THEN 'ATTRITION-V'
       WHEN BC2.AGRMNT_STATUS_SUMMRY_VL IN ('C', 'L', 'S') THEN 'ATTRITION-V' 
       ELSE 'ATTRITION-I'
  END) AS RECORD_TYPE 
,B.ORG_TX
,B.V_ORG
,B.CREDIT_CARD_LOGO_CD
,B.ENHANCED_PRD
,B.ANNIV 
,COUNT(B.AGRMNT_ID) AS COUNT_ACCOUNTS
,SUM(ZEROIFNULL(C.COUNT_AMEX_PRI)) AS COUNT_CIF_PRI
,SUM(ZEROIFNULL(C.COUNT_AMEX_SEC)) AS COUNT_CIF_SEC
,SUM(ZEROIFNULL(C.COUNT_AMEX_SMCARD_PRI)) AS COUNT_SM_CARD_PRI
,SUM(ZEROIFNULL(C.COUNT_AMEX_SMCARD_SEC)) AS COUNT_SM_CARD_SEC
,SUM(ZEROIFNULL(C.COUNT_AMEX_ACT_PRI)) AS COUNT_ACT_PRI
,SUM(ZEROIFNULL(C.COUNT_AMEX_ACT_SEC)) AS COUNT_ACT_SEC
,0 AS FOREIGN_IND
,0 AS TRAN_NO
,CAST(0 AS DECIMAL(15,2)) AS TRAN_AMT
FROM
( 
SELECT 
AGRMNT_ID, ORG_TX, CREDIT_CARD_LOGO_CD
FROM CC_COBRA.WK_FR19_OPENING_ACCOUNTS
MINUS
SELECT 
AGRMNT_ID, ORG_TX, CREDIT_CARD_LOGO_CD
FROM CC_COBRA.WK_FR19_CLOSING_ACCOUNTS
) A
LEFT JOIN 	CC_COBRA.WK_FR19_OPENING_ACCOUNTS B
ON 			A.AGRMNT_ID = B.AGRMNT_ID
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC1
ON 			A.AGRMNT_ID = BC1.AGRMNT_ID
AND 		B.MONTH_END_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1
AND 		BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023' -- BLOCK 1 CODE
LEFT JOIN 	GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC2
ON 			A.AGRMNT_ID = BC2.AGRMNT_ID
AND 		B.MONTH_END_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1
AND 		BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024' -- BLOCK 2 CODE
LEFT JOIN 	CC_COBRA.WK_FR19_AVIOS_COF_OPEN C
ON 			A.AGRMNT_ID = C.AGRMNT_ID
GROUP BY
1,2,3,4,5,6,7,15,16,17;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

----------------------------------------------------------------------------------------------------------
---
--- SECTION 2 
--- Balance data
----------------------------------------------------------------------------------------------------------
 
/* 11 - Insert all of the spend data into the summary table */
INSERT INTO CC_COBRA.WK_FR19_SUMMARY_TABLE
SELECT 
DC.MONTH_END_DT
,CASE 	WHEN TRIM(LKUP.TRNSCN_DERVTN_GRP) = 'RETAIL' AND FOREIGN_IND = 0 THEN 'RETAIL - DOM'
		WHEN TRIM(LKUP.TRNSCN_DERVTN_GRP) = 'RETAIL' AND FOREIGN_IND = 1 THEN 'RETAIL - FOREIGN'
		WHEN TRIM(LKUP.TRNSCN_DERVTN_GRP) = 'CASH' AND TXN.EVENT_ACTVTY_CD = '00508051' AND FOREIGN_IND = 0 THEN 'CSH - LBG - DOM' 
		WHEN TRIM(LKUP.TRNSCN_DERVTN_GRP) = 'CASH' AND TXN.EVENT_ACTVTY_CD = '00508051' AND FOREIGN_IND = 1 THEN 'CSH - LBG - FOR'
		WHEN TRIM(LKUP.TRNSCN_DERVTN_GRP) = 'CASH' AND TXN.EVENT_ACTVTY_CD <> '00508051' AND FOREIGN_IND = 0 THEN 'CSH - OTH - DOM' 
		WHEN TRIM(LKUP.TRNSCN_DERVTN_GRP) = 'CASH' AND TXN.EVENT_ACTVTY_CD <> '00508051' AND FOREIGN_IND = 1 THEN 'CSH - OTH - FOR'
 END RECORD_TYPE 
,A.ORG_TX
,ACC_OPN_NEW.V_ORG
,A.CREDIT_CARD_LOGO_CD
,0 AS ENHANCED_PRD
,0 AS ANNIV
,SUM(0) AS COUNT_ACCOUNTS
,SUM(0) AS COUNT_CIF_PRI
,SUM(0) AS COUNT_CIF_SEC
,SUM(0) AS COUNT_SM_CARD_PRI
,SUM(0) AS COUNT_SM_CARD_SEC
,SUM(0) AS COUNT_ACT_PRI
,SUM(0) AS COUNT_ACT_SEC
,CASE 	WHEN TRIM(TXN.MRCHNT_CONTRY_CD) IS NULL THEN 0 
		WHEN TRIM(TXN.MRCHNT_CONTRY_CD) = 'GBR' THEN 0
		WHEN TRIM(TXN.MRCHNT_CONTRY_CD) = '826' THEN 0 
		ELSE 1 
 END AS FOREIGN_IND
,COUNT(TXN.CARD_TRNSCN_REFRNC_NO) AS TRAN_NO
,SUM(EVENT_AM) AS TRAN_AMT 
FROM  		GDW_VIEWSX.CREDIT_CARD_AGREEMENT A
JOIN  		CC_COBRA.WK_FR19_REPORT_DATE DC
ON 			DC.MONTH_END_DT BETWEEN A.SOURCE_START_DT AND A.SOURCE_END_DT-1
AND	 		A.CREDIT_CARD_LOGO_CD IN ('100', '110', '160', '150', '120', '130', '360', '365' )  /* 20180914PG - DEKA LOGOS ADDED		*/
JOIN		GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST TXN
ON 			TXN.AGRMNT_ID = A.AGRMNT_ID
AND         TXN.SOURCE_START_DT/100 = DC.MONTH_END_DT/100 
AND         SUBSTR(TXN.CARD_TRNSCN_REFRNC_NO,1,1) = 'A'
AND         NOT EXISTS (SELECT NULL FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE E WHERE TXN.EVENT_ID = E.EVENT_ID)
JOIN 		CC_COBRA.TRNSCN_DERVTN_GROUPS LKUP
ON 			TXN.EVENT_ACTVTY_CD = LKUP.EVENT_ACTVTY_CD
AND         LKUP.TRNSCN_DERVTN_GRP IN ('RETAIL', 'CASH')
JOIN		CC_COBRA.CC_AGREEMENT_ADDED_DATE ACC_OPN_NEW
ON 			A.AGRMNT_ID = ACC_OPN_NEW.AGRMNT_ID         
GROUP BY 1,2,3,4,5,6,7,15
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 12 - Insert Balance data into summary table */
INSERT INTO CC_COBRA.WK_FR19_SUMMARY_TABLE
SELECT 
DC.MONTH_END_DT
,BAL.BAL_TYPE AS RECORD_TYPE
,CCA.ORG_TX
,ACC_OPN_NEW.V_ORG
,CCA.CREDIT_CARD_LOGO_CD
,0 AS ENHANCED_PRD
,0 AS ANNIV
,SUM(0) AS COUNT_ACCOUNTS
,SUM(0) AS COUNT_CIF_PRI
,SUM(0) AS COUNT_CIF_SEC
,SUM(0) AS COUNT_SM_CARD_PRI
,SUM(0) AS COUNT_SM_CARD_SEC
,SUM(0) AS COUNT_ACT_PRI
,SUM(0) AS COUNT_ACT_SEC
,SUM(0) AS FOREIGN_IND
,SUM(0) AS TRAN_NO
,SUM(BAL.BALANCE) AS BALANCE
FROM 		GDW_VIEWSX.CREDIT_CARD_AGREEMENT CCA
JOIN  		CC_COBRA.WK_FR19_REPORT_DATE DC
ON 			DC.MONTH_END_DT BETWEEN CCA.SOURCE_START_DT AND CCA.SOURCE_END_DT-1
AND	 		CCA.CREDIT_CARD_LOGO_CD IN ('100', '110', '160', '150', '120', '130', '360', '365' )  /* 20180914PG - DEKA LOGOS ADDED		*/
JOIN
(
SELECT AGRMNT_ID 
	  ,(CASE WHEN BALANC_TYPE_CD IN ('ISTAT', 'RNIBB') THEN 'CURRENT' ELSE 'REVOLVER' END) AS BAL_TYPE 
      ,SUM(CLOSE_BALANC_AM) BALANCE
FROM  CC_COBRA.FR15_AGREEMENT_BALANCE_WALK BW
JOIN  CC_COBRA.WK_FR19_REPORT_DATE DC
ON 	  DC.MONTH_END_DT = BW.PERIOD_END_DT
GROUP BY 1,2) BAL
ON    BAL.AGRMNT_ID = CCA.AGRMNT_ID
JOIN  CC_COBRA.CC_AGREEMENT_ADDED_DATE ACC_OPN_NEW
ON    CCA.AGRMNT_ID = ACC_OPN_NEW.AGRMNT_ID
GROUP BY 1,2,3,4,5,6,7
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 
CREATE SET TABLE CC_COBRA.FR19_AVIOS_SUMMARY ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (MONTH_END_DT DATE FORMAT 'YY/MM/DD',
      ORG_TX CHAR(3),
      V_ORG CHAR(3),
      BASE_OPN_PRI INTEGER,
      PREM_OPN_PRI INTEGER,
      PRIV_OPN_PRI INTEGER,
      BASE_OPN_SEC INTEGER,
      PREM_OPN_SEC INTEGER,
      PRIV_OPN_SEC INTEGER,
      BASE_NEW_PRI INTEGER,
      PREM_NEW_PRI INTEGER,
      PRIV_NEW_PRI INTEGER,
      BASE_NEW_SEC INTEGER,
      PREM_NEW_SEC INTEGER,
      PRIV_NEW_SEC INTEGER,
      BASE_ATTV_PRI INTEGER,
      PREM_ATTV_PRI INTEGER,
      PRIV_ATTV_PRI INTEGER,
      BASE_ATTV_SEC INTEGER,
      PREM_ATTV_SEC INTEGER,
      PRIV_ATTV_SEC INTEGER,
      BASE_ATTI_PRI INTEGER,
      PREM_ATTI_PRI INTEGER,
      PRIV_ATTI_PRI INTEGER,
      BASE_ATTI_SEC INTEGER,
      PREM_ATTI_SEC INTEGER,
      PRIV_ATTI_SEC INTEGER,
      BASE_CLS_PRI INTEGER,
      PREM_CLS_PRI INTEGER,
      PRIV_CLS_PRI INTEGER,
      BASE_CLS_SEC INTEGER,
      PREM_CLS_SEC INTEGER,
      PRIV_CLS_SEC INTEGER,
      BASE_ACT_PRI INTEGER,
      PREM_ACT_PRI INTEGER,
      PRIV_ACT_PRI INTEGER,
      BASE_ACT_SEC INTEGER,
      PREM_ACT_SEC INTEGER,
      PRIV_ACT_SEC INTEGER,
      BASE_ANV_PRI INTEGER,
      PREM_ANV_PRI INTEGER,
      PRIV_ANV_PRI INTEGER,
      BASE_ANV_SEC INTEGER,
      PREM_ANV_SEC INTEGER,
      PRIV_ANV_SEC INTEGER,
      BASE_SM_PRI INTEGER,
      PREM_SM_PRI INTEGER,
      PRIV_SM_PRI INTEGER,
      BASE_SM_SEC INTEGER,
      PREM_SM_SEC INTEGER,
      PRIV_SM_SEC INTEGER,
      BASE_RET_DOM_CT INTEGER,
      PREM_RET_DOM_CT INTEGER,
      PRIV_RET_DOM_CT INTEGER,
      BASE_RET_DOM_AMT DECIMAL(15,2),
      PREM_RET_DOM_AMT DECIMAL(15,2),
      PRIV_RET_DOM_AMT DECIMAL(15,2),
      BASE_RET_FOR_CT INTEGER,
      PREM_RET_FOR_CT INTEGER,
      PRIV_RET_FOR_CT INTEGER,
      BASE_RET_FOR_AMT DECIMAL(15,2),
      PREM_RET_FOR_AMT DECIMAL(15,2),
      PRIV_RET_FOR_AMT DECIMAL(15,2),
      BASE_EN_OPN_PRI INTEGER,
      PREM_EN_OPN_PRI INTEGER,
      PRIV_EN_OPN_PRI INTEGER,
      BASE_EN_OPN_SEC INTEGER,
      PREM_EN_OPN_SEC INTEGER,
      PRIV_EN_OPN_SEC INTEGER,
      BASE_EN_NEW_PRI INTEGER,
      PREM_EN_NEW_PRI INTEGER,
      PRIV_EN_NEW_PRI INTEGER,
      BASE_EN_NEW_SEC INTEGER,
      PREM_EN_NEW_SEC INTEGER,
      PRIV_EN_NEW_SEC INTEGER,
      BASE_EN_ATTV_PRI INTEGER,
      PREM_EN_ATTV_PRI INTEGER,
      PRIV_EN_ATTV_PRI INTEGER,
      BASE_EN_ATTV_SEC INTEGER,
      PREM_EN_ATTV_SEC INTEGER,
      PRIV_EN_ATTV_SEC INTEGER,
      BASE_EN_ATTI_PRI INTEGER,
      PREM_EN_ATTI_PRI INTEGER,
      PRIV_EN_ATTI_PRI INTEGER,
      BASE_EN_ATTI_SEC INTEGER,
      PREM_EN_ATTI_SEC INTEGER,
      PRIV_EN_ATTI_SEC INTEGER,
      BASE_EN_CLS_PRI INTEGER,
      PREM_EN_CLS_PRI INTEGER,
      PRIV_EN_CLS_PRI INTEGER,
      BASE_EN_CLS_SEC INTEGER,
      PREM_EN_CLS_SEC INTEGER,
      PRIV_EN_CLS_SEC INTEGER,
      BASE_LBG_ATM_CT INTEGER,
      PREM_LBG_ATM_CT INTEGER,
      PRIV_LBG_ATM_CT INTEGER,
      BASE_OTH_ATM_CT INTEGER,
      PREM_OTH_ATM_CT INTEGER,
      PRIV_OTH_ATM_CT INTEGER,
      BASE_LBG_ATM_VAL DECIMAL(15,2),
      PREM_LBG_ATM_VAL DECIMAL(15,2),
      PRIV_LBG_ATM_VAL DECIMAL(15,2),
      BASE_OTH_ATM_VAL DECIMAL(15,2),
      PREM_OTH_ATM_VAL DECIMAL(15,2),
      PRIV_OTH_ATM_VAL DECIMAL(15,2),
      BASE_DOM_ATM_CT INTEGER,
      PREM_DOM_ATM_CT INTEGER,
      PRIV_DOM_ATM_CT INTEGER,
      BASE_DOM_ATM_VAL DECIMAL(15,2),
      PREM_DOM_ATM_VAL DECIMAL(15,2),
      PRIV_DOM_ATM_VAL DECIMAL(15,2),
      BASE_REV_BAL DECIMAL(15,2),
      PREM_REV_BAL DECIMAL(15,2),
      PRIV_REV_BAL DECIMAL(15,2),
      BASE_CUR_BAL DECIMAL(15,2),
      PREM_CUR_BAL DECIMAL(15,2),
      PRIV_CUR_BAL DECIMAL(15,2),
-- ADDED IN V 1.2

      CHOI_ACT_PRI INTEGER,
      CHOI_ACT_SEC INTEGER,
      CHOI_ANV_PRI INTEGER,
      CHOI_ANV_SEC INTEGER,
      CHOI_ATTI_PRI INTEGER,
      CHOI_ATTI_SEC INTEGER,
      CHOI_ATTV_PRI INTEGER,
      CHOI_ATTV_SEC INTEGER,
      CHOI_CLS_PRI INTEGER,
      CHOI_CLS_SEC INTEGER,
      CHOI_CUR_BAL DECIMAL(15,2),
      CHOI_DOM_ATM_CT INTEGER,
      CHOI_DOM_ATM_VAL DECIMAL(15,2),
      CHOI_EN_ATTI_PRI INTEGER,
      CHOI_EN_ATTI_SEC INTEGER,
      CHOI_EN_ATTV_PRI INTEGER,
      CHOI_EN_ATTV_SEC INTEGER,
      CHOI_EN_CLS_PRI INTEGER,
      CHOI_EN_CLS_SEC INTEGER,
      CHOI_EN_NEW_PRI INTEGER,
      CHOI_EN_NEW_SEC INTEGER,
      CHOI_EN_OPN_PRI INTEGER,
      CHOI_EN_OPN_SEC INTEGER,
      CHOI_LBG_ATM_CT INTEGER,
      CHOI_LBG_ATM_VAL DECIMAL(15,2),
      CHOI_NEW_PRI INTEGER,
      CHOI_NEW_SEC INTEGER,
      CHOI_OPN_PRI INTEGER,
      CHOI_OPN_SEC INTEGER,
      CHOI_OTH_ATM_CT INTEGER,
      CHOI_OTH_ATM_VAL DECIMAL(15,2),
      CHOI_RET_DOM_AMT DECIMAL(15,2),
      CHOI_RET_DOM_CT INTEGER,
      CHOI_RET_FOR_AMT DECIMAL(15,2),
      CHOI_RET_FOR_CT INTEGER,
      CHOI_REV_BAL DECIMAL(15,2),
      CHOI_SM_PRI INTEGER,
      CHOI_SM_SEC INTEGER,
-- ADDED IN V 1.3

      AVRE_ACT_PRI INTEGER,
      AVRE_ACT_SEC INTEGER,
      AVRE_ANV_PRI INTEGER,
      AVRE_ANV_SEC INTEGER,
      AVRE_ATTI_PRI INTEGER,
      AVRE_ATTI_SEC INTEGER,
      AVRE_ATTV_PRI INTEGER,
      AVRE_ATTV_SEC INTEGER,
      AVRE_CLS_PRI INTEGER,
      AVRE_CLS_SEC INTEGER,
      AVRE_CUR_BAL DECIMAL(15,2),
      AVRE_DOM_ATM_CT INTEGER,
      AVRE_DOM_ATM_VAL DECIMAL(15,2),
      AVRE_EN_ATTI_PRI INTEGER,
      AVRE_EN_ATTI_SEC INTEGER,
      AVRE_EN_ATTV_PRI INTEGER,
      AVRE_EN_ATTV_SEC INTEGER,
      AVRE_EN_CLS_PRI INTEGER,
      AVRE_EN_CLS_SEC INTEGER,
      AVRE_EN_NEW_PRI INTEGER,
      AVRE_EN_NEW_SEC INTEGER,
      AVRE_EN_OPN_PRI INTEGER,
      AVRE_EN_OPN_SEC INTEGER,
      AVRE_LBG_ATM_CT INTEGER,
      AVRE_LBG_ATM_VAL DECIMAL(15,2),
      AVRE_NEW_PRI INTEGER,
      AVRE_NEW_SEC INTEGER,
      AVRE_OPN_PRI INTEGER,
      AVRE_OPN_SEC INTEGER,
      AVRE_OTH_ATM_CT INTEGER,
      AVRE_OTH_ATM_VAL DECIMAL(15,2),
      AVRE_RET_DOM_AMT DECIMAL(15,2),
      AVRE_RET_DOM_CT INTEGER,
      AVRE_RET_FOR_AMT DECIMAL(15,2),
      AVRE_RET_FOR_CT INTEGER,
      AVRE_REV_BAL DECIMAL(15,2),
      AVRE_SM_PRI INTEGER,
      AVRE_SM_SEC INTEGER,

      PAVR_ACT_PRI INTEGER,
      PAVR_ACT_SEC INTEGER,
      PAVR_ANV_PRI INTEGER,
      PAVR_ANV_SEC INTEGER,
      PAVR_ATTI_PRI INTEGER,
      PAVR_ATTI_SEC INTEGER,
      PAVR_ATTV_PRI INTEGER,
      PAVR_ATTV_SEC INTEGER,
      PAVR_CLS_PRI INTEGER,
      PAVR_CLS_SEC INTEGER,
      PAVR_CUR_BAL DECIMAL(15,2),
      PAVR_DOM_ATM_CT INTEGER,
      PAVR_DOM_ATM_VAL DECIMAL(15,2),
      PAVR_EN_ATTI_PRI INTEGER,
      PAVR_EN_ATTI_SEC INTEGER,
      PAVR_EN_ATTV_PRI INTEGER,
      PAVR_EN_ATTV_SEC INTEGER,
      PAVR_EN_CLS_PRI INTEGER,
      PAVR_EN_CLS_SEC INTEGER,
      PAVR_EN_NEW_PRI INTEGER,
      PAVR_EN_NEW_SEC INTEGER,
      PAVR_EN_OPN_PRI INTEGER,
      PAVR_EN_OPN_SEC INTEGER,
      PAVR_LBG_ATM_CT INTEGER,
      PAVR_LBG_ATM_VAL DECIMAL(15,2),
      PAVR_NEW_PRI INTEGER,
      PAVR_NEW_SEC INTEGER,
      PAVR_OPN_PRI INTEGER,
      PAVR_OPN_SEC INTEGER,
      PAVR_OTH_ATM_CT INTEGER,
      PAVR_OTH_ATM_VAL DECIMAL(15,2),
      PAVR_RET_DOM_AMT DECIMAL(15,2),
      PAVR_RET_DOM_CT INTEGER,
      PAVR_RET_FOR_AMT DECIMAL(15,2),
      PAVR_RET_FOR_CT INTEGER,
      PAVR_REV_BAL DECIMAL(15,2),
      PAVR_SM_PRI INTEGER,
      PAVR_SM_SEC INTEGER

     )
PRIMARY INDEX ( MONTH_END_DT );
*/

DELETE FROM CC_COBRA.FR19_AVIOS_SUMMARY WHERE MONTH_END_DT =  (SELECT MONTH_END_DT FROM CC_COBRA.WK_FR19_REPORT_DATE);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/* 13 - Final query - past output from this into spreadsheet template, or run query from within Excel. Amend date depending upon data required		*/ 
INSERT INTO CC_COBRA.FR19_AVIOS_SUMMARY 
SELECT
MONTH_END_DT,
ORG_TX,
V_ORG,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_CIF_PRI END)) AS BASE_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_CIF_PRI END)) AS PREM_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_CIF_PRI END)) AS PRIV_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '100' THEN (COUNT_CIF_SEC) END)) AS BASE_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '110' THEN (COUNT_CIF_SEC) END)) AS PREM_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '160' THEN (COUNT_CIF_SEC) END)) AS PRIV_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_CIF_PRI END)) AS BASE_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_CIF_PRI END)) AS PREM_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_CIF_PRI END)) AS PRIV_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '100' THEN (COUNT_CIF_SEC) END)) AS BASE_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '110' THEN (COUNT_CIF_SEC) END)) AS PREM_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '160' THEN (COUNT_CIF_SEC) END)) AS PRIV_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_CIF_PRI END)) AS BASE_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_CIF_PRI END)) AS PREM_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_CIF_PRI END)) AS PRIV_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '100' THEN (COUNT_CIF_SEC) END)) AS BASE_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '110' THEN (COUNT_CIF_SEC) END)) AS PREM_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '160' THEN (COUNT_CIF_SEC) END)) AS PRIV_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_CIF_PRI END)) AS BASE_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_CIF_PRI END)) AS PREM_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_CIF_PRI END)) AS PRIV_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '100' THEN (COUNT_CIF_SEC) END)) AS BASE_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '110' THEN (COUNT_CIF_SEC) END)) AS PREM_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '160' THEN (COUNT_CIF_SEC) END)) AS PRIV_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_CIF_PRI END)) AS BASE_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_CIF_PRI END)) AS PREM_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_CIF_PRI END)) AS PRIV_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' THEN (COUNT_CIF_SEC) END)) AS BASE_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' THEN (COUNT_CIF_SEC) END)) AS PREM_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' THEN (COUNT_CIF_SEC) END)) AS PRIV_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_ACT_PRI END)) AS BASE_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_ACT_PRI END)) AS PREM_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_ACT_PRI END)) AS PRIV_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_ACT_SEC END)) AS BASE_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_ACT_SEC END)) AS PREM_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_ACT_SEC END)) AS PRIV_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS BASE_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS PREM_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS PRIV_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS BASE_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS PREM_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS PRIV_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_SM_CARD_PRI END)) AS BASE_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_SM_CARD_PRI END)) AS PREM_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_SM_CARD_PRI END)) AS PRIV_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' THEN COUNT_SM_CARD_SEC END)) AS BASE_SM_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' THEN COUNT_SM_CARD_SEC END)) AS PREM_SM_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' THEN COUNT_SM_CARD_SEC END)) AS PRIV_SM_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_NO END)) AS BASE_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_NO END)) AS PREM_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_NO END)) AS PRIV_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_AMT END)) AS BASE_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_AMT END)) AS PREM_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_AMT END)) AS PRIV_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_NO END)) AS BASE_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_NO END)) AS PREM_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_NO END)) AS PRIV_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_AMT END)) AS BASE_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_AMT END)) AS PREM_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_AMT END)) AS PRIV_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS BASE_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PREM_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PRIV_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS BASE_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PREM_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PRIV_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS BASE_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PREM_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PRIV_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS BASE_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PREM_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PRIV_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS BASE_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PREM_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PRIV_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS BASE_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PREM_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PRIV_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS BASE_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PREM_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PRIV_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS BASE_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PREM_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PRIV_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS BASE_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PREM_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PRIV_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '100' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS BASE_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '110' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PREM_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '160' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PRIV_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_NO END)) AS BASE_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_NO END)) AS PREM_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_NO END)) AS PRIV_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_NO END)) AS BASE_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_NO END)) AS PREM_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_NO END)) AS PRIV_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_AMT END)) AS BASE_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_AMT END)) AS PREM_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_AMT END)) AS PRIV_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_AMT END)) AS BASE_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_AMT END)) AS PREM_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_AMT END)) AS PRIV_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '100' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS BASE_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '110' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS PREM_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '160' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS PRIV_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '100' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS BASE_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '110' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS PREM_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '160' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS PRIV_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_AMT END)) AS BASE_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_AMT END)) AS PREM_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_AMT END)) AS PRIV_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '100' THEN TRAN_AMT END)) AS BASE_CUR_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '110' THEN TRAN_AMT END)) AS PREM_CUR_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '160' THEN TRAN_AMT END)) AS PRIV_CUR_BAL,
-- BELOW ADDED IN VERSION 1.2
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_ACT_PRI END)) AS CHOI_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_ACT_SEC END)) AS CHOI_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS CHOI_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS CHOI_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_CIF_PRI END)) AS CHOI_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '150' THEN (COUNT_CIF_SEC) END)) AS CHOI_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_CIF_PRI END)) AS CHOI_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '150' THEN (COUNT_CIF_SEC) END)) AS CHOI_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_CIF_PRI END)) AS CHOI_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' THEN (COUNT_CIF_SEC) END)) AS CHOI_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_AMT END)) AS CHOI_CUR_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '150' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS CHOI_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '150' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS CHOI_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS CHOI_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS CHOI_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS CHOI_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS CHOI_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS CHOI_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS CHOI_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS CHOI_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS CHOI_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS CHOI_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '150' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS CHOI_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_NO END)) AS CHOI_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_AMT END)) AS CHOI_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_CIF_PRI END)) AS CHOI_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '150' THEN (COUNT_CIF_SEC) END)) AS CHOI_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_CIF_PRI END)) AS CHOI_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '150' THEN (COUNT_CIF_SEC) END)) AS CHOI_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_NO END)) AS CHOI_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_AMT END)) AS CHOI_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_AMT END)) AS CHOI_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_NO END)) AS CHOI_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_AMT END)) AS CHOI_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_NO END)) AS CHOI_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '150' THEN TRAN_AMT END)) AS CHOI_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_SM_CARD_PRI END)) AS CHOI_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '150' THEN COUNT_SM_CARD_SEC END)) AS CHOI_SM_SEC,
-- BELOW ADDED IN VERSION 1.3
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_ACT_PRI END)) AS AVRE_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_ACT_SEC END)) AS AVRE_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS AVRE_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_CIF_PRI END)) AS AVRE_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '120' THEN (COUNT_CIF_SEC) END)) AS AVRE_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_CIF_PRI END)) AS AVRE_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '120' THEN (COUNT_CIF_SEC) END)) AS AVRE_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_CIF_PRI END)) AS AVRE_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' THEN (COUNT_CIF_SEC) END)) AS AVRE_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_AMT END)) AS AVRE_CUR_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '120' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS AVRE_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '120' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS AVRE_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '120' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_NO END)) AS AVRE_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_AMT END)) AS AVRE_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_CIF_PRI END)) AS AVRE_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '120' THEN (COUNT_CIF_SEC) END)) AS AVRE_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_CIF_PRI END)) AS AVRE_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '120' THEN (COUNT_CIF_SEC) END)) AS AVRE_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_NO END)) AS AVRE_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_AMT END)) AS AVRE_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_AMT END)) AS AVRE_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_NO END)) AS AVRE_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_AMT END)) AS AVRE_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_NO END)) AS AVRE_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '120' THEN TRAN_AMT END)) AS AVRE_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_SM_CARD_PRI END)) AS AVRE_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '120' THEN COUNT_SM_CARD_SEC END)) AS AVRE_SM_SEC,

SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_ACT_PRI END)) AS PAVR_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_ACT_SEC END)) AS PAVR_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS PAVR_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS PAVR_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_CIF_PRI END)) AS PAVR_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '130' THEN (COUNT_CIF_SEC) END)) AS PAVR_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_CIF_PRI END)) AS PAVR_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '130' THEN (COUNT_CIF_SEC) END)) AS PAVR_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_CIF_PRI END)) AS PAVR_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' THEN (COUNT_CIF_SEC) END)) AS PAVR_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_AMT END)) AS PAVR_CUR_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '130' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS PAVR_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '130' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS PAVR_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PAVR_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PAVR_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PAVR_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PAVR_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PAVR_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PAVR_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PAVR_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PAVR_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS PAVR_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '130' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS PAVR_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_NO END)) AS PAVR_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_AMT END)) AS PAVR_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_CIF_PRI END)) AS PAVR_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '130' THEN (COUNT_CIF_SEC) END)) AS PAVR_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_CIF_PRI END)) AS PAVR_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '130' THEN (COUNT_CIF_SEC) END)) AS PAVR_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_NO END)) AS PAVR_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_AMT END)) AS PAVR_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_AMT END)) AS PAVR_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_NO END)) AS PAVR_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_AMT END)) AS PAVR_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_NO END)) AS PAVR_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '130' THEN TRAN_AMT END)) AS PAVR_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_SM_CARD_PRI END)) AS PAVR_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '130' THEN COUNT_SM_CARD_SEC END)) AS PAVR_SM_SEC,

/* 20180914PG - DEKA LOGOS ADDED		*/
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_ACT_PRI END)) AS AVRE2_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_ACT_SEC END)) AS AVRE2_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS AVRE2_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE2_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_CIF_PRI END)) AS AVRE2_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '360' THEN (COUNT_CIF_SEC) END)) AS AVRE2_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_CIF_PRI END)) AS AVRE2_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '360' THEN (COUNT_CIF_SEC) END)) AS AVRE2_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_CIF_PRI END)) AS AVRE2_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' THEN (COUNT_CIF_SEC) END)) AS AVRE2_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_AMT END)) AS AVRE2_CUR_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '360' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS AVRE2_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '360' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS AVRE2_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE2_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE2_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE2_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE2_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE2_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE2_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE2_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE2_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE2_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '360' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE2_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_NO END)) AS AVRE2_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_AMT END)) AS AVRE2_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_CIF_PRI END)) AS AVRE2_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '360' THEN (COUNT_CIF_SEC) END)) AS AVRE2_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_CIF_PRI END)) AS AVRE2_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '360' THEN (COUNT_CIF_SEC) END)) AS AVRE2_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_NO END)) AS AVRE2_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_AMT END)) AS AVRE2_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_AMT END)) AS AVRE2_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_NO END)) AS AVRE2_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_AMT END)) AS AVRE2_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_NO END)) AS AVRE2_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '360' THEN TRAN_AMT END)) AS AVRE2_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_SM_CARD_PRI END)) AS AVRE2_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '360' THEN COUNT_SM_CARD_SEC END)) AS AVRE2_SM_SEC,

SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_ACT_PRI END)) AS AVRE3_ACT_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_ACT_SEC END)) AS AVRE3_ACT_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' AND ANNIV = 1 THEN COUNT_CIF_PRI END)) AS AVRE3_ANV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' AND ANNIV = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE3_ANV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_CIF_PRI END)) AS AVRE3_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '365' THEN (COUNT_CIF_SEC) END)) AS AVRE3_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_CIF_PRI END)) AS AVRE3_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '365' THEN (COUNT_CIF_SEC) END)) AS AVRE3_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_CIF_PRI END)) AS AVRE3_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' THEN (COUNT_CIF_SEC) END)) AS AVRE3_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CURRENT' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_AMT END)) AS AVRE3_CUR_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '365' AND FOREIGN_IND = 0 THEN TRAN_NO END)) AS AVRE3_DOM_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH%' AND CREDIT_CARD_LOGO_CD = '365' AND FOREIGN_IND = 0 THEN TRAN_AMT END)) AS AVRE3_DOM_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE3_EN_ATTI_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-I' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE3_EN_ATTI_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE3_EN_ATTV_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'ATTRITION-V' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE3_EN_ATTV_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE3_EN_CLS_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE3_EN_CLS_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE3_EN_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE3_EN_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN COUNT_CIF_PRI END)) AS AVRE3_EN_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '365' AND ENHANCED_PRD = 1 THEN (COUNT_CIF_SEC) END)) AS AVRE3_EN_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_NO END)) AS AVRE3_LBG_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - LBG%' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_AMT END)) AS AVRE3_LBG_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_CIF_PRI END)) AS AVRE3_NEW_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'NEW' AND CREDIT_CARD_LOGO_CD = '365' THEN (COUNT_CIF_SEC) END)) AS AVRE3_NEW_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_CIF_PRI END)) AS AVRE3_OPN_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'OPENING' AND CREDIT_CARD_LOGO_CD = '365' THEN (COUNT_CIF_SEC) END)) AS AVRE3_OPN_SEC,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_NO END)) AS AVRE3_OTH_ATM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) LIKE '%CSH - OTH%' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_AMT END)) AS AVRE3_OTH_ATM_VAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_AMT END)) AS AVRE3_RET_DOM_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - DOM' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_NO END)) AS AVRE3_RET_DOM_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_AMT END)) AS AVRE3_RET_FOR_AMT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'RETAIL - FOREIGN' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_NO END)) AS AVRE3_RET_FOR_CT,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'REVOLVER' AND CREDIT_CARD_LOGO_CD = '365' THEN TRAN_AMT END)) AS AVRE3_REV_BAL,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_SM_CARD_PRI END)) AS AVRE3_SM_PRI,
SUM(ZEROIFNULL(CASE WHEN TRIM(RECORD_TYPE) = 'CLOSING' AND CREDIT_CARD_LOGO_CD = '365' THEN COUNT_SM_CARD_SEC END)) AS AVRE3_SM_SEC

FROM 
CC_COBRA.WK_FR19_SUMMARY_TABLE
GROUP BY
MONTH_END_DT, ORG_TX, V_ORG;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR19_CLOSING_ACCOUNTS ALL;
DELETE FROM CC_COBRA.WK_FR19_AVIOS_COF_CLOSE ALL;
DELETE FROM CC_COBRA.WK_FR19_SUMMARY_TABLE ALL;
DELETE FROM CC_COBRA.WK_FR19_OPENING_ACCOUNTS ALL;
DELETE FROM CC_COBRA.WK_FR19_AVIOS_COF_OPEN ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR; 

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR19'
;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR19';

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR19'
;

.QUIT 0;

 