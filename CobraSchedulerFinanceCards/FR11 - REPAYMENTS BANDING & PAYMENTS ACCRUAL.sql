/************************************************************************/
/*JOB:      FR11 - REPAYMENTS BANDING & PAYMENTS ACCRUAL                */
/*VERSION:  FR11v03 - update days when acc can run.sql                  */
/*DATE VERSION IMPLEMENTED: 2017-01-03                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/*C01J04                                                                */
/*FR09                                                                  */
/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_EVENTS_TO_EXCLUDE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF FR09 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR09';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR11';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPTOACC;


/**********************************************************************
** THIS CHECKS TO SEE WHAT TODAY IS AND IF NOT THE RIGHT RUN DAY      *
** IT WILL NOT RUN CODE                                               *
**********************************************************************/

/*SET TO RUN EVERY SUNDAY, AND FOR  WD-1 & WD1-5*/

SELECT A.*, ((CALENDAR_DATE-DATE '0001-01-05') MOD 7) 
FROM   CC_COBRA.GRID_REPORTS_CONTROL A
JOIN   CC_COBRA.CC_COBRA_LOAD_START_DT B
ON     A.PRIOR_WORKDAY_DT = B.SOURCE_START_DT
WHERE  A.WORKDAY_OF_MONTH <= 6 /*IS THE BEGINNING OF THE MONTH */
OR     ((CALENDAR_DATE-DATE '0001-01-05') MOD 7) = 3 /*FOR A FRIDAY'S DATA RUN - SO WILL RUN ON W/E ONLY*/
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO DONOTRUN;


UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR11'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*POPULATE THE CONTROL DATE TABLE WITH THE NEXT BUSINESS DATE FROM THE LAST DAY PROCESSED*/

DELETE FROM CC_COBRA.WK_FR11_DATE_CONTROL ALL;

INSERT INTO CC_COBRA.WK_FR11_DATE_CONTROL
SELECT B.CALENDAR_DATE
FROM CC_COBRA.CC_COBRA_LOAD_LOG A
JOIN CC_COBRA.GRID_REPORTS_CONTROL B
ON   A.CURRENT_BUS_DT = B.PRIOR_WORKDAY_DT
WHERE GRID_LOAD_ID = 'FR11';

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_DATE_CONTROL INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR11_DATE_CONTROL;

/*PRE-DELETE DATA IN CASE OF RERUN*/


DELETE FROM CC_COBRA.FR11_STATEMENTS WHERE STTMNT_DT >= (SELECT REPORT_DT FROM CC_COBRA.WK_FR11_DATE_CONTROL);

DELETE FROM CC_COBRA.FR11_PAYMENTS WHERE POSTNG_DT >= (SELECT REPORT_DT FROM CC_COBRA.WK_FR11_DATE_CONTROL);


/*SECTION 00 - POPULATE T5 (STATEMENTS INC DUMMY ONES) FOR RE-PROCESSING*/

/*0.1 - GET LAST SEQ_NO BY AGRMNT_ID*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_SEQ ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_SEQ
SELECT AGRMNT_ID
      ,MAX(SEQ_NO)
FROM CC_COBRA.FR11_STATEMENTS 
GROUP BY 1;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_SEQ INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_SEQ COLUMN(SEQ_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*0.2 - THE LAST STATEMENT FOR EACH AGRMNT_ID WHERE THE DATE RANGE FOR PAYMENTS IS RELAVENT FOR POTENTIAL PAYMENTS BEING COLLECTED*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T5 ALL;

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T5
SELECT 
A.AGRMNT_ID
,STTMNT_DOCMNT_ID
,STTMNT_DT
,EVENT_START_DT
,EVENT_END_DT
,BILLNG_CYCLE_NO
,BLOCK_CODE_1
,BLOCK_CODE_2
,INT_STATUS
,STTMNT_BALANC_AM
,MIN_PAY_DUE
,A.SEQ_NO
FROM CC_COBRA.FR11_STATEMENTS A
JOIN CC_COBRA.WK_FR11_STATEMENTS_SEQ B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.SEQ_NO = B.SEQ_NO
JOIN CC_COBRA.WK_FR11_DATE_CONTROL DC
ON   A.EVENT_END_DT IS NULL
OR   DC.REPORT_DT <= A.EVENT_END_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T5 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 01 - COLLECT PAYMENTS*/

/*1.1 - CLEAR OUT STAGING TABLE*/

DELETE FROM CC_COBRA.WK_FR11_PAYMENTS_T1 ALL;

/*1.2 - INSERT LAST MONTHS DATA*/
/*NOTE POSTNG_DT IS ESSENTIALLY FILE DATE*/

INSERT INTO CC_COBRA.WK_FR11_PAYMENTS_T1
SELECT A.EVENT_ID
	  ,CASE WHEN A.START_DT = '1900/01/01' AND A.POSTNG_DT/100 = A.SOURCE_START_DT/100 THEN A.POSTNG_DT ELSE A.SOURCE_START_DT END AS POSTNG_DT
      ,A.AGRMNT_ID
      ,A.EVENT_AM
      ,A.SOURCE_START_DT
FROM  (SELECT * FROM GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST WHERE SOURCE_START_DT >= (SELECT REPORT_DT FROM CC_COBRA.WK_FR11_DATE_CONTROL)) A
JOIN  CC_COBRA.TRNSCN_DERVTN_GROUPS B
ON    A.EVENT_ACTVTY_CD = B.EVENT_ACTVTY_CD
AND   B.TRNSCN_DERVTN_GRP = 'PAYMENT'
AND   A.SOURCE_START_DT >= (SELECT REPORT_DT FROM CC_COBRA.WK_FR11_DATE_CONTROL)  --SEEMS TO HELP QUERY
WHERE NOT EXISTS (SELECT NULL
                  FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE E
                  WHERE A.EVENT_ID = E.EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_PAYMENTS_T1 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*1.3 -INSERT FROM MAIN TABLE FOR PROCESSING*/

INSERT INTO CC_COBRA.WK_FR11_PAYMENTS_T1
SELECT 
A.EVENT_ID
,A.POSTNG_DT
,A.AGRMNT_ID
,A.EVENT_AM
,A.POSTNG_DT
FROM CC_COBRA.FR11_PAYMENTS A 
JOIN CC_COBRA.WK_FR11_STATEMENTS_T5 B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND   A.STTMNT_DT = B.STTMNT_DT
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR11_PAYMENTS_T1 C
WHERE A.EVENT_ID = C.EVENT_ID)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_PAYMENTS_T1 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*1.4 -INSERT ANY MORE STATEMENTS THAT ARE RELATED TO PAYMENTS JUST PICKED UP*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T5
SELECT 
A.AGRMNT_ID
,STTMNT_DOCMNT_ID
,STTMNT_DT
,EVENT_START_DT
,EVENT_END_DT
,BILLNG_CYCLE_NO
,BLOCK_CODE_1
,BLOCK_CODE_2
,INT_STATUS
,STTMNT_BALANC_AM
,MIN_PAY_DUE
,A.SEQ_NO
FROM CC_COBRA.FR11_STATEMENTS A
JOIN CC_COBRA.WK_FR11_PAYMENTS_T1 B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  (B.POSTNG_DT BETWEEN A.EVENT_START_DT AND A.EVENT_END_DT
OR   B.POSTNG_DT >= A.EVENT_START_DT AND A.EVENT_END_DT IS NULL)
WHERE NOT EXISTS
      (SELECT NULL
       FROM CC_COBRA.WK_FR11_STATEMENTS_T5 T5
       WHERE A.AGRMNT_ID = T5.AGRMNT_ID
       AND   A.STTMNT_DOCMNT_ID = T5.STTMNT_DOCMNT_ID)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 02 - COLLECT STATEMENTS*/

/*2.1 - PRE-DELETE STAGING TABLE*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T1 ALL;

/*2.2 - INSERT ALL NEW STATEMENT DATA */ 

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T1 
SELECT A.AGRMNT_ID
      ,B.STTMNT_DOCMNT_ID
      ,B.STTMNT_DT
      ,B.STTMNT_DT+1
      ,NULL
      ,C.BILLNG_CYCLE_NO
      ,BC1.AGRMNT_STATUS_SUMMRY_VL
      ,BC2.AGRMNT_STATUS_SUMMRY_VL
      ,ISC.AGRMNT_STATUS_SUMMRY_VL
FROM GDW_VIEWSX.AGREEMENT_STATEMENT A
JOIN  GDW_VIEWSX.STATEMENT_DOCUMENT B
ON    A.STTMNT_DOCMNT_ID = B.STTMNT_DOCMNT_ID
AND   B.SOURCE_START_DT >= (SELECT REPORT_DT FROM CC_COBRA.WK_FR11_DATE_CONTROL)
AND   A.START_DT <> '2014/02/15'
AND   B.START_DT <> '2014/02/15' --IGNORE ALL PPI BACKLOADED STATEMENTS AS ONLY A PARTIAL LOAD OF THOSE THAT HAD PPI
JOIN  GDW_VIEWSX.CREDIT_CARD_AGREEMENT C
ON    A.AGRMNT_ID = C.AGRMNT_ID
AND   A.SOURCE_START_DT BETWEEN C.SOURCE_START_DT AND C.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC1
ON    A.AGRMNT_ID = BC1.AGRMNT_ID
AND   BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023'
AND   B.STTMNT_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC2
ON    A.AGRMNT_ID = BC2.AGRMNT_ID
AND   BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024'
AND   B.STTMNT_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ISC
ON    A.AGRMNT_ID = ISC.AGRMNT_ID
AND   ISC.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
AND   B.STTMNT_DT BETWEEN ISC.SOURCE_START_DT AND ISC.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T1 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*2.3 - INSERT STATEMENT WITH NULL EVENT END DTS OR EVENT END DT IS >= PROESSING DATE*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T1
SELECT AGRMNT_ID
      ,STTMNT_DOCMNT_ID
      ,STTMNT_DT
      ,EVENT_START_DT
      ,EVENT_END_DT
      ,BILLNG_CYCLE_NO
      ,BLOCK_CODE_1
      ,BLOCK_CODE_2
      ,INT_STATUS
      
FROM   CC_COBRA.WK_FR11_STATEMENTS_T5 A
WHERE  NOT EXISTS (
SELECT NULL
FROM   CC_COBRA.WK_FR11_STATEMENTS_T1 B
WHERE  A.STTMNT_DOCMNT_ID = B.STTMNT_DOCMNT_ID)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T1 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 03 - COLLECT NEXT STATEMENT DATE*/

/*3.1 - PRE-DELETE STAGING TABLE*/ 

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T2 ALL;

/*3.2 - INSERT DATA FROM T1 AND GET THE NEXT STATEMENT DATE WHERE POSSIBLE*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T2
SELECT 
AGRMNT_ID
,STTMNT_DOCMNT_ID
,STTMNT_DT
,EVENT_START_DT
,CASE WHEN EVENT_END_DT > MIN_NEXT_STTMNT THEN MIN_NEXT_STTMNT
      ELSE COALESCE(EVENT_END_DT,MIN_NEXT_STTMNT)
      END
,BILLNG_CYCLE_NO
,BLOCK_CODE_1
,BLOCK_CODE_2
,INT_STATUS

FROM 
(
SELECT A.AGRMNT_ID
      ,A.STTMNT_DOCMNT_ID
      ,A.STTMNT_DT
      ,A.EVENT_START_DT
      ,A.EVENT_END_DT
      ,MIN(B.STTMNT_DT) AS MIN_NEXT_STTMNT --STOPS DUPS WHEN CUSTOMER CHANGES CYCLE WHICH CAN MEAN MORE THAN 1 CYCLE
      ,A.BILLNG_CYCLE_NO
      ,COALESCE(A.BLOCK_CODE_1,'') AS BLOCK_CODE_1
	  ,COALESCE(A.BLOCK_CODE_2,'') AS BLOCK_CODE_2
      ,COALESCE(A.INT_STATUS,'') AS INT_STATUS
FROM 	  CC_COBRA.WK_FR11_STATEMENTS_T1 A /*PRIOR STATEMENT*/
LEFT JOIN CC_COBRA.WK_FR11_STATEMENTS_T1 B /*NEXT STATEMENT*/
ON   	  A.AGRMNT_ID = B.AGRMNT_ID
AND  	  B.STTMNT_DT > A.STTMNT_DT
AND       CAST(((B.STTMNT_DT/100*100)+1) AS DATE)/100 <= ADD_MONTHS(CAST(((A.STTMNT_DT/100*100)+1) AS DATE),1)/100
GROUP BY 1,2,3,4,5,7,8,9,10) T1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T2 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*3.3 - SET END DATES USING CYCLE CALENDAR WHERE NO NEXT STATEMENT AND THE NEXT CYCLE DT HAS PASSED*/

UPDATE A
FROM CC_COBRA.WK_FR11_STATEMENTS_T2 AS A
,    CC_COBRA.FR11_FDI_CALENDAR AS B
SET PAYMNT_END_DT = B.STTMNT_DT
WHERE CC_COBRA.WK_FR11_STATEMENTS_T2.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.WK_FR11_STATEMENTS_T2.STTMNT_DOCMNT_ID = A.STTMNT_DOCMNT_ID
AND   A.BILLNG_CYCLE_NO = B.BILLNG_CYCLE_NO
AND  ADD_MONTHS(CAST(((A.STTMNT_DT/100*100)+1) AS DATE),1) = B.STTMNT_MTH
AND ((A.STTMNT_DT/100 <= ADD_MONTHS(CAST(((DATE/100*100)+1) AS DATE),-2)/100
OR (A.STTMNT_DT/100 = ADD_MONTHS(CAST(((DATE/100*100)+1) AS DATE),-1)/100
AND A.BILLNG_CYCLE_NO < EXTRACT(DAY FROM DATE)))
AND   A.PAYMNT_END_DT IS NULL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*3.4 - COLLECT DUMMY STATEMENTS FOR PAYMENTS THAT HAVE BEEN MADE WHEN NOT REQUIRED*/


DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T2A ALL;

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T2A
SELECT A.AGRMNT_ID
      ,NULL
      ,B.STTMNT_DT
      ,B.PAYMNT_START_DT
      ,B.PAYMNT_END_DT
      ,B.BILLNG_CYCLE_NO

FROM 
(
	SELECT *
	FROM CC_COBRA.WK_FR11_PAYMENTS_T1 T1
	WHERE NOT EXISTS (
	SELECT NULL
	FROM CC_COBRA.WK_FR11_STATEMENTS_T2 T2
	WHERE T1.AGRMNT_ID = T2.AGRMNT_ID
	AND  ((T1.POSTNG_DT BETWEEN T2.PAYMNT_START_DT AND T2.PAYMNT_END_DT)
	OR   (T1.POSTNG_DT >= T2.PAYMNT_START_DT AND T2.PAYMNT_END_DT IS NULL))
	)
) A

JOIN GDW_VIEWSX.CREDIT_CARD_AGREEMENT C
ON   A.AGRMNT_ID = C.AGRMNT_ID
AND  A.POSTNG_DT BETWEEN C.SOURCE_START_DT AND C.SOURCE_END_DT-1

JOIN 
(SELECT  
C1.BILLNG_CYCLE_NO
, C1.STTMNT_MTH
, C1.STTMNT_DT
, C1.STTMNT_DT+1 AS PAYMNT_START_DT
, C2.STTMNT_DT AS PAYMNT_END_DT
FROM CC_COBRA.FR11_FDI_CALENDAR C1
JOIN CC_COBRA.FR11_FDI_CALENDAR C2
ON   C1.BILLNG_CYCLE_NO = C2.BILLNG_CYCLE_NO
AND  ADD_MONTHS(C1.STTMNT_MTH,1) = C2.STTMNT_MTH
) B
ON   C.BILLNG_CYCLE_NO = B.BILLNG_CYCLE_NO
AND  A.POSTNG_DT BETWEEN B.PAYMNT_START_DT AND B.PAYMNT_END_DT
GROUP BY 1,2,3,4,5,6;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T2A INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*3.5 FIND THE DATA FROM T2A WHERE IT ISN'T CONFLICTING WITH DATA IN THE MAIN TABLE*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T2
SELECT A.AGRMNT_ID
      ,NULL AS STTMNT_DOCMNT_ID
      ,A.STTMNT_DT
      ,A.PAYMNT_START_DT
      ,A.PAYMNT_END_DT
      ,A.BILLNG_CYCLE_NO
      ,BC1.AGRMNT_STATUS_SUMMRY_VL
      ,BC2.AGRMNT_STATUS_SUMMRY_VL
      ,ISC.AGRMNT_STATUS_SUMMRY_VL
FROM CC_COBRA.WK_FR11_STATEMENTS_T2A  A
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC1
ON    A.AGRMNT_ID = BC1.AGRMNT_ID
AND   BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023'
AND   A.STTMNT_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC2
ON    A.AGRMNT_ID = BC2.AGRMNT_ID
AND   BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024'
AND   A.STTMNT_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ISC
ON    A.AGRMNT_ID = ISC.AGRMNT_ID
AND   ISC.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
AND   A.STTMNT_DT BETWEEN ISC.SOURCE_START_DT AND ISC.SOURCE_END_DT-1
WHERE NOT EXISTS (
SELECT NULL
FROM   CC_COBRA.FR11_STATEMENTS B
WHERE  A.AGRMNT_ID = B.AGRMNT_ID
AND    (A.PAYMNT_START_DT BETWEEN B.EVENT_START_DT AND B.EVENT_END_DT
OR     A.PAYMNT_START_DT >= B.EVENT_START_DT AND B.EVENT_END_DT IS NULL)
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T2 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*3.6 - INSERT STATEMENT FOR PAYMENTS STILL W/O STATEMENT - WHERE THERE ARE GAPS IN THE RECORDS - USUALLY DUE TO CHANGES IN CYCLES*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T2
SELECT E.AGRMNT_ID
      ,NULL AS STTMNT_DOCMNT_ID
      ,E.STTMNT_DT
      ,E.PAYMNT_START_DT
      ,E.PAYMNT_END_DT
      ,CCA.BILLNG_CYCLE_NO
      ,BC1.AGRMNT_STATUS_SUMMRY_VL
      ,BC2.AGRMNT_STATUS_SUMMRY_VL
      ,ISC.AGRMNT_STATUS_SUMMRY_VL
FROM 
(
SELECT 
D.AGRMNT_ID
,COALESCE(STTMNT_DT, POSTNG_DT-1) AS STTMNT_DT
,COALESCE(PAYMNT_START_DT, POSTNG_DT) AS PAYMNT_START_DT
,PAYMNT_END_DT

FROM
(SELECT
A.AGRMNT_ID
,MIN(A.POSTNG_DT) AS POSTNG_DT
,MAX(C.PAYMNT_END_DT) AS STTMNT_DT
,MAX(C.PAYMNT_END_DT)+1 AS PAYMNT_START_DT
,MIN(B.PAYMNT_START_DT)-1 AS PAYMNT_END_DT
FROM 
(
	SELECT *
	FROM CC_COBRA.WK_FR11_PAYMENTS_T1 T1
	WHERE NOT EXISTS (
	SELECT NULL
	FROM CC_COBRA.WK_FR11_STATEMENTS_T2 T2
	WHERE T1.AGRMNT_ID = T2.AGRMNT_ID
	AND  ((T1.POSTNG_DT BETWEEN T2.PAYMNT_START_DT AND T2.PAYMNT_END_DT)
	OR   (T1.POSTNG_DT >= T2.PAYMNT_START_DT AND T2.PAYMNT_END_DT IS NULL))
	)
) A

LEFT JOIN  CC_COBRA.WK_FR11_STATEMENTS_T2 B
ON    A.AGRMNT_ID = B.AGRMNT_ID
AND   A.POSTNG_DT < B.PAYMNT_START_DT

LEFT JOIN  CC_COBRA.WK_FR11_STATEMENTS_T2 C
ON    A.AGRMNT_ID = C.AGRMNT_ID
AND   A.POSTNG_DT > C.PAYMNT_END_DT
GROUP BY 1) D 
GROUP BY 1,2,3,4 ) E

LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC1
ON    E.AGRMNT_ID = BC1.AGRMNT_ID
AND   BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023'
AND   E.STTMNT_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC2
ON    E.AGRMNT_ID = BC2.AGRMNT_ID
AND   BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024'
AND   E.STTMNT_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ISC
ON    E.AGRMNT_ID = ISC.AGRMNT_ID
AND   ISC.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
AND   E.STTMNT_DT BETWEEN ISC.SOURCE_START_DT AND ISC.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.CREDIT_CARD_AGREEMENT CCA
ON    E.AGRMNT_ID = CCA.AGRMNT_ID
AND   E.STTMNT_DT BETWEEN CCA.SOURCE_START_DT AND CCA.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T2 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 04 - COLLECT OPENING BALANCES*/

/*4.1 - MAKE SURE LOOKUP TABLE IS UP TO DATE*/

SELECT * FROM CC_COBRA.WK_FR11_NON_STATEMENT_LKUP;

SELECT MIN(STTMNT_DOCMNT_ID) AS MIN_ID 
FROM  CC_COBRA.FR11_STATEMENTS
WHERE STTMNT_DOCMNT_ID < 0;

UPDATE CC_COBRA.WK_FR11_NON_STATEMENT_LKUP
FROM (SELECT MIN(STTMNT_DOCMNT_ID) AS MIN_ID FROM  CC_COBRA.FR11_STATEMENTS
      WHERE STTMNT_DOCMNT_ID < 0) A
SET STTMNT_DOCMNT_ID = A.MIN_ID
WHERE STTMNT_DOCMNT_ID <> A.MIN_ID;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_NON_STATEMENT_LKUP INDEX (STTMNT_DOCMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*4.2 - PRE-DELETE STAGING TABLE*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T3 ALL;

/*4.3 - INSERT RECORDS THAT HAVE STTMNT_DOCMNT_IDS*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T3
SELECT A.*
      ,ZEROIFNULL(B.STTMNT_AM_VL) -- STTMNT_BAL
      ,ZEROIFNULL(C.STTMNT_AM_VL)+ZEROIFNULL(D.STTMNT_AM_VL) -- MIN PAYMENT DUE
      
FROM (SELECT * 
      FROM CC_COBRA.WK_FR11_STATEMENTS_T2 A
      WHERE STTMNT_DOCMNT_ID IS NOT NULL
      AND   STTMNT_DOCMNT_ID > 0
      ) A
LEFT JOIN GDW_VIEWSX.STATEMENT_AMOUNT B
ON   A.STTMNT_DOCMNT_ID = B.STTMNT_DOCMNT_ID
AND  (B.STTMNT_AM_TYPE_CD = '00000001'
OR    B.STTMNT_AM_TYPE_CD = '00590007')
LEFT JOIN GDW_VIEWSX.STATEMENT_AMOUNT C
ON   A.STTMNT_DOCMNT_ID = C.STTMNT_DOCMNT_ID
AND  (C.STTMNT_AM_TYPE_CD = '00000002'
OR    C.STTMNT_AM_TYPE_CD= '00590004')
LEFT JOIN GDW_VIEWSX.STATEMENT_AMOUNT D
ON   A.STTMNT_DOCMNT_ID = D.STTMNT_DOCMNT_ID
AND  D.STTMNT_AM_TYPE_CD = '00000003'
AND  D.START_DT > '1900/01/01'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*4.4 - INSERT  RECORDS THAT DON'T HAVE STTMNT_DOCMNT_IDS*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T3
SELECT
 A.AGRMNT_ID 
,LREF.STTMNT_DOCMNT_ID + CSUM(-1,A.AGRMNT_ID,A.STTMNT_DT)
,A.STTMNT_DT 
,A.PAYMNT_START_DT 
,A.PAYMNT_END_DT 
,A.BILLNG_CYCLE_NO
,A.BLOCK_CODE_1
,A.BLOCK_CODE_2 
,A.INT_STATUS 
,A.STTMNT_BAL_AM 
,A.MIN_PAY_DUE 
FROM
(SELECT A.*
      ,ZEROIFNULL(B.BL_SUMMRY_AM) AS STTMNT_BAL_AM
      ,0 AS MIN_PAY_DUE
FROM (SELECT * 
      FROM CC_COBRA.WK_FR11_STATEMENTS_T2 A
      WHERE STTMNT_DOCMNT_ID IS NULL
      AND NOT EXISTS (
      SELECT NULL
      FROM CC_COBRA.WK_FR11_STATEMENTS_T3 B
      WHERE A.AGRMNT_ID = B.AGRMNT_ID
      AND   A.STTMNT_DT = B.STTMNT_DT)
      ) A
LEFT JOIN GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.STTMNT_DT BETWEEN B.SOURCE_START_DT AND B.SOURCE_END_DT-1
AND  B.BL_SUMMRY_AM_CD = '00500003') A
CROSS JOIN 
CC_COBRA.WK_FR11_NON_STATEMENT_LKUP LREF
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T3 INDEX(STTMNT_DOCMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T3 INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T3 INDEX(STTMNT_DT);



.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*4.5 - RESET THE ASSUMED STTMNT_DOCMNT_ID TABLE - WHICH ALL HAVE NEGATIVE VALUES*/

UPDATE CC_COBRA.WK_FR11_NON_STATEMENT_LKUP
FROM (SELECT MIN(STTMNT_DOCMNT_ID) AS MIN_ID FROM  CC_COBRA.WK_FR11_STATEMENTS_T3) A
SET STTMNT_DOCMNT_ID = A.MIN_ID
WHERE A.MIN_ID IS NOT NULL
AND A.MIN_ID < 0
AND A.MIN_ID < (
SELECT MIN(STTMNT_DOCMNT_ID) AS MIN_ID 
FROM  CC_COBRA.FR11_STATEMENTS
WHERE STTMNT_DOCMNT_ID < 0);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR11_NON_STATEMENT_LKUP;


/*4.6 - INSERT  RECORDS THAT HAVE NEG STATEMENT IDS*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T3
SELECT
 A.AGRMNT_ID 
,A.STTMNT_DOCMNT_ID
,A.STTMNT_DT 
,A.PAYMNT_START_DT 
,A.PAYMNT_END_DT 
,B.BILLNG_CYCLE_NO
,B.BLOCK_CODE_1
,B.BLOCK_CODE_2 
,B.INT_STATUS 
,B.STTMNT_BALANC_AM 
,B.MIN_PAY_DUE 
FROM CC_COBRA.WK_FR11_STATEMENTS_T2 A
JOIN CC_COBRA.FR11_STATEMENTS B
ON   A.STTMNT_DOCMNT_ID = B.STTMNT_DOCMNT_ID
AND  A.STTMNT_DOCMNT_ID < 0
AND NOT EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR11_STATEMENTS_T3 C
WHERE A.STTMNT_DOCMNT_ID = C.STTMNT_DOCMNT_ID)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T3 INDEX(STTMNT_DOCMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T3 INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T3 INDEX(STTMNT_DT);

/*SECTION 5 - PREPARE DATA IN T5 FOR FINAL TABLE*/

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*5.1 - DELETE RECORDS THAT ARE MISS-MATCHING IN EVENT_END_DT WHERE LIVE IS NULL*/

DELETE FROM  CC_COBRA.WK_FR11_STATEMENTS_T5 A
WHERE EXISTS (
SELECT NULL
FROM
(
SELECT T3.STTMNT_DOCMNT_ID
FROM CC_COBRA.WK_FR11_STATEMENTS_T3 T3
JOIN CC_COBRA.WK_FR11_STATEMENTS_T5 T5
ON   T3.STTMNT_DOCMNT_ID = T5.STTMNT_DOCMNT_ID
WHERE T3.EVENT_END_DT IS NOT NULL AND T5.EVENT_END_DT IS NULL
) B
WHERE A.STTMNT_DOCMNT_ID = B.STTMNT_DOCMNT_ID
)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*5.2 - DELETE MATCHING ONES AS NO NEED TO RE-INSERT*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T3 T3
WHERE EXISTS (SELECT  NULL
                  FROM CC_COBRA.WK_FR11_STATEMENTS_T5 T5
                  WHERE T3.AGRMNT_ID = T5.AGRMNT_ID
                  AND   T3.STTMNT_DT = T5.STTMNT_DT
                  AND   T3.STTMNT_DOCMNT_ID = T5.STTMNT_DOCMNT_ID
                  AND   (T3.EVENT_END_DT = T5.EVENT_END_DT
                  OR    (T3.EVENT_END_DT IS NULL
                  AND    T5.EVENT_END_DT IS NULL))
                                    )
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*5.3 - INSERT INTO T5 FROM T3 WHERE NOT ALREADY THERE - MAKING T5 COMPLETE*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T5
SELECT 
	AGRMNT_ID
,	STTMNT_DOCMNT_ID
,	STTMNT_DT
,	EVENT_START_DT
,	EVENT_END_DT
,	BILLNG_CYCLE_NO
,	BLOCK_CODE_1
,	BLOCK_CODE_2
,	INT_STATUS
,	STTMNT_BAL_AM
,	MIN_PAY_DUE
,	NULL

FROM   CC_COBRA.WK_FR11_STATEMENTS_T3 T3
WHERE NOT EXISTS (SELECT NULL FROM CC_COBRA.WK_FR11_STATEMENTS_T5 T5
                  WHERE T3.STTMNT_DOCMNT_ID = T5.STTMNT_DOCMNT_ID);
                  
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T5;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CLEAR OUT T3*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T3 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T5 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 06 - REDO SEQ NO AND LOADING INTO FINAL STAGING TABLE*/

/*6.1 - PRE-DELETE STAGING TABLE*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T4 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*6.2 - RESEQUENCE STATEMENTS*/

INSERT INTO CC_COBRA.WK_FR11_STATEMENTS_T4
SELECT T1.AGRMNT_ID
      ,T1.STTMNT_DOCMNT_ID
      ,T1.STTMNT_DT
      ,T1.SEQ_NO+ZEROIFNULL(T2.MAX_SEQ_NO)
FROM 
(
SELECT AGRMNT_ID
               ,STTMNT_DOCMNT_ID
               ,STTMNT_DT
               ,RANK () OVER (PARTITION BY AGRMNT_ID
ORDER BY STTMNT_DT asc ) AS SEQ_NO
FROM   CC_COBRA.WK_FR11_STATEMENTS_T5 A
) T1
LEFT JOIN (
SELECT AGRMNT_ID
      ,MAX(SEQ_NO) AS MAX_SEQ_NO
FROM  CC_COBRA.FR11_STATEMENTS S
WHERE NOT EXISTS (SELECT NULL
                  FROM  CC_COBRA.WK_FR11_STATEMENTS_T5 T5
                  WHERE S.STTMNT_DOCMNT_ID = T5.STTMNT_DOCMNT_ID
                  AND   S.AGRMNT_ID = T5.AGRMNT_ID)
GROUP BY 1
)T2
ON  T1.AGRMNT_ID = T2.AGRMNT_ID
;
 
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T4  INDEX(SEQ_NO) ;
COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T4  INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR11_STATEMENTS_T4  INDEX(STTMNT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*6.3 - CHECK DATA HAS BEEN RESEQUENCED*/

SELECT TOP 1 A.* FROM CC_COBRA.WK_FR11_STATEMENTS_T4 A;

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;

/*6.4 - RELEASE SPACE*/

DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T1 ALL;
DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T2 ALL;
DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T2A ALL;
DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T3 ALL;
DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_SEQ ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*6.5 - DD COLLECTION*/

DELETE FROM CC_COBRA.WK_FR11_AGREEMENT_DD ALL;

INSERT INTO  CC_COBRA.WK_FR11_AGREEMENT_DD
SELECT A.AGRMNT_ID
      ,A.STTMNT_DOCMNT_ID
      ,COALESCE(CAST(SUBSTR(PAYMNT_OPTION_DETAIL_TYPE_CD,8,1) AS INT),0) AS DD_FLAG
FROM  CC_COBRA.WK_FR11_STATEMENTS_T5 A
LEFT JOIN  GDW_VIEWSX.AGREEMENT_PAYMENT_OPTION B
ON    PAYMNT_OPTION_TYPE_CD = '00500001'
AND  A.AGRMNT_ID = B.AGRMNT_ID
AND  SUBSTR(PAYMNT_OPTION_DETAIL_TYPE_CD,8,1) IN ('1','2')
AND  A.STTMNT_DT BETWEEN B.SOURCE_START_DT AND B.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR11_AGREEMENT_DD INDEX(AGRMNT_ID);

/*SECTION 7 - MAIN STATEMENT TABLE*/

/*7.1 - CLEAR OUT DATA THAT WILL BE REINSERTED*/

DELETE FROM CC_COBRA.FR11_STATEMENTS  A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR11_STATEMENTS_T5 T5
WHERE A.AGRMNT_ID = T5.AGRMNT_ID
AND   A.STTMNT_DT = T5.STTMNT_DT
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.FR11_STATEMENTS  A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR11_STATEMENTS_T5 T5
WHERE A.STTMNT_DOCMNT_ID = T5.STTMNT_DOCMNT_ID
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*7.2 - INSERT DATA FROM T5*/

INSERT INTO CC_COBRA.FR11_STATEMENTS
SELECT AD.ORG_TX
      ,AD.V_ORG
      ,A.AGRMNT_ID
      ,CAST(((A.STTMNT_DT/100*100)+1) AS DATE) AS STATEMENT_MTH
      ,A.STTMNT_DT
      ,A.EVENT_START_DT
      ,A.EVENT_END_DT
      ,A.BILLNG_CYCLE_NO
      ,A.STTMNT_DOCMNT_ID
      ,A.BLOCK_CODE_1
      ,A.BLOCK_CODE_2
      ,A.INT_STATUS
      ,A.MIN_PAY_DUE
      ,T4.SEQ_NO
      ,T1.DD_VALUE
      ,B.TOTAL_PAYMENT 
      ,B.PAYMENT_COUNT
      ,PAYMENT_DAYS
      ,CASE WHEN EVENT_END_DT IS NULL AND DATE-1 < CAL.PAYMNT_DUE_DT THEN 'J' /*PAYMENT NOT YET DUE*/
            WHEN (STTMNT_BAL_AM*-1) <= 0 AND TOTAL_PAYMENT = 0 THEN 'Z'
            WHEN (STTMNT_BAL_AM*-1) <= 0 THEN 'A'
            WHEN TOTAL_PAYMENT >= (STTMNT_BAL_AM*-1) THEN 'B'
            WHEN TOTAL_PAYMENT BETWEEN MIN_PAY_DUE AND
       ( CASE WHEN MIN_PAY_DUE < MIN_PAY_DUE/100*100 THEN MIN_PAY_DUE/100*100
              WHEN MIN_PAY_DUE > MIN_PAY_DUE/100*100 THEN (MIN_PAY_DUE/100*100)+1 
              ELSE MIN_PAY_DUE END ) THEN 'G'
            WHEN TOTAL_PAYMENT/(STTMNT_BAL_AM*-1) >= .75 THEN 'C'
            WHEN TOTAL_PAYMENT/(STTMNT_BAL_AM*-1) >= .5 THEN 'D'
            WHEN TOTAL_PAYMENT/(STTMNT_BAL_AM*-1) >= .25 THEN 'E'
            WHEN MIN_PAY_DUE > 0 AND TOTAL_PAYMENT = 0 THEN 'I' 
            WHEN TOTAL_PAYMENT < MIN_PAY_DUE THEN 'H'
            ELSE 'F'
            END AS PAYMENT_BAND
      ,STTMNT_BAL_AM AS STTMNT_BAL_AM  
FROM (SELECT *
      FROM CC_COBRA.WK_FR11_STATEMENTS_T5 A
      WHERE STTMNT_DOCMNT_ID IS NOT NULL
     )A 
JOIN  CC_COBRA.WK_FR11_STATEMENTS_T4 T4
ON    A.AGRMNT_ID = T4.AGRMNT_ID
AND   A.STTMNT_DOCMNT_ID = T4.STTMNT_DOCMNT_ID
JOIN  CC_COBRA.CC_AGREEMENT_ADDED_DATE AD
ON    A.AGRMNT_ID = AD.AGRMNT_ID
JOIN 
(SELECT STTMNT_DOCMNT_ID
      ,SUM(ZEROIFNULL(EVENT_AM)) AS TOTAL_PAYMENT
      ,COUNT(DISTINCT EVENT_ID) AS PAYMENT_COUNT
      ,MIN(POSTNG_DT-STTMNT_DT) AS PAYMENT_DAYS
      
FROM CC_COBRA.WK_FR11_STATEMENTS_T5 A
LEFT JOIN CC_COBRA.WK_FR11_PAYMENTS_T1 B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  ((B.POSTNG_DT BETWEEN A.EVENT_START_DT AND A.EVENT_END_DT)
OR   (B.POSTNG_DT >= A.EVENT_START_DT AND A.EVENT_END_DT IS NULL))
GROUP BY 1
) B
ON  A.STTMNT_DOCMNT_ID = B.STTMNT_DOCMNT_ID
LEFT JOIN  CC_COBRA.FR11_FDI_CALENDAR CAL
ON   A.STTMNT_DT/100 = CAL.STTMNT_MTH/100
AND  A.BILLNG_CYCLE_NO = CAL.BILLNG_CYCLE_NO 
LEFT JOIN   CC_COBRA.WK_FR11_AGREEMENT_DD T1
ON  A.AGRMNT_ID = T1.AGRMNT_ID
AND A.STTMNT_DOCMNT_ID = T1.STTMNT_DOCMNT_ID
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR11_STATEMENTS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR11_STATEMENTS COLUMN(STTMNT_MTH);
COLLECT STATS ON CC_COBRA.FR11_STATEMENTS COLUMN(EVENT_START_DT);
COLLECT STATS ON CC_COBRA.FR11_STATEMENTS COLUMN(EVENT_END_DT);
COLLECT STATS ON CC_COBRA.FR11_STATEMENTS COLUMN(SEQ_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - PAYMENTS BY BAND*/

/*8.1 - DELETE DATA THAT WILL BE INSERTED*/

DELETE FROM CC_COBRA.FR11_PAYMENTS A
WHERE EXISTS (
SELECT NULL
FROM  CC_COBRA.WK_FR11_PAYMENTS_T1 B
WHERE A.EVENT_ID = B.EVENT_ID
)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*8.2 - INSERT DATA THAT HAS BEEN PROCESSED*/

INSERT INTO CC_COBRA.FR11_PAYMENTS 
SELECT AD.ORG_TX
      ,AD.V_ORG
      ,A.EVENT_ID
      ,A.POSTNG_DT
      ,A.AGRMNT_ID
      ,A.EVENT_AM
      ,min(B.PAYMNT_BAND_CD)
      ,min(B.STTMNT_DT)
      ,min(A.POSTNG_DT-B.STTMNT_DT)
      ,min(B.BILLNG_CYCLE_NO)
FROM  CC_COBRA.WK_FR11_PAYMENTS_T1 A
JOIN  CC_COBRA.CC_AGREEMENT_ADDED_DATE AD
ON    A.AGRMNT_ID = AD.AGRMNT_ID
JOIN  CC_COBRA.FR11_STATEMENTS B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  ((A.POSTNG_DT BETWEEN B.EVENT_START_DT AND B.EVENT_END_DT)
OR    (A.POSTNG_DT >= B.EVENT_START_DT AND B.EVENT_END_DT IS NULL))  
GROUP BY 1,2,3,4,5,6;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*COLLECT STATS  ON CC_COBRA.FR11_PAYMENTS  INDEX(AGRMNT_ID);*/

COLLECT STATS  ON CC_COBRA.FR11_PAYMENTS  INDEX(EVENT_ID);

/*8.3 - CLEAR OUT WORK TABLES*/

DELETE FROM CC_COBRA.WK_FR11_AGREEMENT_DD ALL;
DELETE FROM CC_COBRA.WK_FR11_PAYMENTS_T1 ALL;
DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T5 ALL;
DELETE FROM CC_COBRA.WK_FR11_STATEMENTS_T4 ALL;

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR11'
;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR11';


.LABEL SKIPTOACC;


/*SECTION 9 - PAYMENT ACCRUAL*/

/*9.1 - TEST TO SEE HOW MANY DAYS INTO MONTH BEFORE THE ACCRUAL CAN BE DONE*/

SELECT *
FROM CC_COBRA.CC_COBRA_LOAD_LOG
WHERE GRID_LOAD_ID = 'FR11'
AND CURRENT_BUS_DT >=
(
	SELECT MAX(POSTNG_DT)
	FROM   CC_COBRA.FR11_FDI_CALENDAR_WORKDAY CAL
	JOIN   CC_COBRA.FR11_ACCRUAL_ME_POINT M
	ON     CAL.BILLNG_CYCLE_NO = M.BILLNG_CYCLE_NO
	AND    CAL.PAYMNT_WORK_DAYS_CT <= PAYMNT_DAYS_FROM_DUE_CT
	AND    CAL.STTMNT_MTH = (
    SELECT CURRENT_BUS_DT+1
    FROM CC_COBRA.CC_COBRA_LOAD_LOG
    WHERE GRID_LOAD_ID = 'FR11A'
    )
)
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPACC;


UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR11A'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;


/*
CREATE TABLE CC_COBRA.FR11A_REPORT_DT (
REPORT_DT DATE)
UNIQUE PRIMARY INDEX(REPORT_DT);

COLLECT STATS ON CC_COBRA.FR11A_REPORT_DT INDEX(REPORT_DT);
*/

/*MOVE REPORT DATE ON A MONTH FROM LAST COMPLETED MONTH*/

UPDATE CC_COBRA.FR11A_REPORT_DT 
SET REPORT_DT = (SELECT ADD_MONTHS(CURRENT_BUS_DT+1,1)-1 FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR11A');

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;

SELECT * FROM CC_COBRA.FR11A_REPORT_DT;


/*IF NOTHING COMES BACK THE REST OF THIS SECTION WILL BE SKIPPED*/

/*9.2 - THIS STEP COLLECTS THE PAYMENTS AND MAPS TO STATEMENTS AND PICKS UP THE NUMBER OF WORKING DAYS FROM THE PAYMENT DUE DATE THAT THE PAYMENT WAS MADE*/

DELETE FROM CC_COBRA.WK_FR11_FORECAST_T1 
WHERE STTMNT_MTH/100 >=
(SELECT ADD_MONTHS(CAST(((REPORT_DT/100*100)+1) AS DATE),0)/100 FROM CC_COBRA.FR11A_REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;

INSERT INTO CC_COBRA.WK_FR11_FORECAST_T1
SELECT 
AD.ORG_TX
,AD.V_ORG
,CAST(((T3.STTMNT_DT/100*100)+1) AS DATE)
,T3.STTMNT_DT
,T3.BILLNG_CYCLE_NO
,W.PAYMNT_WORK_DAYS_CT
,P.POSTNG_DT
,COUNT(*) AS VOLUME
,SUM(EVENT_AM)
FROM 
     (SELECT *
      FROM CC_COBRA.FR11_STATEMENTS A
      WHERE STTMNT_MTH/100 >=(SELECT ADD_MONTHS(CAST(((REPORT_DT/100*100)+1) AS DATE),0)/100 FROM CC_COBRA.FR11A_REPORT_DT)
     ) T3
JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE AD
ON   T3.AGRMNT_ID = AD.AGRMNT_ID
JOIN CC_COBRA.FR11_PAYMENTS P
ON   T3.AGRMNT_ID = P.AGRMNT_ID
AND  ((P.POSTNG_DT BETWEEN T3.EVENT_START_DT AND T3.EVENT_END_DT)
OR   (P.POSTNG_DT >= T3.EVENT_START_DT AND T3.EVENT_END_DT IS NULL))
LEFT JOIN CC_COBRA.FR11_FDI_CALENDAR_WORKDAY W
ON   T3.STTMNT_DT/100 = W.STTMNT_MTH/100
AND  T3.BILLNG_CYCLE_NO = W.BILLNG_CYCLE_NO
AND  P.POSTNG_DT = W.POSTNG_DT
GROUP BY 1,2,3,4,5,6,7;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;

COLLECT STATS ON  CC_COBRA.WK_FR11_FORECAST_T1 INDEX(STTMNT_MTH);

/*DELETE ANY PAYMNT_DAYS_FROM_DUE_CT = NULL - THESE WOULD NEVER BE NEEDED FOR ACCRUALS*/ 

DELETE FROM CC_COBRA.WK_FR11_FORECAST_T1 WHERE PAYMNT_DAYS_FROM_DUE_CT IS NULL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;


/*9.3 - THIS STEP SPLITS THE PAYMENT BY THE ACCRUAL CUT OFF AND MULTIPLIER*/

DELETE FROM CC_COBRA.WK_FR11_FORECAST_T2 
WHERE STTMNT_MTH/100 >=(SELECT ADD_MONTHS(CAST(((REPORT_DT/100*100)+1) AS DATE),0)/100 FROM CC_COBRA.FR11A_REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;

INSERT INTO CC_COBRA.WK_FR11_FORECAST_T2
SELECT A.ORG_TX
      ,A.V_ORG
      ,A.STTMNT_MTH
      ,A.BILLNG_CYCLE_NO
      ,CAL.PAYMNT_DUE_DT
      ,A.PAYMNT_DAYS_FROM_DUE_CT
      ,A.POSTNG_DT
      ,SUM(PAYMNT_CT)
      ,SUM(CASE 
            WHEN POSTNG_DT/100 > A.STTMNT_MTH/100
             AND  A.PAYMNT_DAYS_FROM_DUE_CT = M.PAYMNT_DAYS_FROM_DUE_CT
            THEN PAYMNT_AM*PERCENTAGE_MULTIPLIER
            WHEN POSTNG_DT/100 > A.STTMNT_MTH/100
             AND  A.PAYMNT_DAYS_FROM_DUE_CT < M.PAYMNT_DAYS_FROM_DUE_CT
            THEN PAYMNT_AM
            WHEN POSTNG_DT/100 = A.STTMNT_MTH/100
             AND A.PAYMNT_DAYS_FROM_DUE_CT = M.PAYMNT_DAYS_FROM_DUE_CT 
            THEN PAYMNT_AM*PERCENTAGE_MULTIPLIER*-1
            WHEN POSTNG_DT/100 = A.STTMNT_MTH/100
             AND  A.PAYMNT_DAYS_FROM_DUE_CT > M.PAYMNT_DAYS_FROM_DUE_CT
            THEN PAYMNT_AM*-1
           ELSE 0 END)
      ,NULL

FROM  (SELECT *
       FROM CC_COBRA.WK_FR11_FORECAST_T1 A
       WHERE NOT EXISTS (
       SELECT NULL
       FROM CC_COBRA.WK_FR11_FORECAST_T2 B
       WHERE A.STTMNT_MTH = B.STTMNT_MTH
       )
       ) A
JOIN  CC_COBRA.FR11_FDI_CALENDAR CAL
ON    A.STTMNT_MTH = CAL.STTMNT_MTH
AND   A.BILLNG_CYCLE_NO = CAL.BILLNG_CYCLE_NO
LEFT JOIN CC_COBRA.FR11_ACCRUAL_ME_POINT M
ON    A.BILLNG_CYCLE_NO = M.BILLNG_CYCLE_NO
GROUP BY 1,2,3,4,5,6,7
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;

COLLECT STATS ON  CC_COBRA.WK_FR11_FORECAST_T2 INDEX(BILLNG_CYCLE_NO);

/*9.4 - THIS STEP LOGS THE ACCRUAL INTO A TABLE - ESTIMATES COULD BE LOGGED HERE IF DEVELOPED IN THE FUTURE*/


DELETE FROM CC_COBRA.FR11_FORECAST_ACCRUAL 
WHERE STTMNT_MTH/100 >=(SELECT ADD_MONTHS(CAST(((REPORT_DT/100*100)+1) AS DATE),0)/100 FROM CC_COBRA.FR11A_REPORT_DT)
AND ACCRUAL_TYPE = 'A';

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;

INSERT INTO CC_COBRA.FR11_FORECAST_ACCRUAL
SELECT 
ORG_TX
,V_ORG
,STTMNT_MTH 
,'A'
,DATE
,BILLNG_CYCLE_NO
,PAYMNT_DUE_DT
,PAYMNT_DAYS_FROM_DUE_CT
,PAYMNT_CT 
,ACCRUAL_AM
,ADJ_ACCRUAL_AM
FROM 
CC_COBRA.WK_FR11_FORECAST_T2
WHERE STTMNT_MTH/100 >=(SELECT ADD_MONTHS(CAST(((REPORT_DT/100*100)+1) AS DATE),0)/100 FROM CC_COBRA.FR11A_REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;

/*9.5 - THIS STEP LOGS THE ACCRUAL INTO REPORTING TABLE*/


DELETE FROM CC_COBRA.FR11_REPORT_ACCRUALS ALL;

INSERT INTO CC_COBRA.FR11_REPORT_ACCRUALS
SELECT ORG_TX
      ,V_ORG
      ,STTMNT_MTH
      ,BILLNG_CYCLE_NO
      ,ACCRUAL_TYPE
      ,PAYMNT_DAYS_FROM_DUE_CT
      ,SUM(ACCRUAL_AM)
      ,SUM(ADJ_ACCRUAL_AM)
FROM CC_COBRA.FR11_FORECAST_ACCRUAL
WHERE ACCRUAL_TYPE = 'A'
GROUP BY 1,2,3,4,5,6;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRA;


/*UPDATE THE LOG TABLE IF IT HAS RUN OK - THIS WILL UPDATE TO THE END OF THE PRIOR MONTH*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT REPORT_DT FROM CC_COBRA.FR11A_REPORT_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR11A'
;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR11A';



.LABEL SKIPACC;

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;


.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR11'
;

.QUIT 0;

.LABEL FOUNDERRA;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR11A'
;

.QUIT 0;


.LABEL DONOTRUN;

.QUIT 0;
