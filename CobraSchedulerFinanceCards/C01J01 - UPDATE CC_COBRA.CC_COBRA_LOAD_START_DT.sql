/************************************************************************/
/*JOB:      C01J01 FINANCE DATA LOAD - RUN 1 - BEGIN JOB                */
/*VERSION:  C01J01v11 Run 1 - FIX TO DEAL WITH TIMEOUTS                 */
/*DATE VERSION IMPLEMENTED: 2019-12-31                                  */
/*DEPENDENCIES:                                                         */
/*                                                                      */
/*                                                                      */ 
/************************************************************************/

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8
.SET RETLIMIT 20;

DATABASE CC_COBRA;

/*STEP 01A: CREATE VOLATILE TABLE WITH VALUE OF 1 FOR RUN 1 ETC*/

CREATE MULTISET VOLATILE TABLE CC_COBRA_RUN_ID 
AS ( SELECT 1 AS RUN_ID
)
WITH DATA UNIQUE PRIMARY INDEX (RUN_ID)
ON COMMIT PRESERVE ROWS;

SELECT * FROM CC_COBRA_RUN_ID;

/*STEP 01B: SET ALL TO EQUAL 'C' IN CASE ANY HAVE ABORTED MIS-PROCESSING - ONLY FOR RUN 1!!!!!*/

SELECT * FROM CC_COBRA_RUN_ID WHERE RUN_ID = 1;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO RESETJOB;

/* THIS ALLOWS THE RESET WHEN IT DETECTS A TIMEOUT FOR C01J15*/ 
/* NOTE - THIS COULD BE USED FOR A DIFFERENT JOB THAT MIGHT BE TIMING OUT IF NEEDED*/

SELECT 
A.GRID_LOAD_ID
,A.UPDATE_DT
,A.UPDATE_TM
,C.GRID_LOAD_ID
,C.UPDATE_DT
,C.UPDATE_TM
,CAST( ((A.UPDATE_DT (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                       || ' ' || A.UPDATE_TM AS TIMESTAMP(0) )

              - CAST( ((A.LOAD_START_DT (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                         || ' ' || A.LOAD_START_TM AS TIMESTAMP(0) ) MINUTE(4) AS ELAPSED_MIN 
                         
,CAST( ((DATE (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                       || ' ' || TIME AS TIMESTAMP(0) )

              - CAST( ((A.UPDATE_DT (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                         || ' ' || A.UPDATE_TM AS TIMESTAMP(0) ) MINUTE(4)  AS MIN_SINCE_COMPLETED

FROM CC_COBRA.CC_COBRA_LOAD_LOG A
  --THIS PULLS UP THE LATEST JOB THAT HAS BEEN LOADED
JOIN (
SELECT MAX(UPDATE_TM) AS MAX_TM
FROM CC_COBRA.CC_COBRA_LOAD_LOG
WHERE UPDATE_DT = DATE) B
ON A.UPDATE_DT = DATE
AND A.UPDATE_TM = B.MAX_TM
  --MAKES SURE THAT IT IS C01J15
AND A.GRID_LOAD_ID = 'C01J15'
AND CAST( ((A.UPDATE_DT (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                       || ' ' || A.UPDATE_TM AS TIMESTAMP(0) )

              - CAST( ((A.LOAD_START_DT (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                         || ' ' || A.LOAD_START_TM AS TIMESTAMP(0) ) MINUTE(4)
  --AND THAT IT HAS TIMED OUT AFTER 2 HOURS (120 MIN)
>=   120
  --AND THAT MORE THAN 30 MIN HAS PASSED SINCE TIMING OUT
AND CAST( ((DATE (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                       || ' ' || TIME AS TIMESTAMP(0) )

              - CAST( ((A.UPDATE_DT (DATE, FORMAT 'YYYY-MM-DD')) (CHAR(10)) )
                         || ' ' || A.UPDATE_TM AS TIMESTAMP(0) ) MINUTE(4)
>=   30
   --THIS CHECKS THAT THERE ARE DAILY JOBS STILL NEEDING TO RUN - IT REMOVES ANY IN THE LOG THAT HAVEN'T UPDATED FOR A WHILE TO EXCLUDE THE DISABLED ONES
JOIN (
SELECT *
FROM CC_COBRA.CC_COBRA_LOAD_LOG
WHERE CURRENT_BUS_DT < (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND LOAD_FREQ = 'TWTFS'
AND CURRENT_BUS_DT >= DATE-3) C
ON A.GRID_LOAD_ID <> C.GRID_LOAD_ID
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPRESET;

.LABEL RESETJOB;

UPDATE CC_COBRA.CC_COBRA_LOAD_STATUS
SET RUN_STATUS = 'C'
;

.LABEL SKIPRESET;

/*STEP 01C: GRAB THE LOGS FROM THE CARD APPS BUSINESS BATCH JOB*/

/*DELETE FROM CC_COBRA.CC_COBRA_LOAD_LOG_HIST 
WHERE GRID_LOAD_ID = 'C02' AND EXISTS (
SELECT NULL
FROM CARDS_FINANCE_RESTRICTED.BUS_BATCH_LOAD_LOG A
WHERE CC_COBRA.CC_COBRA_LOAD_LOG_HIST.CURRENT_BUS_DT = A.CURRENT_BUS_DT);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

INSERT INTO CC_COBRA.CC_COBRA_LOAD_LOG_HIST
SELECT  
 GRID_LOAD_ID
,NULL AS RUN_ID
,LOAD_START_DT
,LOAD_START_TM
,UPDATE_DT
,UPDATE_TM
,CURRENT_LOAD_DT
,CURRENT_BUS_DT
FROM CARDS_FINANCE_RESTRICTED.BUS_BATCH_LOAD_LOG A
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_COBRA_LOAD_LOG_HIST T2
WHERE  A.GRID_LOAD_ID = T2.GRID_LOAD_ID
AND    A.CURRENT_BUS_DT = T2.CURRENT_BUS_DT
AND    A.UPDATE_DT = T2.UPDATE_DT
AND    A.UPDATE_TM = T2.UPDATE_TM
);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;*/

/* STEP 1D: FILTER TABLE CHECK SECTION - UPDATED 06-03-2019 WITH NEW FILTER TABLE STATUS        */

DELETE FROM CC_COBRA.GDW_FILTER_STATUS ALL;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

INSERT INTO CC_COBRA.GDW_FILTER_STATUS
SELECT
FILTERTABLENAME
,JOB 
,START_TIMESTAMP
,END_TIMESTAMP
FROM 
GDW_VIEWS.FILTER_TABLES_STATUS 
WHERE JOB IN (
SELECT JOB FROM CC_COBRA.GDW_FILTER_JOBS);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

COLLECT STATS ON CC_COBRA.GDW_FILTER_STATUS INDEX(JOB);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;


DELETE FROM CC_COBRA.GDW_FILTER_STATUS_HIST A
WHERE EXISTS (
SELECT NULL
FROM GDW_VIEWS.FILTER_TABLES_STATUS B
WHERE A.JOB = B.JOB
AND   A.START_TIMESTAMP = B.START_TIMESTAMP);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

INSERT INTO CC_COBRA.GDW_FILTER_STATUS_HIST
SELECT
FILTERTABLENAME
,JOB 
,START_TIMESTAMP
,END_TIMESTAMP
FROM 
GDW_VIEWS.FILTER_TABLES_STATUS 
WHERE JOB IN (
SELECT JOB FROM CC_COBRA.GDW_FILTER_JOBS);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

COLLECT STATS ON CC_COBRA.GDW_FILTER_STATUS_HIST INDEX(JOB);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;


/*STEP 01E: CHECK TO MAKE SURE THE LOAD CHECK ISN'T CURRENTLY RUNNING IN ANOTHER RUN IN COBRA*/
/*
I = IN PROGRESS
C = COMPLETED
*/

SELECT * 
FROM CC_COBRA.CC_COBRA_LOAD_STATUS
WHERE RUN_STATUS IN ('I') 
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO INPROG;

/*STEP 01F: UPDATE APPROPRIATE RUN TO 'I' STATUS*/

.RETRY OFF

BT ;

LOCKING CC_COBRA.CC_COBRA_LOAD_STATUS FOR WRITE ;

UPDATE CC_COBRA.CC_COBRA_LOAD_STATUS
SET RUN_STATUS = 'I' /*IN PROGRESS*/
   ,UPDATE_DT = DATE
   ,UPDATE_TM = TIME
WHERE RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID)
;

ET ;

/*SELECT TO SHOW THE OUTPUT FOR THE LOGS*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_STATUS
WHERE RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID);

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_STATUS ORDER BY 1;


/*STEP 01G: CHECK IF THE LOAD HAS ALREADY COMPLETED BY SEEING IF THE CONTROL TABLE IS UPDATED WITH TODAY'S DATE*/
/*IF IT IS, THEN IT WILL RETURN A RECORD WHICH WILL SKIP THE JOB*/
/*CODE ALTERED 06/03/2019 TO MAKE IT MORE CLEAR: IT CHECKS THAT THE COBRA LOAD DT ISN'T ALREADY TODAY OR IN THE CASE OF SUN OR MON, */
/*THAT IT ISN'T >= SATURDAY JUST BEFORE*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_LOAD_DT >= 
    (SELECT CASE WHEN DAY_OF_WEEK < 3 /*I.E. A SUNDAY OR MONDAY*/ THEN CALENDAR_DATE-DAY_OF_WEEK 
            ELSE CALENDAR_DATE END 
     FROM SYS_CALENDAR.CALENDAR 
     WHERE CALENDAR_DATE = DATE)
AND   GRID_LOAD_ID = 'C01J01';


.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*IF IT HAS ALREADY LOADED THE JOB WILL SKIP TO LABEL SKIPJOB*/

/*STEP 01H: COLLECT COBRA LOAD LOGS AND COPY TO THE HISTORY TABLE*/

/*FIRST DELETE */

DELETE FROM CC_COBRA.CC_COBRA_LOAD_LOG_HIST A
WHERE EXISTS (
SELECT NULL
FROM   CC_COBRA.CC_COBRA_LOAD_LOG T1
WHERE  A.GRID_LOAD_ID = T1.GRID_LOAD_ID
AND    A.CURRENT_BUS_DT = T1.CURRENT_BUS_DT
)
AND NOT EXISTS (
SELECT NULL
FROM   CC_COBRA.CC_COBRA_LOAD_LOG T2
WHERE  A.GRID_LOAD_ID = T2.GRID_LOAD_ID
AND    A.CURRENT_BUS_DT = T2.CURRENT_BUS_DT
AND    A.UPDATE_DT = T2.UPDATE_DT
AND    A.UPDATE_TM = T2.UPDATE_TM
)
;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

/*THEN INSERT*/

INSERT INTO CC_COBRA.CC_COBRA_LOAD_LOG_HIST
SELECT 
GRID_LOAD_ID
,RUN_ID
,LOAD_START_DT
,LOAD_START_TM
,UPDATE_DT 
,UPDATE_TM 
,CURRENT_LOAD_DT
,CURRENT_BUS_DT 
FROM CC_COBRA.CC_COBRA_LOAD_LOG A
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_COBRA_LOAD_LOG_HIST T2
WHERE  A.GRID_LOAD_ID = T2.GRID_LOAD_ID
AND    A.CURRENT_BUS_DT = T2.CURRENT_BUS_DT
AND    A.UPDATE_DT = T2.UPDATE_DT
AND    A.UPDATE_TM = T2.UPDATE_TM
)
;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;


/*STEP 01I: SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'C01J01'
AND   A.RUN_STATUS = 'I' 
AND   A.RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID)
;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

SELECT GRID_LOAD_ID, LOAD_STATUS, RUN_ID, LOAD_START_DT, LOAD_START_TM
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J01';


/*STEP 01J: ABORT FOR SATURDAYS, THIS FORCES THE RUN TO COMPLETE ON SUNDAY INSTEAD WHEN THE BOX IS LESS BUSY*/

SELECT *
FROM   SYS_CALENDAR.CALENDAR WHERE CALENDAR_DATE = DATE AND DAY_OF_WEEK = 7;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO ERRORJOB;



/*STEP 02: DEAL WITH XMAS - THERE IS NO VISION FEED FOR XMAS DAY SO WE SET THE LOGS TO COMPLETE*/
/*DOWNSTREAM JOBS ARE HANDLED SEPARATELY FOR XMAS DAY DATA WITHIN THEIR OWN JOB*/

/*STEP 02A: FIRST CHECK TO SEE IF THE LAST BUSINESS DATE LOADED IS A DAY THAT COULD BE */
/*THE LAST WORKING DAY BEFORE XMAS, IF NOT SKIP THIS XMAS CHECK*/

SELECT GRID_LOAD_ID, CURRENT_BUS_DT
FROM CC_COBRA.CC_COBRA_LOAD_LOG
WHERE GRID_LOAD_ID = 'C01J01'
AND   CURRENT_BUS_DT 
BETWEEN ((EXTRACT(YEAR FROM DATE)-1900)*10000)+1222 /*22 DEC OF CURRENT YEAR*/
AND     ((EXTRACT(YEAR FROM DATE)-1900)*10000)+1224 /*24 DEC OF CURRENT YEAR*/
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPXMAS;

/*STEP 02B: THEN CHECK TO SEE IF THE LAST DAY LOADED THE LAST WORKING DAY BEFORE XMAS WHICH */
/*WILL ONLY EXIST IN THIS REPORT CONTROL TABLE IF IT IS A WORKING DAY AND THAT THE CURRENT  */
/*SYSTEM DATE IS GREATER THAN XMAS DAY, IF NOT SKIP THIS XMAS CHECK*/

SELECT * 
FROM  CC_COBRA.GRID_REPORTS_CONTROL 
WHERE EXTRACT(YEAR  FROM CALENDAR_DATE) = EXTRACT(YEAR FROM DATE)
AND   EXTRACT(MONTH FROM CALENDAR_DATE) = 12
AND   EXTRACT(DAY   FROM CALENDAR_DATE) = 25
AND   PRIOR_WORKDAY_DT = (SELECT CURRENT_BUS_DT FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J01')
AND   EXTRACT(MONTH FROM DATE) = 12
AND   EXTRACT(DAY   FROM DATE) > 25
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPXMAS;

/*STEP 02C: IF THE ABOVE CONDITIONS ARE MET - IT WILL REACH THIS STEP WHICH WILL SET ALL */
/*THE CURRENT_BUS_DT'S TO BE XMAS WHERE THEY WERE PREVIOUSLY THE PRIOR WORKING DAY       */
/*BEFORE XMAS AND ALSO A DAILY JOB  - THIS WILL MEAN THAT ANY JOBS NOT UPDATED THE       */
/*PREVIOUS DAY WILL TRY TO RUN*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE LOAD_FREQ = 'TWTFS' ORDER BY 1;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM (SELECT CURRENT_BUS_DT FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J01') A
SET LOAD_START_DT = DATE
   ,LOAD_START_TM = TIME
   ,UPDATE_DT = DATE
   ,UPDATE_TM = TIME
   ,CURRENT_LOAD_DT = DATE
   ,CURRENT_BUS_DT = ((EXTRACT(YEAR FROM DATE)-1900)*10000)+1225 /*XMAS*/
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.CURRENT_BUS_DT = A.CURRENT_BUS_DT
AND   CC_COBRA.CC_COBRA_LOAD_LOG.LOAD_FREQ = 'TWTFS';

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE LOAD_FREQ = 'TWTFS' ORDER BY 1;

/*STEP 02D: QUIT JOB AND IGNORE FILTER CHECK*/

.QUIT;

.LABEL SKIPXMAS;


/*STEP 3: CHECKS TO SEE IF THERE IS DATA IN GRID FOR PROCESSING*/

/*STEP 03A: THIS CHECKS IF THERE IS ANY NEW DATA FOR CREDIT_CARD_AGREEMENT - ONE OF THE  */ 
/*FIRST TABLES TO BE LOADED THIS WILL INDICATE THE LOAD HAS AT LEAST STARTED, OTHERWISE  */
/*SKIP THE JOB*/

SELECT *
FROM (
SELECT SOURCE_START_DT, COUNT(*) AS VOLUME FROM GDW_VIEWSX.CREDIT_CARD_AGREEMENT GROUP BY 1) A
CROSS JOIN (SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J01') B
WHERE A.SOURCE_START_DT > B.CURRENT_BUS_DT
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO ERRORJOB;

/*STEP 03B: UPDATE CC_COBRA.CC_COBRA_LOAD_START_DT THIS SETS THE START_DT TO EQUAL THE   */
/*MINIMUM START_DT IN CREDIT_CARD_AGREEMENT WHERE IT IS LATER THAN THE CURRENT LOAD DT   */

/*
CREATE TABLE CC_COBRA.CC_COBRA_LOAD_START_DT (
START_DT DATE
,SOURCE_START_DT DATE
) UNIQUE PRIMARY INDEX(START_DT);
*/

DELETE FROM CC_COBRA.CC_COBRA_LOAD_START_DT ALL;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

INSERT INTO CC_COBRA.CC_COBRA_LOAD_START_DT
SELECT MIN(START_DT) AS START_DT, MIN_SSD AS SOURCE_START_DT
FROM 
(SELECT MIN(SOURCE_START_DT) AS MIN_SSD
FROM (SELECT SOURCE_START_DT FROM GDW_VIEWSX.CREDIT_CARD_AGREEMENT GROUP BY 1) A
CROSS JOIN (SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J01') B
WHERE A.SOURCE_START_DT > B.CURRENT_BUS_DT
) T1
JOIN GDW_VIEWSX.CREDIT_CARD_AGREEMENT CCA
ON   T1.MIN_SSD = CCA.SOURCE_START_DT
GROUP BY 2
;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

/*STEP 03C: WHERE THE LOAD HAS STARTED ON THE SAME DAY (USUALLY AFTER 9PM) THEN SET THE START_DT TO BE THE FOLLOWING DAY*/

UPDATE CC_COBRA.CC_COBRA_LOAD_START_DT
SET START_DT = SOURCE_START_DT+1
WHERE START_DT = SOURCE_START_DT;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

COLLECT STATS ON CC_COBRA.CC_COBRA_LOAD_START_DT INDEX(START_DT);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_START_DT ;

/*STEP 3D: CHECKING CONTENT OF GRID - THAT EVERYTHING HAS BEEN LOADED                                                 */
/*THIS CHECKS IF THERE IS ANY NEW ACCOUNT DATA FOR CREDIT_CARD_AGREEMENT - THIS TESTS IF THE FILTER TABLES ARE LOADED */
/*THIS WILL INDICATE THE FILTER TABLE HAS LOADED, OTHERWISE SKIP THE JOB                                              */

SELECT A.ORG_TX, MIN_SSD, COUNT(*)
FROM (
SELECT ORG_TX, AGRMNT_ID, MIN(SOURCE_START_DT) AS MIN_SSD FROM GDW_VIEWSX.CREDIT_CARD_AGREEMENT GROUP BY 1,2) A
CROSS JOIN (SELECT * FROM CC_COBRA.CC_COBRA_LOAD_START_DT ) B
WHERE A.MIN_SSD = B.SOURCE_START_DT
GROUP BY 1,2
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO ERRORJOB;


/*STEP 03E: CHECK THAT WE HAVE NEW ACCOUNTS FOR ALL RELEVANT ORGS*/

/*
CREATE TABLE CC_COBRA.CC_LOAD_ORG_CHECK (
ORG_TX CHAR(3)
,END_DT DATE )
UNIQUE PRIMARY INDEX(ORG_TX);

INSERT INTO CC_COBRA.CC_LOAD_ORG_CHECK SELECT '170',1130908;
INSERT INTO CC_COBRA.CC_LOAD_ORG_CHECK SELECT '120',16001231;
INSERT INTO CC_COBRA.CC_LOAD_ORG_CHECK SELECT '190',16001231;
INSERT INTO CC_COBRA.CC_LOAD_ORG_CHECK SELECT '195',16001231;
INSERT INTO CC_COBRA.CC_LOAD_ORG_CHECK SELECT '180',16001231;
COLLECT STATS ON CC_COBRA.CC_LOAD_ORG_CHECK INDEX(ORG_TX);
*/

SELECT *
FROM (
SELECT COUNT(*) AS VOLUME
FROM
(
SELECT A.ORG_TX, MIN_SSD, COUNT(*) AS VOL
FROM (
SELECT ORG_TX, AGRMNT_ID, MIN(SOURCE_START_DT) AS MIN_SSD FROM GDW_VIEWSX.CREDIT_CARD_AGREEMENT 
WHERE ORG_TX NOT IN  ('198','170') 
GROUP BY 1,2) A
CROSS JOIN (SELECT * FROM CC_COBRA.CC_COBRA_LOAD_START_DT ) B
WHERE A.MIN_SSD = B.SOURCE_START_DT
GROUP BY 1,2
) A ) T1
JOIN 
(SELECT COUNT(*) AS VOLUME FROM CC_COBRA.CC_LOAD_ORG_CHECK WHERE DATE<=END_DT) T2
ON T1.VOLUME = T2.VOLUME
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO ERRORJOB;


/*STEP 03F: THIS IS THE LAST TABLE WITH A SOURCE START DT THAT IS LOADED IN THE GRID LOAD UNLESS IT MANUALLY RUN THE DATA*/
/*IF DATA IS SELECTED THEN THE LOAD HAS COMPLETED*/

SELECT 'CC_TRIAD_MISC' , START_DT, SOURCE_START_DT, MIN(START_TM), MAX(START_TM), COUNT(*) 
FROM GDW_VIEWSX.CC_TRIAD_MISC A 
WHERE ((START_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) AND START_TM < 210000) 
   OR (START_DT = (SELECT START_DT-1 FROM CC_COBRA.CC_COBRA_LOAD_START_DT) AND START_TM >= 210000)) 
GROUP BY 1,2,3;

.IF ACTIVITYCOUNT = 0 THEN .GOTO ERRORJOB;

/*STEP 3G: UPDATE THE RAG REVIEW OF GDW*/

UPDATE CC_COBRA.GDW_RAG_REVIEW
FROM (
SELECT SOURCE_START_DT+1 AS START_DT, MAX(START_TM) AS MAXST
FROM GDW_VIEWSX.CC_TRIAD_MISC A 
WHERE ((START_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) AND START_TM < 210000) 
   OR (START_DT = (SELECT START_DT-1 FROM CC_COBRA.CC_COBRA_LOAD_START_DT) AND START_TM >= 210000)) 
GROUP BY 1) T1
SET BATCH_COMPLT_TM = T1.MAXST
WHERE LOAD_DT = T1.START_DT ;


/* STEP 4: FILTER TABLE CHECK SECTION - THIS IS A REPEAT OF SECTION 1D PLUS SOME EXTRA CHECKS */

/*
CREATE SET TABLE CC_COBRA.GDW_FILTER_STATUS ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      FILTER_NM VARCHAR(30) CHARACTER SET LATIN NOT CASESPECIFIC,
      JOB CHAR(8),
      START_TIMESTAMP TIMESTAMP,
      END_TIMESTAMP TIMESTAMP)
UNIQUE PRIMARY INDEX ( JOB );

CREATE SET TABLE CC_COBRA.GDW_FILTER_STATUS_HIST ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      FILTER_NM VARCHAR(30) CHARACTER SET LATIN NOT CASESPECIFIC,
      JOB CHAR(8),
      START_TIMESTAMP TIMESTAMP(0),
      END_TIMESTAMP TIMESTAMP(0))
PRIMARY INDEX ( JOB );
*/

/*
CREATE TABLE CC_COBRA.GDW_FILTER_JOBS (
JOB CHAR(8)
,FILTER_TYPE CHAR(4)
) UNIQUE PRIMARY INDEX(JOB);

INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86ZY1D','FLAG';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86ZZ1D','FLAG';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86DA1D','MAIN';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86FB1D','MAIN';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86DW1D','MAIN';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86ED1D','MAIN';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86DF1D','APPS';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86DB1D','APPS';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86HW1D','APPS';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86F81D','APPS';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86FJ1D','APPS';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86F91D','APPS';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86EW1D','APPS';
INSERT INTO CC_COBRA.GDW_FILTER_JOBS SELECT 'VP86IE1D','APPS';

COLLECT STATS ON CC_COBRA.GDW_FILTER_JOBS INDEX(JOB);
*/

/*STEP 4A: COLLECT FILTER TABLE STATUS FROM GDW TABLE*/

DELETE FROM CC_COBRA.GDW_FILTER_STATUS ALL;

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

INSERT INTO CC_COBRA.GDW_FILTER_STATUS
SELECT
FILTERTABLENAME
,JOB 
,START_TIMESTAMP
,END_TIMESTAMP
FROM 
GDW_VIEWS.FILTER_TABLES_STATUS 
WHERE JOB IN (
SELECT JOB FROM CC_COBRA.GDW_FILTER_JOBS);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

COLLECT STATS ON CC_COBRA.GDW_FILTER_STATUS INDEX(JOB);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;


/*STEP 04B: THIS IS THE CHECK TO MAKE SURE THE KEY FILTER TABLES HAVE BEEN UPDATED   */
/*          VP86ED1D IS THE LAST KEY ONE THAT WE NEED FOR THE COBRA LOAD TO COMMENCE */


SELECT *
FROM CC_COBRA.GDW_FILTER_STATUS  A
WHERE JOB = 'VP86ED1D' 
/*STATEMENT DOCUMENT ID FILTER TABLE IS USUALLY THE LAST ONE WE NEED - MAKE SURE IT HAS BEEN UPDATED SINCE 9PM ON THE START_DT (USUALLY YESTERDAY) */
AND END_TIMESTAMP > 
(SELECT CAST(START_DT-1 AS TIMESTAMP(6))+(TIME '21:00:00' - TIME '00:00:00' HOUR TO SECOND) AS TS 
FROM CC_COBRA.CC_COBRA_LOAD_START_DT);

.IF ACTIVITYCOUNT = 0 THEN .GOTO ERRORJOB;

/*STEP 04C: COLLECT DATA AND STORE IN HISTORY TABLE FOR DETAILED ANALYSIS OF BATCH COMPLETION*/

DELETE FROM CC_COBRA.GDW_FILTER_STATUS_HIST A
WHERE EXISTS (
SELECT NULL
FROM GDW_VIEWS.FILTER_TABLES_STATUS B
WHERE A.JOB = B.JOB
AND   A.START_TIMESTAMP = B.START_TIMESTAMP);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

INSERT INTO CC_COBRA.GDW_FILTER_STATUS_HIST
SELECT
FILTERTABLENAME
,JOB 
,START_TIMESTAMP
,END_TIMESTAMP
FROM 
GDW_VIEWS.FILTER_TABLES_STATUS 
WHERE JOB IN (
SELECT JOB FROM CC_COBRA.GDW_FILTER_JOBS);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

COLLECT STATS ON CC_COBRA.GDW_FILTER_STATUS_HIST INDEX(JOB);

.IF ERRORCODE <> 0 THEN .GOTO ERRORJOB;

/*STEP 04D: UPDATE THE RAG REVIEW OF GDW*/

UPDATE CC_COBRA.GDW_RAG_REVIEW
FROM (
SELECT B.START_DT AS END_DT, CAST(SUBSTR(CAST(END_TIMESTAMP AS VARCHAR(20)),12,19) AS INT) AS END_TM
FROM CC_COBRA.GDW_FILTER_STATUS  A
JOIN CC_COBRA.CC_COBRA_LOAD_START_DT B
ON   A.JOB = 'VP86ED1D' 
AND  A.END_TIMESTAMP > 
(SELECT CAST(START_DT-1 AS TIMESTAMP(6))+(TIME '21:00:00' - TIME '00:00:00' HOUR TO SECOND) AS TS 
FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
) T1
SET FILTER_TABLE_COMPLT_TM = T1.END_TM
WHERE LOAD_DT = T1.END_DT;


/*FINAL STEP - UPDATE LOAD LOG*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'C01J01'
;

/*L2BS RERUN FIX - FORCE BUS BATCH JOBS TO HAVE THE RIGHT RUN DATE*/
/*
UPDATE 
CC_COBRA.CC_COBRA_LOAD_LOG
FROM (
SELECT B.*
FROM 
(SELECT GRID_LOAD_ID, MAX(CURRENT_BUS_DT) AS CURRENT_BUS_DT
FROM CC_COBRA.CC_COBRA_LOAD_LOG_HIST
WHERE CURRENT_BUS_DT <= (SELECT CURRENT_BUS_DT FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J01')
GROUP BY 1) A
JOIN CC_COBRA.CC_COBRA_LOAD_LOG_HIST B
ON A.GRID_LOAD_ID = B.GRID_LOAD_ID
AND A.CURRENT_BUS_DT = B.CURRENT_BUS_DT
      ) A
      
SET CURRENT_LOAD_DT = A.CURRENT_LOAD_DT
   ,CURRENT_BUS_DT = A.CURRENT_BUS_DT
   ,UPDATE_DT = A.UPDATE_DT
   ,UPDATE_TM = A.UPDATE_TM
   ,LOAD_START_DT = A.LOAD_START_DT
   ,LOAD_START_TM = A.LOAD_START_TM
   ,RUN_ID = A.RUN_ID
   ,LOAD_STATUS = 'C'
   
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = A.GRID_LOAD_ID
AND CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID IN 
('C01J15'
,'C01J16'   
)
;
*/
SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J01';

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_STATUS
WHERE RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID);

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_STATUS ORDER BY 1;

.QUIT;

.LABEL INPROG;

/*FAILURE OF JOB - END ALL LOGS AND LOAD STATUS TABLES*/

UPDATE CC_COBRA.CC_COBRA_LOAD_STATUS
SET RUN_STATUS = 'C' /*COMPLETED*/
   ,UPDATE_DT = DATE
   ,UPDATE_TM = TIME
WHERE UPDATE_DT = DATE
AND RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID)
;

/*.QUIT 8 FORCES A RETURN CODE OF 8 WHICH MEANS COBRA RUN WILL FAIL*/

.QUIT 8;

.LABEL SKIPJOB;

/*UPDATE APPROPRIATE RUN TO 'S' STATUS - WHEN SKIPJOB ENVOKED, THEN JOB HAS BEEN COMPLETED*/

UPDATE CC_COBRA.CC_COBRA_LOAD_STATUS
SET RUN_STATUS = 'I' /*JOB SKIPPED BECAUSE ALREADY LOADED BUT NEED TO SET TO I SO REST OF JOBS COMPLETE*/
   ,UPDATE_DT = DATE
   ,UPDATE_TM = TIME
WHERE RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID)
;
SELECT * FROM CC_COBRA.CC_COBRA_LOAD_STATUS
WHERE RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID);

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_STATUS ORDER BY 1;

.QUIT 0;

.LABEL ERRORJOB;

/*FAILURE OF JOB - END ALL LOGS AND LOAD STATUS TABLES*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'C01J01'
;

UPDATE CC_COBRA.CC_COBRA_LOAD_STATUS
SET RUN_STATUS = 'C' /*COMPLETED*/
   ,UPDATE_DT = DATE
   ,UPDATE_TM = TIME
WHERE UPDATE_DT = DATE
AND RUN_ID = (SELECT RUN_ID FROM CC_COBRA_RUN_ID)
;

/*.QUIT 8 FORCES A RETURN CODE OF 8 WHICH MEANS COBRA RUN WILL FAIL*/

.QUIT 8;

