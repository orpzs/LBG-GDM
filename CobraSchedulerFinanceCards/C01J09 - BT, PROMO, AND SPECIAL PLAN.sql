/************************************************************************/
/*JOB:      C01J09 - CC_BT_ORG_PLAN_LOOKUP  & CC_PROMO_ORG_PLAN_LOOKUP  */
/*VERSION:  C01J09v10 - Most plans by rate FIX                          */
/*DATE VERSION IMPLEMENTED: 2022-05-12                                  */
/*                                                                      */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/************************************************************************/

/*
AMENDMENTS:
20160607CA	-	Changed step 3 . Instead of using INSERT, use MERGE to ensure that data gets refreshed and doesn't go stale.
							Also changed join back to self into QUALIFY and ROW_NUMBER to ensure only one value per ORG/PLAN combo
							gets entered into the table (some dupes were being introduced).  These have also been cleared out today and refreshed.
20170406CA	-	changed process to improve accuracy now that we have monthly L2CP table update.  Use L2CP as first point for plan term,
							using old code to pull in any new plans that do not appear in the L2CP. 
						-	also now change to update and insert seperately to add in LAST_UPDATED_DT
20170407CA	-	changed rate calc as was giving 'changed' values when they weren't changing - seems like a TD quirk
20180718JM  -   ADD IN PROMO_ORG_PLAN_LOOKUP AND IMPLEMENT HISTORICAL TABLE FOR AUDIT PURPOSES
20190222PG	-	MBNA Migration updates. Swap reference from CC_HBOS_MIGRATION_ACCOUNTS  to VW_CC_MIGRATION_ACCOUNTS. Case statement in step for
						-	also amended to default plan start date for migration accounts to migration date (23/02/2019) - in a similar way to how migrated HBOS accounts are treated.
						
20220512KL 	-   MBNA PLAN NO 50156 showing incorrect rate as the count(*) in the insert into CC_COBRA.WK_BT_ORG_PLAN_LOOKUP (row 165) does not give the largest volume, only 1 rate per plan
				change this to a SUM so that it pick up the largest number of plans at the rate


*/

/*C01J09 - CC_BT_ORG_PLAN_LOOKUP*/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 02: INITIAL CHECKS TO SEE IF THIS PARTICULAR JOB HAS ALREADY RUN SUCCESSFULLY*/
/*IF THERE IS ALREADY DATA IT WILL SKIP THE JOB*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J09';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'C01J09'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 03 - UPDATE REFERENCE DATA FOR BTS*/

/***************************************************/
/*BT LOOKUP                                     */
/***************************************************/

/* 
CREATE SET TABLE CC_COBRA.CC_BT_ORG_PLAN_LOOKUP ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      RATE DECIMAL(15,5),
      DAYS INTEGER,
      MONTHS INTEGER,
      LAST_UPDATED_DT DATE FORMAT 'YYYY-MM-DD')
PRIMARY INDEX ( PLAN_NO );
*/

/*CREATE ANOTHER WORK TABLE TO AVOID SPOOL/SKEW ISSUES - ADDED 2017-11-20*/

/*
CREATE TABLE CC_COBRA.WK_BT_ORG_PLAN_LOOKUP_GRID (
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      DAYS INTEGER,
      MONTHS INTEGER,
      RATE DECIMAL(15,5),
      VOLUME INTEGER)
PRIMARY INDEX ( PLAN_NO );
*/

DELETE FROM CC_COBRA.WK_BT_ORG_PLAN_LOOKUP_GRID ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_BT_ORG_PLAN_LOOKUP_GRID
SELECT CCPL.ORG_TX AS NP_ORG_TX
, CCPL.ORIGNL_PLAN_NO AS NP_ORIGNL_PLAN_NO
, CASE WHEN  AFF.EFFCTV_DT >= '2049/12/31' THEN 998 ELSE	AFF.EFFCTV_DT-CCPL.ORIGNL_PLAN_START_DT END AS NP_DAYS
, CASE WHEN NP_DAYS = 998 THEN 998 ELSE NP_DAYS/30 END AS NP_MONTHS
, CAST(AFF2.AGRMNT_FEATUR_FEATUR_RT/100 AS DECIMAL(15,5)) AS NP_RATE
, COUNT(*) AS VOLUME

FROM   GDW_VIEWS.CC_CREDIT_PLAN_LOOKUP CCPL --FEATUR_ID to plan no

JOIN   GDW_VIEWS.AGREEMENT_FEATURE_FEATURE AFF
ON     CCPL.FEATUR_ID = AFF.FEATUR_ID
AND    AFF.RELATD_FEATUR_ID = 5020   --ITO Expiration Date
AND    CCPL.ORIGNL_PLAN_START_DT >= '2009/05/23'
AND    CCPL.ORIGNL_PLAN_START_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1

JOIN   (SELECT * FROM CC_COBRA.CC_PLAN_LOOKUP WHERE BW_PLAN_TYPE_CD IN ('B','M')) BTCCPL----only want BT plans (PROMO) --CHANGE JM 2017-05-22
ON 	   CCPL.ORG_TX = BTCCPL.ORG_TX
AND    CCPL.ORIGNL_PLAN_NO = BTCCPL.PLAN_NO

JOIN   GDW_VIEWS.AGREEMENT_FEATURE_FEATURE AFF2
ON     AFF.AGRMNT_ID = AFF2.AGRMNT_ID
AND    AFF.FEATUR_ID = AFF2.FEATUR_ID
AND    AFF2.RELATD_FEATUR_ID = 5013 -- CALCULATED RATE BASED ON RATE INDEX TABLE WITH BASE SEGMENT VARIANCES
AND    CCPL.ORIGNL_PLAN_START_DT BETWEEN AFF2.SOURCE_START_DT AND AFF2.SOURCE_END_DT-1

JOIN   GDW_VIEWS.AGREEMENT_FEATURE_FEATURE AFF3
ON     AFF.AGRMNT_ID = AFF3.AGRMNT_ID
AND    AFF.FEATUR_ID = AFF3.FEATUR_ID
AND    AFF3.RELATD_FEATUR_ID = 5018   -- Current Plan Number
AND    CCPL.ORIGNL_PLAN_START_DT BETWEEN AFF3.SOURCE_START_DT AND AFF3.SOURCE_END_DT-1
AND    AFF3.AGRMNT_FEATUR_FEATUR_NO = CAST(CCPL.ORIGNL_PLAN_NO AS CHAR(5)) --MAKE SURE THE FIRST RECORD IS THE CORRECT PLAN NO
GROUP BY 1,2,3,4,5
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_BT_ORG_PLAN_LOOKUP_GRID INDEX ( PLAN_NO );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CREATE WORK TABLE TO HOLD PLANS - ADDED JM 23-05-2017*/

/*
CREATE TABLE CC_COBRA.WK_BT_ORG_PLAN_LOOKUP (
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      DAYS INTEGER,
      MONTHS INTEGER,
      RATE DECIMAL(15,5),
      VOLUME INTEGER)
PRIMARY INDEX ( PLAN_NO );
*/

DELETE FROM CC_COBRA.WK_BT_ORG_PLAN_LOOKUP ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_BT_ORG_PLAN_LOOKUP
SELECT *
	FROM 
		(
		SELECT CCPL.ORG_TX AS NP_ORG_TX
		, CCPL.PLAN_NO AS NP_ORIGNL_PLAN_NO
		, CASE WHEN L2CP.ORG_TX IS NOT NULL THEN L2CP.ITO_EXPIRY_NO  --pull from L2CP first
			   ELSE DAYS END AS NP_DAYS
		, CASE WHEN L2CP.ORG_TX IS NOT NULL THEN L2CP.OFFER_TERM_NO  --pull from L2CP first
               ELSE MONTHS END AS NP_MONTHS
		, RATE AS NP_RATE
		--, COUNT(*) AS VOLUME
        ,SUM(VOLUME) AS VOLUME
		
		FROM   CC_COBRA.WK_BT_ORG_PLAN_LOOKUP_GRID CCPL
		
		--===================================================================CA20170406 - now use L2CP
		LEFT OUTER JOIN 
		(SEL ORG_TX
		,PLAN_NO
		,ITO_EXPIRY_NO
		,OFFER_TERM_NO
		,PERIOD_END_DT
		FROM CC_COBRA.CC_L2CP_LOOKUP
		WHERE FD_PLAN_TYPE = 'B' --only want BT plans (PROMO)
		GROUP BY 1,2,3,4,5
		QUALIFY ROW_NUMBER() OVER (PARTITION BY ORG_TX, PLAN_NO,ITO_EXPIRY_NO,OFFER_TERM_NO ORDER BY PERIOD_END_DT DESC) = 1
		--20170406CA - in production we onlyt want the latesrt attributes for plans
		) L2CP
		ON 	   CCPL.ORG_TX = L2CP.ORG_TX
		AND   CCPL.PLAN_NO = L2CP.PLAN_NO
		--===================================================================
		GROUP BY 1,2,3,4,5
		) A
	QUALIFY ROW_NUMBER() OVER (PARTITION BY NP_ORG_TX, NP_ORIGNL_PLAN_NO ORDER BY VOLUME DESC,NP_RATE DESC) = 1
	--20160607CA - This gives a maximum of one value that can be inserted into the table – the largest by volume, then rate
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_BT_ORG_PLAN_LOOKUP INDEX(PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

--UPDATE ANY ATTRIBUTES THAT HAVE CHANGED - AMENDED JM 23-05-2017

UPDATE CC_COBRA.CC_BT_ORG_PLAN_LOOKUP
FROM  CC_COBRA.WK_BT_ORG_PLAN_LOOKUP  WK 				
SET RATE = WK.RATE
, DAYS = WK.DAYS 
, MONTHS = WK.MONTHS  	
, LAST_UPDATED_DT = DATE			

WHERE CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.ORG_TX = WK.ORG_TX  --i.e. update the rate, days or months for plans that exist already, if they've changed since first inserted
AND CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.PLAN_NO = WK.PLAN_NO
AND 
(
CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.RATE <> WK.RATE
OR
CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.DAYS <> WK.DAYS 
OR
CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.MONTHS <> WK.MONTHS  		
)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_BT_ORG_PLAN_LOOKUP INDEX ( PLAN_NO );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

--INSERT ANY NEW PLANS - AMENDED JM 23-05-2017

INSERT INTO  CC_COBRA.CC_BT_ORG_PLAN_LOOKUP
(--COLUMN LIST
ORG_TX	
,PLAN_NO
,RATE	
,DAYS	
,MONTHS
,LAST_UPDATED_DT
)

	            SELECT  ORG_TX
					    ,PLAN_NO
					    ,RATE
					    ,DAYS
					    ,MONTHS
					    ,DATE
						FROM  CC_COBRA.WK_BT_ORG_PLAN_LOOKUP A
                        WHERE NOT EXISTS (
                        SELECT NULL
                        FROM CC_COBRA.CC_BT_ORG_PLAN_LOOKUP B
                        WHERE A.ORG_TX = B.ORG_TX
                        AND   A.PLAN_NO = B.PLAN_NO)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_BT_ORG_PLAN_LOOKUP INDEX ( PLAN_NO );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SET UP HISTORY TABLE FOR BT LOOKUP*/

/*INSERT DATA INTO HISTORY*/

/*
CREATE SET TABLE CC_COBRA.CC_BT_ORG_PLAN_LOOKUP_HIST,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (ORG_TX CHAR(3),
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      RATE DECIMAL(15,5),
      DAYS INTEGER,
      MONTHS INTEGER,
      SOURCE_START_DT DATE,
      SOURCE_END_DT DATE
      )
PRIMARY INDEX ( PLAN_NO );

LOAD INITIAL DATA
DELETE FROM CC_COBRA.CC_BT_ORG_PLAN_LOOKUP_HIST ;
INSERT INTO CC_COBRA.CC_BT_ORG_PLAN_LOOKUP_HIST 
SELECT
ORG_TX
,PLAN_NO
,RATE
,DAYS
,MONTHS
,101
,16001231

FROM CC_COBRA.CC_BT_ORG_PLAN_LOOKUP
*/

/*SET SED TO EQUAL TODAYS DATE WHERE THE ORG AND PLAN_NO ALREADY EXIST BUT DATA HAS CHANGED*/

UPDATE CC_COBRA.CC_BT_ORG_PLAN_LOOKUP_HIST
FROM (
SELECT ORG_TX,PLAN_NO,RATE,DAYS,MONTHS FROM CC_COBRA.CC_BT_ORG_PLAN_LOOKUP) T1
SET SOURCE_END_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
WHERE CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.ORG_TX = T1.ORG_TX
AND   CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.PLAN_NO = T1.PLAN_NO
AND   (COALESCE(CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.RATE,999.99999) <> COALESCE(T1.RATE,999.99999)
OR     COALESCE(CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.DAYS,0) <> COALESCE(T1.DAYS,0)
OR     COALESCE(CC_COBRA.CC_BT_ORG_PLAN_LOOKUP.MONTHS,0) <> COALESCE(T1.MONTHS,0))
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT NEW RECORDS*/

INSERT INTO CC_COBRA.CC_BT_ORG_PLAN_LOOKUP_HIST
SELECT
ORG_TX
,PLAN_NO
,RATE
,DAYS
,MONTHS
,L.SOURCE_START_DT
,'3500/12/31'
FROM CC_COBRA.CC_BT_ORG_PLAN_LOOKUP A
CROSS JOIN
     CC_COBRA.CC_COBRA_LOAD_START_DT L
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_ORG_PLAN_LOOKUP_HIST B
WHERE A.ORG_TX = B.ORG_TX
AND   A.PLAN_NO = B.PLAN_NO
AND   COALESCE(A.RATE,999.99999) = COALESCE(B.RATE,999.99999)
AND   COALESCE(A.DAYS,0) = COALESCE(B.DAYS,0)
AND   COALESCE(A.MONTHS,0) = COALESCE(B.MONTHS,0))
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 04 - UPDATE REFERENCE DATA FOR PROMOS*/

/***************************************************/
/*PROMO LOOKUP                                     */
/***************************************************/
/*
CREATE SET TABLE CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      RATE DECIMAL(15,5),
      MONTHS INTEGER)
PRIMARY INDEX ( PLAN_NO );
*/

DELETE FROM CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP  ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

CREATE VOLATILE TABLE C01J09_VOL_STG1 AS (              
        SELECT  AF.AGRMNT_ID
               ,AF.FEATUR_ID
               ,CCPL.ORG_TX
               ,CCPL.ORIGNL_PLAN_NO
               ,CCPL.PLAN_ADDED_DT
               /*,CASE WHEN MA.AGRMNT_ID IS NOT NULL THEN DATE'2014-02-15' ELSE PLAN_ADDED_DT END AS FIRST_REC_DT --Replaced on 24/02/2019 - MBNA migration        */
			    ,CASE WHEN CCPL.ORG_TX = '180' AND MA.AGRMNT_ID IS NOT NULL THEN DATE'2019-02-23'
			   	WHEN MA.AGRMNT_ID IS NOT NULL THEN DATE'2014-02-15' ELSE PLAN_ADDED_DT END AS FIRST_REC_DT
               --SEL *
        FROM    GDW_VIEWS.CC_CREDIT_PLAN_LOOKUP CCPL  --FEATUR_ID to plan no
        
        JOIN    CC_COBRA.CC_PLAN_LOOKUP PL  --only want PROMO retail plans
        ON      CCPL.ORG_TX = PL.ORG_TX
        AND     CCPL.ORIGNL_PLAN_NO = PL.PLAN_NO
        AND     PL.BW_PLAN_TYPE_CD = 'P'
        
        JOIN    GDW_VIEWS.AGREEMENT_FEATURE AF
        ON      CCPL.FEATUR_ID = AF.FEATUR_ID
        AND     AF.SOURCE_END_DT = '3500/12/31' 
        
        /*LEFT JOIN CC_COBRA.CC_HBOS_MIGRATION_ACCOUNTS MA --Replaced on 24/02/2019 - MBNA migration        */
		LEFT JOIN CC_COBRA_VIEWS.VW_CC_MIGRATION_ACCOUNTS MA
        ON      AF.AGRMNT_ID = MA.AGRMNT_ID
		) WITH DATA AND STATISTICS PRIMARY INDEX(AGRMNT_ID, FEATUR_ID) ON COMMIT PRESERVE ROWS
;


INSERT INTO CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP
SELECT 
 ORG_TX
,PLAN_NO
,RATE
,OFFER_TERM_NO
FROM 
    (
        SELECT   
         T1.ORG_TX      
        ,T1.ORIGNL_PLAN_NO AS PLAN_NO
        ,AFF.AGRMNT_FEATUR_FEATUR_RT AS RATE
        ,CP.OFFER_TERM_NO 
        ,COUNT(*) AS VOLUME
        FROM
        (
SEL * FROM C01J09_VOL_STG1        ) T1

        JOIN    GDW_VIEWS.AGREEMENT_FEATURE_FEATURE AFF
        ON      T1.FEATUR_ID = AFF.FEATUR_ID         
        AND     AFF.RELATD_FEATUR_ID = 5013
        AND     T1.AGRMNT_ID = AFF.AGRMNT_ID
        AND     T1.FIRST_REC_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1
        
        JOIN    GDW_VIEWS.AGREEMENT_FEATURE_FEATURE AFF2
        ON      T1.FEATUR_ID = AFF2.FEATUR_ID         
        AND     AFF2.RELATD_FEATUR_ID = 5018
        AND     T1.AGRMNT_ID = AFF2.AGRMNT_ID
        AND     T1.FIRST_REC_DT BETWEEN AFF2.SOURCE_START_DT AND AFF2.SOURCE_END_DT-1
        AND     AFF2.AGRMNT_FEATUR_FEATUR_NO = CAST(T1.ORIGNL_PLAN_NO AS CHAR(5))  
        /*BY INNER JOINING TO 5020 WE REMOVE RECORDS THAT WERE EXPIRED ON MIGRATION ALREADY*/
        JOIN    GDW_VIEWS.AGREEMENT_FEATURE_FEATURE AFF3
        ON      T1.FEATUR_ID = AFF3.FEATUR_ID         
        AND     AFF3.RELATD_FEATUR_ID = 5020
        AND     T1.AGRMNT_ID = AFF3.AGRMNT_ID
        AND     T1.FIRST_REC_DT BETWEEN AFF3.SOURCE_START_DT AND AFF3.SOURCE_END_DT-1

        LEFT JOIN    (
        SEL ORG_TX
		,PLAN_NO
		,ITO_EXPIRY_NO
		,OFFER_TERM_NO
		,PERIOD_END_DT
		FROM CC_COBRA.CC_L2CP_LOOKUP
				GROUP BY 1,2,3,4,5
		QUALIFY ROW_NUMBER() OVER (PARTITION BY ORG_TX, PLAN_NO ORDER BY PERIOD_END_DT DESC) = 1
        ) CP
        ON      T1.ORG_TX = CP.ORG_TX
        AND     T1.ORIGNL_PLAN_NO = CP.PLAN_NO     
        GROUP BY 1,2,3,4) A
        QUALIFY ROW_NUMBER() OVER (PARTITION BY ORG_TX, PLAN_NO ORDER BY VOLUME DESC,RATE DESC) = 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT DATA INTO HISTORY*/

/*
CREATE SET TABLE CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (ORG_TX CHAR(3),
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      RATE DECIMAL(15,5),
      MONTHS INTEGER,
      SOURCE_START_DT DATE,
      SOURCE_END_DT DATE
      )
PRIMARY INDEX ( PLAN_NO );

LOAD INITIAL DATA
DELETE FROM CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST ;
INSERT INTO CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST 
SELECT
ORG_TX
,PLAN_NO
,RATE
,MONTHS
,101
,16001231

FROM CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP
*/

/*SET SED TO EQUAL TODAYS DATE WHERE THE ORG AND PLAN_NO ALREADY EXIST BUT DATA HAS CHANGED*/

UPDATE CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST
FROM (
SELECT ORG_TX,PLAN_NO,RATE,MONTHS FROM CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP) T1
SET SOURCE_END_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
WHERE CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST.ORG_TX = T1.ORG_TX
AND   CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST.PLAN_NO = T1.PLAN_NO
AND   (COALESCE(CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST.RATE,999.99999) <> COALESCE(T1.RATE,999.99999)
OR     COALESCE(CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST.MONTHS,0) <> COALESCE(T1.MONTHS,0))
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT NEW RECORDS*/

INSERT INTO CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST
SELECT
ORG_TX
,PLAN_NO
,RATE
,MONTHS
,L.SOURCE_START_DT
,'3500/12/31'
FROM CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP A
CROSS JOIN
     CC_COBRA.CC_COBRA_LOAD_START_DT L
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST B
WHERE A.ORG_TX = B.ORG_TX
AND   A.PLAN_NO = B.PLAN_NO
AND   COALESCE(A.RATE,999.99999) = COALESCE(B.RATE,999.99999)
AND   COALESCE(A.MONTHS,0) = COALESCE(B.MONTHS,0))
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 05 - UPDATE REFERENCE DATA ALL SPECIAL PLANS (BT PROMO, INSTALMENT ETC)*/

/***************************************************/
/*SPECIAL LOOKUP FOR FR15                          */
/***************************************************/

/*CHANGE JM 2017-05-22 ADDED TO CREATE NEW TABLE FOR FR15 TO BE ABLE TO FLAG ALL TYPES OF PROMO/BT/MONEY TRANSFER AND INSTALMENT PLANS*/

DELETE FROM CC_COBRA.CC_ORG_SPECIAL_PLAN_LOOKUP ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT BT AND MONEY TRANSFER PLANS*/

INSERT INTO CC_COBRA.CC_ORG_SPECIAL_PLAN_LOOKUP
SELECT
A.ORG_TX
,A.PLAN_NO
,A.RATE
,A.DAYS
,A.MONTHS
,B.SOURCE_START_DT
FROM CC_COBRA.CC_BT_ORG_PLAN_LOOKUP A
JOIN CC_COBRA.CC_BT_ORG_PLAN_LOOKUP_HIST B
ON   A.ORG_TX = B.ORG_TX
AND  A.PLAN_NO = B.PLAN_NO
AND  COALESCE(A.RATE,999.99999) = COALESCE(B.RATE,999.99999)
AND  COALESCE(A.DAYS,0) = COALESCE(B.DAYS,0)
AND  COALESCE(A.MONTHS,0) = COALESCE(B.MONTHS,0)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT PROMO PLANS*/

INSERT INTO CC_COBRA.CC_ORG_SPECIAL_PLAN_LOOKUP
SELECT
A.ORG_TX
,A.PLAN_NO
,CAST(A.RATE AS FLOAT)/CAST(100.000000 AS FLOAT)
,NULL
,A.MONTHS
,B.SOURCE_START_DT
FROM CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP A
JOIN CC_COBRA.CC_PROMO_ORG_PLAN_LOOKUP_HIST B
ON   A.ORG_TX = B.ORG_TX
AND  A.PLAN_NO = B.PLAN_NO
AND  COALESCE(A.RATE,999.99999) = COALESCE(B.RATE,999.99999)
AND  COALESCE(A.MONTHS,0) = COALESCE(B.MONTHS,0)

WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_ORG_SPECIAL_PLAN_LOOKUP C
WHERE A.ORG_TX = C.ORG_TX
AND   A.PLAN_NO = C.PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT INSTALMENT PLANS*/

INSERT INTO CC_COBRA.CC_ORG_SPECIAL_PLAN_LOOKUP
SELECT 
ORG_TX
,PLAN_NO
,NULL
,NULL
,NULL
,DATE

FROM CC_COBRA.CC_PLAN_LOOKUP WHERE BW_PLAN_TYPE_CD = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE THE LOAD LOG TO THE CURRENT DATE TO INDICATE SUCCESSFUL PROCESSING*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'C01J09'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT 
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J09';

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'C01J09'
;

.QUIT 0;

