/************************************************************************/
/*JOB:      C01J04 - CC_COBRA.CC_EVENTS_TO_EXCLUDE                      */
/*VERSION:  C01J04v07 - use CC_ACCOUNT_DAILY WHERE POSSIBLE             */
/*DATE VERSION IMPLEMENTED: 2019-12-29                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 02: INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 03: INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*STEP 04: INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'C01J04'
AND   A.RUN_STATUS = 'I'
;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 05: EVENTS TO EXCLUDE FROM CC_MONETARY_TRANSACTION_HIST*/

/*
CREATE SET TABLE CC_COBRA.WK_CC_EVENTS_DATE_CONTROL ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      REPORT_DT DATE FORMAT 'YYYY-MM-DD'
     ,PRIOR_REPORT_DT DATE  FORMAT 'YYYY-MM-DD')
UNIQUE PRIMARY INDEX ( REPORT_DT );
*/

/* COLLECT ALL DATES THAT HAVE NOT BEEN RUN YET FROM LOAD_START_DT TO END OF FOLLOWING MONTH - HELPS WITH CATCH UP RERUNNING*/

DELETE FROM CC_COBRA.WK_CC_EVENTS_DATE_CONTROL ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_CC_EVENTS_DATE_CONTROL
SELECT CALENDAR_DATE, NULL
FROM  CC_COBRA.GRID_REPORTS_CONTROL /*CALENDAR TABLE FOR REPORTING*/
WHERE (CALENDAR_DATE > (SELECT MAX(SOURCE_START_DT) FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE)
OR    CALENDAR_DATE = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT))
AND   CALENDAR_DATE <= (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_DATE_CONTROL INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.WK_CC_EVENTS_DATE_CONTROL
FROM CC_COBRA.GRID_REPORTS_CONTROL B
SET PRIOR_REPORT_DT = B.PRIOR_WORKDAY_DT
WHERE CC_COBRA.WK_CC_EVENTS_DATE_CONTROL.REPORT_DT = B.CALENDAR_DATE
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_CC_EVENTS_DATE_CONTROL;


/*STEP 06: COLLECT ALL TXNS*/

/*
CREATE SET TABLE CC_COBRA.WK_CC_EVENTS_T1 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      EVENT_ACTVTY_CD CHAR(8) CHARACTER SET LATIN NOT CASESPECIFIC,
      TRNSCN_DERVTN_GRP VARCHAR(30) CHARACTER SET LATIN NOT CASESPECIFIC,
      EVENT_AM DECIMAL(15,2),
      EVENT_ID BIGINT,
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      REVRSL_IN BYTEINT COMPRESS (0 ,1 ))
UNIQUE PRIMARY INDEX ( EVENT_ID )
INDEX ( AGRMNT_ID );
*/


DELETE FROM CC_COBRA.WK_CC_EVENTS_T1 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO  CC_COBRA.WK_CC_EVENTS_T1
SELECT     MT.AGRMNT_ID
          ,MT.EVENT_ACTVTY_CD
          ,COALESCE((CASE 
                       WHEN C.TRNSCN_DERVTN_GRP = 'RETAIL' AND MRCHNT_DS LIKE ANY ('%SENTINEL GOLD%','%FER OF SENTINEL%','%SENTINEL CARD%') THEN 'SENTINEL'
                       WHEN C.TRNSCN_DERVTN_GRP = 'RETAIL' AND MRCHNT_DS LIKE '%PRIVACY%' AND MRCHNT_DS LIKE '%GUARD%' THEN 'PRIVACY GUARD'
                       ELSE C.TRNSCN_DERVTN_GRP END), 'UNKNOWN') 
          ,MT.EVENT_AM
          ,MT.EVENT_ID  
          ,DC.REPORT_DT
          ,C.REVRSL_IN

FROM       GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST MT
INNER JOIN CC_COBRA.WK_CC_EVENTS_DATE_CONTROL DC
ON         MT.SOURCE_START_DT = DC.REPORT_DT
AND       (MT.POSTNG_DT = MT.SOURCE_START_DT
OR         MT.TRNSCN_CATGRY_CD = '005    G')
INNER JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS C
ON         MT.EVENT_ACTVTY_CD = C.EVENT_ACTVTY_CD    
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_T1 INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_T1 INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 07: COLLECT BALANCES AND STATUSES*/

DELETE FROM CC_COBRA.WK_CC_EVENTS_T2 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CHECK TO SEE IF WE CAN USE DATA FROM C01J15*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIP01;

/*INSERT PURGED RECORDS - NO CURRENT PURGED AT THE MOMENT*/

INSERT INTO CC_COBRA.WK_CC_EVENTS_T2
SELECT 
CCA.AGRMNT_ID
,DT.REPORT_DT 
,CASE WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT  THEN 'P'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(CCA.PURGED_DT,ASS.SOURCE_START_DT)
,COALESCE(ADP.INT_STATUS,' ')
,COALESCE(ADP.ACCONT_BALANC_AM,0)
,COALESCE(ADP.ACCONT_BALANC_AM,0)
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
JOIN CC_COBRA.WK_CC_EVENTS_DATE_CONTROL DT
ON  CCA.ADDED_DT <= DT.REPORT_DT
AND  DT.REPORT_DT = CCA.PURGED_DT 
JOIN (SELECT AGRMNT_ID, REPORT_DT FROM CC_COBRA.WK_CC_EVENTS_T1 GROUP BY 1,2) T1
ON   CCA.AGRMNT_ID = T1.AGRMNT_ID
AND  DT.REPORT_DT = T1.REPORT_DT
LEFT JOIN CC_COBRA.CC_ACCOUNT_DAILY ADP
ON   CCA.AGRMNT_ID = ADP.AGRMNT_ID
AND  DT.PRIOR_REPORT_DT = ADP.REPORT_DT
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   CCA.AGRMNT_ID = ASS.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


INSERT INTO CC_COBRA.WK_CC_EVENTS_T2
SELECT 
CCA.AGRMNT_ID
,DT.REPORT_DT 
,CASE WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT  THEN 'P'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(CCA.PURGED_DT,ASS.SOURCE_START_DT)
,COALESCE(ADP.INT_STATUS,' ')
,COALESCE(ADP.ACCONT_BALANC_AM,0)
,COALESCE(AD.ACCONT_BALANC_AM,0)
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
JOIN CC_COBRA.WK_CC_EVENTS_DATE_CONTROL DT
ON  CCA.ADDED_DT <= DT.REPORT_DT
AND  (CCA.PURGED_DT IS NULL OR DT.REPORT_DT < CCA.PURGED_DT) --NOT 100% SURE IF THIS SHOULD BE <= OR < but currently there are no purges happening at the account level
JOIN (SELECT AGRMNT_ID, REPORT_DT FROM CC_COBRA.WK_CC_EVENTS_T1 GROUP BY 1,2) T1
ON   CCA.AGRMNT_ID = T1.AGRMNT_ID
AND  DT.REPORT_DT = T1.REPORT_DT
JOIN CC_COBRA.CC_ACCOUNT_DAILY AD
ON   CCA.AGRMNT_ID = AD.AGRMNT_ID
AND  DT.REPORT_DT = AD.REPORT_DT
LEFT JOIN CC_COBRA.CC_ACCOUNT_DAILY ADP
ON   CCA.AGRMNT_ID = ADP.AGRMNT_ID
AND  DT.PRIOR_REPORT_DT = ADP.REPORT_DT
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   CCA.AGRMNT_ID = ASS.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIP02;

.LABEL SKIP01;

/*IF DATA FROM C01J15 IS NOT AVAILABLE USE OLD CODE*/

INSERT INTO CC_COBRA.WK_CC_EVENTS_T2
SELECT 
CCA.AGRMNT_ID
,DT.REPORT_DT 
,CASE WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT  THEN 'P'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(CCA.PURGED_DT,ASS.SOURCE_START_DT)
,COALESCE(ASS2.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(BALP.BL_SUMMRY_AM,' ') AS OPENING_BAL
,COALESCE(BAL.BL_SUMMRY_AM,' ') AS CLOSING_BAL
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
JOIN CC_COBRA.WK_CC_EVENTS_DATE_CONTROL DT
ON  CCA.ADDED_DT <= DT.REPORT_DT
AND  (CCA.PURGED_DT IS NULL OR DT.REPORT_DT <= CCA.PURGED_DT) --NOT 100% SURE IF THIS SHOULD BE <= OR <
JOIN (SELECT AGRMNT_ID, REPORT_DT FROM CC_COBRA.WK_CC_EVENTS_T1 GROUP BY 1,2) T1
ON   CCA.AGRMNT_ID = T1.AGRMNT_ID
AND  DT.REPORT_DT = T1.REPORT_DT
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   CCA.AGRMNT_ID = ASS.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS2
ON   CCA.AGRMNT_ID = ASS2.AGRMNT_ID
AND  DT.REPORT_DT-1 BETWEEN ASS2.SOURCE_START_DT AND ASS2.SOURCE_END_DT-1
AND  ASS2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BAL
ON    CCA.AGRMNT_ID = BAL.AGRMNT_ID
AND   BAL.BL_SUMMRY_AM_CD = '00500003'
AND   DT.REPORT_DT BETWEEN BAL.SOURCE_START_DT AND BAL.SOURCE_END_DT-1
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BALP
ON    CCA.AGRMNT_ID = BALP.AGRMNT_ID
AND   BALP.BL_SUMMRY_AM_CD = '00500003'
AND   DT.REPORT_DT-1 BETWEEN BALP.SOURCE_START_DT AND BALP.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIP02;

COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_T2 INDEX (AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 08: DELETE TXNS NOT VALID FOR BALANCE*/

DELETE FROM CC_COBRA.WK_CC_EVENTS_T1
WHERE EVENT_ID IN (
SELECT EVENT_ID
FROM CC_COBRA.WK_CC_EVENTS_T1 T1
JOIN 
(
SELECT *
FROM   CC_COBRA.WK_CC_EVENTS_T2 
WHERE  INT_STATUS = 'Z'
) A
ON T1.AGRMNT_ID = A.AGRMNT_ID
AND T1.REPORT_DT = A.REPORT_DT
AND T1.TRNSCN_DERVTN_GRP NOT IN ('CHARGE-OFF','ADJUSTMENT')
JOIN
(
SELECT AGRMNT_ID, REPORT_DT, SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CHARGE-OFF' THEN EVENT_AM ELSE 0 END) AS TOTAL_CO
FROM CC_COBRA.WK_CC_EVENTS_T1
GROUP BY 1,2 
HAVING SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CHARGE-OFF' THEN EVENT_AM ELSE 0 END) = 0
) B
ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.REPORT_DT = B.REPORT_DT
)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 09: DELETE TXNS NOT VALID FOR BALANCE*/

DELETE FROM CC_COBRA.WK_CC_EVENTS_T1
WHERE EVENT_ID IN (

SELECT EVENT_ID
FROM CC_COBRA.WK_CC_EVENTS_T1 T1
JOIN 
(
SELECT T2.*
FROM   CC_COBRA.WK_CC_EVENTS_T2 T2
JOIN   CC_COBRA.CC_AGREEMENT_ADDED_DATE AD
ON     T2.AGRMNT_ID = AD.AGRMNT_ID
WHERE  (CASE WHEN PRIOR_INT_STATUS = 'Z' THEN 0 ELSE OPENNG_BL END)-
       (CASE WHEN INT_STATUS = 'Z' THEN 0 ELSE CLOSNG_BL END)=0
AND    AD.ADDED_DT < T2.REPORT_DT --NOT JUST ADDED ON V+ - THE CASE OF TRADES
) A
ON T1.AGRMNT_ID = A.AGRMNT_ID
AND T1.REPORT_DT = A.REPORT_DT
AND T1.TRNSCN_DERVTN_GRP = 'ADJUSTMENT'
JOIN
(
SELECT AGRMNT_ID, REPORT_DT, SUM(EVENT_AM) AS TOTAL_TXN
FROM CC_COBRA.WK_CC_EVENTS_T1
GROUP BY 1,2 
HAVING SUM(EVENT_AM) <> 0
) B
ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.REPORT_DT = B.REPORT_DT
)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_T1 INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_T1 INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 09B: DELETE TXNS RELATED TO NEW PURGED ACCOUNTS (INT_STATUS = 9)*/

DELETE FROM CC_COBRA.WK_CC_EVENTS_T1
WHERE EVENT_ID IN (

SELECT EVENT_ID
FROM CC_COBRA.WK_CC_EVENTS_T1 T1
JOIN 
(
SELECT T2.*
FROM   CC_COBRA.WK_CC_EVENTS_T2 T2
JOIN   CC_COBRA.CC_AGREEMENT_ADDED_DATE AD
ON     T2.AGRMNT_ID = AD.AGRMNT_ID
WHERE  (CASE WHEN PRIOR_INT_STATUS = 'Z' THEN 0 ELSE OPENNG_BL END)-
       (CASE WHEN INT_STATUS = 'Z' THEN 0 ELSE CLOSNG_BL END)=0
AND    AD.ADDED_DT < T2.REPORT_DT --NOT JUST ADDED ON V+ - THE CASE OF TRADES
AND    INT_STATUS = '9'
) A
ON T1.AGRMNT_ID = A.AGRMNT_ID
AND T1.REPORT_DT = A.REPORT_DT
JOIN
(
SELECT AGRMNT_ID, REPORT_DT, SUM(EVENT_AM) AS TOTAL_TXN
FROM CC_COBRA.WK_CC_EVENTS_T1
GROUP BY 1,2 
HAVING SUM(EVENT_AM) <> 0
) B
ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.REPORT_DT = B.REPORT_DT
)
;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_T1 INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_CC_EVENTS_T1 INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 10: COLLECT EVENT_IDS TO EXCLUDE*/

/*
CREATE SET TABLE CC_COBRA.CC_EVENTS_TO_EXCLUDE ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      EVENT_ACTVTY_CD CHAR(8) CHARACTER SET LATIN NOT CASESPECIFIC,
      EVENT_AM DECIMAL(15,2),
      EVENT_ID BIGINT,
      SOURCE_START_DT DATE FORMAT 'YYYY-MM-DD',
      TXN_DELETE_IND BYTEINT)
UNIQUE PRIMARY INDEX ( EVENT_ID )
INDEX ( AGRMNT_ID );
*/

DELETE FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE WHERE SOURCE_START_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_CC_EVENTS_DATE_CONTROL); 

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO  CC_COBRA.CC_EVENTS_TO_EXCLUDE
SELECT     MT.AGRMNT_ID
          ,MT.EVENT_ACTVTY_CD
          ,MT.EVENT_AM
          ,MT.EVENT_ID  
          ,MT.SOURCE_START_DT
          ,NULL

FROM       GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST MT
INNER JOIN CC_COBRA.WK_CC_EVENTS_DATE_CONTROL DC
ON         MT.SOURCE_START_DT = DC.REPORT_DT
WHERE NOT EXISTS (SELECT NULL
                  FROM CC_COBRA.WK_CC_EVENTS_T1 B
                  WHERE MT.EVENT_ID = B.EVENT_ID);
                 
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


COLLECT STATS ON CC_COBRA.CC_EVENTS_TO_EXCLUDE INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_EVENTS_TO_EXCLUDE INDEX(EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_CC_EVENTS_T1 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
DELETE FROM CC_COBRA.WK_CC_EVENTS_T2 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 11: DELETE TXNS FROM CC_COBRA.CC_MONETARY_TRANSACTION_TODAY WHERE EVENT_ID EXIST IN CC_COBRA.CC_EVENTS_TO_EXCLUDE*/

DELETE FROM CC_COBRA.CC_MONETARY_TRANSACTION_TODAY
WHERE EXISTS (SELECT NULL
                  FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE B
                  WHERE CC_COBRA.CC_MONETARY_TRANSACTION_TODAY.EVENT_ID = B.EVENT_ID);
                  
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
                  
COLLECT STATS ON CC_COBRA.CC_MONETARY_TRANSACTION_TODAY INDEX ( AGRMNT_ID );
COLLECT STATS ON CC_COBRA.CC_MONETARY_TRANSACTION_TODAY INDEX ( EVENT_ID );
COLLECT STATS ON CC_COBRA.CC_MONETARY_TRANSACTION_TODAY COLUMN PARTITION;     

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;      

/*STEP 12: PUT EXCLUDED TXNS FROM THE CC_COBRA.CC_EVENT_FEATURE_ID TABLE INTO THE EXCLUDED TABLE AND REMOVE FROM MAIN TABLE*/

INSERT INTO CC_COBRA.CC_EXCL_L2PT_L2GT_TXNS
SELECT 
EVENT_ID
,NULL
,NULL
,NULL
,NULL
,NULL
,NULL
,NULL
,PLAN_NO
,PLAN_SEQ
,NULL
,NULL
,NULL
FROM  CC_COBRA.CC_EVENT_FEATURE_ID A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE E
WHERE A.EVENT_ID = E.EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;     

DELETE FROM CC_COBRA.CC_EVENT_FEATURE_ID A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE E
WHERE A.EVENT_ID = E.EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;  


/*UPDATE THE LOAD LOG TO THE CURRENT DATE TO INDICATE SUCCESSFUL PROCESSING*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'C01J04'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT  
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J04';

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'C01J04'
;

.QUIT 0;