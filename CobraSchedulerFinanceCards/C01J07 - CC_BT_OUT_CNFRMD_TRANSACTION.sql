/************************************************************************/
/*JOB:      C01J07 - CC_BT_OUT_CNFRMD_TRANSACTION                       */
/*VERSION:  C01J07v03 - change to gdw_views.cc_mon_txn_hist.sql         */
/*DATE VERSION IMPLEMENTED: 2017-01-02                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/*C01J04                                                                */
/*C01J05                                                                */
/*C01J06                                                                */
/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 02: INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 03: INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 04: INITIAL CHECKS TO SEE IF CC_EVENTS_TO_EXCLUDE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 05: INITIAL CHECKS TO SEE IF CC_FASTER_PAY_TRANSACTION IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J05';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 06: INITIAL CHECKS TO SEE IF CC_BT_OUT_TRANSACTION IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J06';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 07: INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J07';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'C01J07'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 08: DATE CONTROL FOR PROCESSING*/

DELETE FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL  ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CAN ONLY PROCESS ONE DAY AT A TIME - SO USE THE DATE CONTROL DATE FROM JOB 4 TO WORK OUT THE EARLIEST DATE TO PROCESS*/
INSERT INTO CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL 
SELECT CASE 
	   /*SET PROCESS DATE TO BE THE NEXT DATE FROM THE LOG DATE (THIS DEALS WITH BANK HOLIDAYS*/
       WHEN MAX_SSD < L.CURRENT_BUS_DT THEN 
 			(CASE WHEN ((L.CURRENT_BUS_DT-DATE '0001-01-05') MOD 7) > 2 THEN L.CURRENT_BUS_DT+1 
                  WHEN ((L.CURRENT_BUS_DT-DATE '0001-01-05') MOD 7) = 0 THEN L.CURRENT_BUS_DT+3 ELSE NULL END)      
       WHEN MAX_SSD < B.SOURCE_START_DT THEN 
			(CASE WHEN ((MAX_SSD-DATE '0001-01-05') MOD 7) > 2 THEN MAX_SSD+1 
                  WHEN ((MAX_SSD-DATE '0001-01-05') MOD 7) = 0 THEN MAX_SSD+3 ELSE NULL END)
       ELSE B.SOURCE_START_DT
       END 

FROM 
(SELECT MAX(CC_MON_TXN_SOURCE_START_DT) AS MAX_SSD
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION) A
JOIN CC_COBRA.CC_COBRA_LOAD_LOG L
ON   L.GRID_LOAD_ID = 'C01J07'
CROSS JOIN CC_COBRA.CC_COBRA_LOAD_START_DT B
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;


COLLECT STATS ON CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL ;

/*STEP 09: CLEAR OUT TXNS FOR CURRENT DAY PROCESSING AND ANY FORWARD DATE IN CASE OF REPROCESSING - THIS JOB MUST BE RUN SEQUENTIALLY IN CASE OF RERUNS*/

DELETE FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION 
WHERE CC_MON_TXN_SOURCE_START_DT >= (SELECT REPORT_DT FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(CC_MON_TXN_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(BACS_FP_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 10: REPOPULATE ANY BTS OUT THAT HAVE BEEN UNMATCHED INTO WORK TABLE*/


DELETE FROM CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION
SELECT A.EVENT_ID AS BACS_FP_EVENT_ID
      ,A.AGRMNT_ID
      ,B.ORIGNL_AGRMNT_ID
      ,A.EVENT_AM
      ,A.EVENT_START_DT AS BACS_FP_EVENT_START_DT
      ,A.SOURCE_START_DT AS BACS_FP_SOURCE_START_DT
      ,RANK () OVER (PARTITION BY A.AGRMNT_ID, A.EVENT_AM ORDER BY A.SOURCE_START_DT, A.EVENT_ID) AS AGRMNT_ID_SEQ_NO
      ,RANK () OVER (PARTITION BY B.ORIGNL_AGRMNT_ID, A.EVENT_AM ORDER BY A.AGRMNT_ID, A.SOURCE_START_DT, A.EVENT_ID) AS ORIGNL_AGRMNT_ID_SEQ_NO
      
FROM       CC_COBRA.CC_BT_OUT_TRANSACTION A
INNER JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE B
ON         A.AGRMNT_ID = B.AGRMNT_ID
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION C
WHERE A.EVENT_ID = C.BACS_FP_EVENT_ID)
AND BACS_FP_SOURCE_START_DT <= (SELECT REPORT_DT FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL)
AND BACS_FP_SOURCE_START_DT >= (SELECT REPORT_DT-60 FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL) --LIMIT TO LAST 60 DAYS
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION INDEX(BACS_FP_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION COLUMN(BACS_FP_SOURCE_START_DT);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 11: COLLECT PAYMENT TRANSACTIONS FROM CC_MONETARY_TRANSACTION_HIST*/

/*NOTE USE REGULAR TABLE WHEN BACKLOADING - SEE NEXT STEP */

DELETE FROM CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS
SELECT    MT.AGRMNT_ID
          ,AAD.ORIGNL_AGRMNT_ID
          ,MT.EVENT_ACTVTY_CD
          ,C.TRNSCN_DERVTN_GRP
          ,MT.EVENT_AM
          ,MT.EVENT_ID
          ,MT.SOURCE_START_DT AS CC_MON_TXN_SOURCE_START_DT
          ,RANK () OVER (PARTITION BY MT.AGRMNT_ID, MT.SOURCE_START_DT, MT.EVENT_AM ORDER BY MT.EVENT_START_DT, MT.EVENT_ID)
          ,RANK () OVER (PARTITION BY AAD.ORIGNL_AGRMNT_ID, MT.SOURCE_START_DT, MT.EVENT_AM ORDER BY MT.AGRMNT_ID,MT.EVENT_START_DT,MT.EVENT_ID)
    
FROM       CC_COBRA.CC_MONETARY_TRANSACTION_TODAY MT
INNER JOIN CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL DC
ON         MT.SOURCE_START_DT = DC.REPORT_DT
INNER JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE AAD
ON         MT.AGRMNT_ID = AAD.AGRMNT_ID
INNER JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS C
ON         MT.EVENT_ACTVTY_CD = C.EVENT_ACTVTY_CD   
AND        C.TRNSCN_DERVTN_GRP = 'PAYMENT'
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPFULLTXN;

/*USE REGULAR TABLE IF TODAY TABLE IS NOT POPULATED*/

INSERT INTO CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS
SELECT    MT.AGRMNT_ID
          ,AAD.ORIGNL_AGRMNT_ID
          ,MT.EVENT_ACTVTY_CD
          ,C.TRNSCN_DERVTN_GRP
          ,MT.EVENT_AM
          ,MT.EVENT_ID
          ,MT.SOURCE_START_DT AS CC_MON_TXN_SOURCE_START_DT
          ,RANK () OVER (PARTITION BY MT.AGRMNT_ID, MT.SOURCE_START_DT, MT.EVENT_AM ORDER BY MT.EVENT_ID)
          ,RANK () OVER (PARTITION BY AAD.ORIGNL_AGRMNT_ID, MT.SOURCE_START_DT, MT.EVENT_AM ORDER BY MT.AGRMNT_ID,MT.EVENT_ID)

FROM       GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST MT
INNER JOIN CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL DC
ON         MT.SOURCE_START_DT = DC.REPORT_DT
AND NOT EXISTS (SELECT NULL
                FROM   CC_COBRA.CC_EVENTS_TO_EXCLUDE E
                WHERE  MT.EVENT_ID = E.EVENT_ID)   
INNER JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE AAD
ON         MT.AGRMNT_ID = AAD.AGRMNT_ID
            
INNER JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS C
ON         MT.EVENT_ACTVTY_CD = C.EVENT_ACTVTY_CD   
AND        C.TRNSCN_DERVTN_GRP = 'PAYMENT'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


.LABEL SKIPFULLTXN;


COLLECT STATS ON CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS INDEX(CC_MON_TXN_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS COLUMN(ORIGNL_AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 12: 1st Match Step: MATCH ON AGRMNT_ID AMT AND DATE*/

INSERT INTO CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION 
      (
      CC_MON_TXN_EVENT_ID
      ,AGRMNT_ID
      ,EVENT_AM 
      ,CC_MON_TXN_SOURCE_START_DT
      ,CC_MON_TXN_SEQ_NO 
      ,BACS_FP_EVENT_ID
      ,BACS_FP_EVENT_START_DT 
      ,BACS_FP_SOURCE_START_DT 
      ,BACS_FP_SEQ_NO
      ,BACS_FP_ORIGNL_SEQ_NO
      )
SELECT B.CC_MON_TXN_EVENT_ID 
      ,B.AGRMNT_ID
      ,B.EVENT_AM
      ,B.CC_MON_TXN_SOURCE_START_DT 
      ,B.AGRMNT_ID_SEQ_NO
      ,A.BACS_FP_EVENT_ID 
      ,A.BACS_FP_EVENT_START_DT
      ,A.BACS_FP_SOURCE_START_DT 
      ,A.AGRMNT_ID_SEQ_NO
      ,A.ORIGNL_AGRMNT_ID_SEQ_NO
      
FROM CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A
JOIN CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS B

ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.BACS_FP_SOURCE_START_DT = B.CC_MON_TXN_SOURCE_START_DT
AND  A.EVENT_AM = B.EVENT_AM
AND  A.AGRMNT_ID_SEQ_NO = B.AGRMNT_ID_SEQ_NO;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(CC_MON_TXN_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(BACS_FP_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE MATCHED RECORDS FROM WORK BT OUT TABLE (UNCONFIRMED BTS)*/

DELETE FROM CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.BACS_FP_EVENT_ID = B.BACS_FP_EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE MATCHED RECORDS FROM WORK TXN TABLE */

DELETE FROM CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.CC_MON_TXN_EVENT_ID = B.CC_MON_TXN_EVENT_ID
AND B.CC_MON_TXN_SOURCE_START_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL));

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 13: 2nd Match Step: MATCH ON ORIGNL_AGRMNT_ID AMT AND DATE*/

INSERT INTO CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION 
      (
      CC_MON_TXN_EVENT_ID
      ,AGRMNT_ID
      ,EVENT_AM 
      ,CC_MON_TXN_SOURCE_START_DT
      ,CC_MON_TXN_SEQ_NO 
      ,BACS_FP_EVENT_ID
      ,BACS_FP_EVENT_START_DT 
      ,BACS_FP_SOURCE_START_DT 
      ,BACS_FP_SEQ_NO
      ,BACS_FP_ORIGNL_SEQ_NO
      )
SELECT B.CC_MON_TXN_EVENT_ID
      ,B.AGRMNT_ID
      ,B.EVENT_AM
      ,B.CC_MON_TXN_SOURCE_START_DT 
      ,B.AGRMNT_ID_SEQ_NO
      ,A.BACS_FP_EVENT_ID 
      ,A.BACS_FP_EVENT_START_DT
      ,A.BACS_FP_SOURCE_START_DT 
      ,A.AGRMNT_ID_SEQ_NO
      ,A.ORIGNL_AGRMNT_ID_SEQ_NO
FROM  CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A
JOIN  CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS B
ON    A.ORIGNL_AGRMNT_ID = B.ORIGNL_AGRMNT_ID
AND   A.BACS_FP_SOURCE_START_DT = B.CC_MON_TXN_SOURCE_START_DT
AND   A.EVENT_AM = B.EVENT_AM
AND   A.ORIGNL_AGRMNT_ID_SEQ_NO = B.ORIGNL_AGRMNT_ID_SEQ_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(CC_MON_TXN_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(BACS_FP_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE MATCHED RECORDS FROM WORK BT OUT TABLE (UNCONFIRMED BTS)*/

DELETE FROM CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.BACS_FP_EVENT_ID = B.BACS_FP_EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE MATCHED RECORDS FROM WORK TXN TABLE */

DELETE FROM CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.CC_MON_TXN_EVENT_ID = B.CC_MON_TXN_EVENT_ID
AND B.CC_MON_TXN_SOURCE_START_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL));

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 14: 3rd Match Step: MATCH ON AGRMNT_ID AMT AND DATE RANGE*/

INSERT INTO CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION 
      (
      CC_MON_TXN_EVENT_ID
      ,AGRMNT_ID
      ,EVENT_AM 
      ,CC_MON_TXN_SOURCE_START_DT
      ,CC_MON_TXN_SEQ_NO 
      ,BACS_FP_EVENT_ID
      ,BACS_FP_EVENT_START_DT 
      ,BACS_FP_SOURCE_START_DT 
      ,BACS_FP_SEQ_NO
      ,BACS_FP_ORIGNL_SEQ_NO
      )
SELECT B.CC_MON_TXN_EVENT_ID
      ,B.AGRMNT_ID
      ,B.EVENT_AM
      ,B.CC_MON_TXN_SOURCE_START_DT 
      ,B.AGRMNT_ID_SEQ_NO
      ,A.BACS_FP_EVENT_ID 
      ,A.BACS_FP_EVENT_START_DT
      ,A.BACS_FP_SOURCE_START_DT 
      ,A.AGRMNT_ID_SEQ_NO
      ,A.ORIGNL_AGRMNT_ID_SEQ_NO
FROM  CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A
JOIN  CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS B
ON    A.AGRMNT_ID = B.AGRMNT_ID
AND  B.CC_MON_TXN_SOURCE_START_DT BETWEEN A.BACS_FP_SOURCE_START_DT AND A.BACS_FP_SOURCE_START_DT+7
AND   A.EVENT_AM = B.EVENT_AM
AND   A.AGRMNT_ID_SEQ_NO = B.AGRMNT_ID_SEQ_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(CC_MON_TXN_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(BACS_FP_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CHECK FOR DUPLICATED EVENT_IDS - AND DELETE*/

DELETE 
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION BOC
WHERE EXISTS (
SELECT NULL
FROM 
(SELECT AGRMNT_ID
       ,CC_MON_TXN_EVENT_ID
       ,MIN(BACS_FP_SOURCE_START_DT) AS MIN_BF_SSD
       ,COUNT(*) AS VOL
 FROM   CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION
 GROUP BY 1,2
 HAVING COUNT(*) > 1) A
WHERE BOC.AGRMNT_ID = A.AGRMNT_ID
AND   BOC.CC_MON_TXN_EVENT_ID = A.CC_MON_TXN_EVENT_ID
AND   BOC.BACS_FP_SOURCE_START_DT <> A.MIN_BF_SSD)
;
 
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE MATCHED RECORDS FROM WORK BT OUT TABLE (UNCONFIRMED BTS)*/

DELETE FROM CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.BACS_FP_EVENT_ID = B.BACS_FP_EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE MATCHED RECORDS FROM WORK TXN TABLE */

DELETE FROM CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.CC_MON_TXN_EVENT_ID = B.CC_MON_TXN_EVENT_ID
AND B.CC_MON_TXN_SOURCE_START_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL));

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 15: 4th Match Step: MATCH ON ORIGNL_AGRMNT_ID AMT AND DATE RANGE*/


INSERT INTO CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION 
      (
      CC_MON_TXN_EVENT_ID
      ,AGRMNT_ID
      ,EVENT_AM 
      ,CC_MON_TXN_SOURCE_START_DT
      ,CC_MON_TXN_SEQ_NO 
      ,BACS_FP_EVENT_ID
      ,BACS_FP_EVENT_START_DT 
      ,BACS_FP_SOURCE_START_DT 
      ,BACS_FP_SEQ_NO
      ,BACS_FP_ORIGNL_SEQ_NO
      )
SELECT B.CC_MON_TXN_EVENT_ID
      ,B.AGRMNT_ID
      ,B.EVENT_AM
      ,B.CC_MON_TXN_SOURCE_START_DT 
      ,B.AGRMNT_ID_SEQ_NO
      ,A.BACS_FP_EVENT_ID 
      ,A.BACS_FP_EVENT_START_DT
      ,A.BACS_FP_SOURCE_START_DT 
      ,A.AGRMNT_ID_SEQ_NO
      ,A.ORIGNL_AGRMNT_ID_SEQ_NO
FROM  CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A
JOIN  CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS B
ON    A.ORIGNL_AGRMNT_ID = B.ORIGNL_AGRMNT_ID
AND  B.CC_MON_TXN_SOURCE_START_DT BETWEEN A.BACS_FP_SOURCE_START_DT AND A.BACS_FP_SOURCE_START_DT+7
AND   A.EVENT_AM = B.EVENT_AM
AND   A.ORIGNL_AGRMNT_ID_SEQ_NO = B.ORIGNL_AGRMNT_ID_SEQ_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(CC_MON_TXN_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(BACS_FP_EVENT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*CHECK FOR DUPLICATED EVENT_IDS - AND DELETE*/

DELETE 
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION BOC
WHERE EXISTS (
SELECT NULL
FROM 
(SELECT AGRMNT_ID
       ,CC_MON_TXN_EVENT_ID
       ,MIN(BACS_FP_SOURCE_START_DT) AS MIN_BF_SSD
       ,COUNT(*) AS VOL
 FROM   CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION
 GROUP BY 1,2
 HAVING COUNT(*) > 1) A
WHERE BOC.AGRMNT_ID = A.AGRMNT_ID
AND   BOC.CC_MON_TXN_EVENT_ID = A.CC_MON_TXN_EVENT_ID
AND   BOC.BACS_FP_SOURCE_START_DT <> A.MIN_BF_SSD)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
 

/*DELETE MATCHED RECORDS FROM WORK BT OUT TABLE (UNCONFIRMED BTS)*/

DELETE FROM CC_COBRA.WK_BT_OUT_UNCNFD_TRANSACTION A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.BACS_FP_EVENT_ID = B.BACS_FP_EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*DELETE MATCHED RECORDS FROM WORK TXN TABLE */

DELETE FROM CC_COBRA.WK_BT_OUT_CNFRMD_MSTXNS A WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION B
WHERE A.CC_MON_TXN_EVENT_ID = B.CC_MON_TXN_EVENT_ID
AND B.CC_MON_TXN_SOURCE_START_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL));

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CHECK FOR DUPLICATES*/

SELECT CC_MON_TXN_EVENT_ID FROM CC_COBRA.CC_BT_OUT_CNFRMD_TRANSACTION GROUP BY 1 HAVING COUNT(*) > 1;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT REPORT_DT+1 FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL)
   , CURRENT_BUS_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_BT_OUT_CNFRMD_DATE_CONTROL)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'C01J07'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT  
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J07';

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'C01J07'
;

.QUIT 0;


