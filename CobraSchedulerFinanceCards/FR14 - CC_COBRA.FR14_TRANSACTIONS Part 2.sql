/************************************************************************/
/*JOB:      FR14 - Part 2 CC_COBRA.FR14_TRANSACTIONS                    */
/*          PAYMENTS AND CHARGE OFFS BY PLAN NO                         */
/*VERSION:  FR14 Part 2v14 - MT BT Correction.sql                           */
/*DATE VERSION IMPLEMENTED: 2018-09-20                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/*C01J04                                                                */
/*C01J07                                                                */
/*FR09                                                                  */
/*C01J11                                                                */
/************************************************************************/
/*PART 2*/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF CC_EVENTS_TO_EXCLUDE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF CC_BT_OUT_CNFRMD_TRANSACTION IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J07';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF FR09 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR09';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF C01J11 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J11';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF C01J11 IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_REF_DATA_LIVE_SYNC
WHERE TABLE_NM = 'STEP 06: CC_COBRA.CC_PLAN_LOOKUP FULL'
AND SYNC_IN = 'Y'
;
.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;




/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR14';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;


/*PART 2 START - MAKE SURE THAT PART 1 RAN OK AND IS FOR THE CORRECT PROCESSING DATE*/

/*RESET TO 'P' WHERE NECESSARY*/

UPDATE CC_COBRA.CC_WK_FR14_RUN_STATUS 
SET STATUS = 'P'
WHERE STATUS = '2' 
AND   STATUS_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)
;

UPDATE CC_COBRA.CC_WK_FR14_RUN_STATUS 
SET STATUS = '2'
WHERE STATUS = 'P' --MAKE SURE THE PRIOR PART 1 JOB RAN OK
AND   STATUS_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;

/*SECTION 5 CONTINUED....*/

/*STEP 11: STORE PLAN BALANCE FOR DAILY AVERAGES*/

/*CLEAR OUT CURRENT PROCESSING DAY*/

DELETE FROM CC_COBRA.FR14_PLAN_BALANCE_STATUS WHERE REPORT_DT = (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_PLAN_BALANCE_STATUS
SELECT 
       B.ORG_TX
      ,A.AGRMNT_ID
      ,A.PLAN_NO
      ,PL.BW_PLAN_TYPE_CD
      ,A.REPORT_DT
      ,CASE WHEN B.INT_STATUS <> 'Z' THEN A.CLOSNG_BL ELSE 0 END
      ,B.STATUS
FROM   CC_COBRA.WK_FR14_PLAN_BALANCE_T1 A
JOIN   CC_COBRA.WK_FR14_BALANCE B
ON     A.AGRMNT_ID = B.AGRMNT_ID
JOIN   CC_COBRA.CC_PLAN_LOOKUP PL
ON     B.ORG_TX = PL.ORG_TX
AND    A.PLAN_NO = PL.PLAN_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS COLUMN(PLAN_NO);

/*STEP 12: CHECK TO SEE IF THE PRIOR WORKING DAY EXISTS IF NOT POPULATE - REMOVE IF RUNNING MANUALLY*/

/*STEP 12A: CHECK TO SEE IF THE PRIOR WORKING DAY IS 25TH DEC - IF IT IS WE DON'T WANT THIS TO RUN, BUT WE WANT THE 25TH TO BE POPULATED WITH 24TH DATA AND THE TXN TABLE TO BE FILLED */

SELECT PRIOR_REPORT_DT
FROM CC_COBRA.WK_FR14_DATE_CONTROL
WHERE
( EXTRACT(MONTH FROM PRIOR_REPORT_DT) = 12
AND EXTRACT(DAY FROM PRIOR_REPORT_DT) = 25 )
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO STCLAUS;

/*STEP 12B: CHECK TO SEE IF THE PRIOR WORKING DAY EXISTS */

SELECT TOP 1 * 
FROM CC_COBRA.FR14_PLAN_BALANCE_STATUS
WHERE REPORT_DT = (
SELECT PRIOR_REPORT_DT
FROM CC_COBRA.WK_FR14_DATE_CONTROL
)
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPPD;

/*STEP 12C:  POPULATE TABLE TO HOLD PREVIOUS WORKING DAY THIS WILL BE SKIPPED IF ALREADY THERE*/

/*GET BALANCE FOR PREVIOUS WORKING DAY*/

DELETE FROM CC_COBRA.WK_FR14_BALANCE_PWD ALL;

INSERT INTO CC_COBRA.WK_FR14_BALANCE_PWD
SELECT 
CCA.ORG_TX
,CCA.AGRMNT_ID
,DT.PRIOR_REPORT_DT 
,CASE WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN AGR.AGRMNT_EXPIRY_DT <= DT.REPORT_DT  THEN 'P'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(AGR.AGRMNT_EXPIRY_DT,ASS.SOURCE_START_DT)
,COALESCE(ASS2.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(BALP.BL_SUMMRY_AM,' ') AS OPENING_BAL
,COALESCE(BAL.BL_SUMMRY_AM,' ') AS CLOSING_BAL
FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
CROSS JOIN CC_COBRA.WK_FR14_DATE_CONTROL DT
JOIN GDW_VIEWSX.AGREEMENT AGR
ON   CCA.AGRMNT_ID = AGR.AGRMNT_ID
AND  AGR.SOURCE_END_DT = '3500/12/31'
AND  ADDED_DT <= DT.PRIOR_REPORT_DT
AND  (AGR.AGRMNT_EXPIRY_DT IS NULL OR DT.PRIOR_REPORT_DT <=AGR.AGRMNT_EXPIRY_DT)
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   AGR.AGRMNT_ID = ASS.AGRMNT_ID
AND  DT.PRIOR_REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS2
ON   AGR.AGRMNT_ID = ASS2.AGRMNT_ID
AND  DT.PRIOR_REPORT_DT-1 BETWEEN ASS2.SOURCE_START_DT AND ASS2.SOURCE_END_DT-1
AND  ASS2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BAL
ON    AGR.AGRMNT_ID = BAL.AGRMNT_ID
AND   BAL.BL_SUMMRY_AM_CD = '00500003'
AND   DT.PRIOR_REPORT_DT BETWEEN BAL.SOURCE_START_DT AND BAL.SOURCE_END_DT-1
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BALP
ON    AGR.AGRMNT_ID = BALP.AGRMNT_ID
AND   BALP.BL_SUMMRY_AM_CD = '00500003'
AND   DT.PRIOR_REPORT_DT-1 BETWEEN BALP.SOURCE_START_DT AND BALP.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_BALANCE_PWD INDEX (AGRMNT_ID);


/*STEP 12D: GET FEATURES*/

DELETE FROM CC_COBRA.WK_FR14_FEATURES_PWD ALL;

INSERT INTO CC_COBRA.WK_FR14_FEATURES_PWD
SELECT     A.ORG_TX    
          ,A.AGRMNT_ID
          ,AF.FEATUR_ID
          ,AFF.AGRMNT_FEATUR_FEATUR_NO
          ,AFF2.AGRMNT_FEATUR_FEATUR_NO
          ,A.REPORT_DT
          ,AF.EXPIRY_DT
          ,A.STATUS
FROM       CC_COBRA.WK_FR14_BALANCE_PWD A
INNER JOIN GDW_VIEWSX.AGREEMENT_FEATURE AF
ON         A.AGRMNT_ID = AF.AGRMNT_ID
AND        A.REPORT_DT BETWEEN AF.SOURCE_START_DT AND AF.SOURCE_END_DT-1
AND        (AF.EXPIRY_DT IS NULL OR AF.EXPIRY_DT >= A.REPORT_DT)
AND        (A.STATUS <> 'P'
           OR (A.STATUS = 'P' AND INT_STATUS_DT = A.REPORT_DT))
INNER JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF
ON         AF.AGRMNT_ID = AFF.AGRMNT_ID
AND        AF.FEATUR_ID = AFF.FEATUR_ID
AND        AFF.RELATD_FEATUR_ID = 5018
AND        A.REPORT_DT BETWEEN AFF.SOURCE_START_DT AND AFF.SOURCE_END_DT-1
LEFT JOIN GDW_VIEWSX.AGREEMENT_FEATURE_FEATURE AFF2
ON         AF.AGRMNT_ID = AFF2.AGRMNT_ID
AND        AF.FEATUR_ID = AFF2.FEATUR_ID
AND        AFF2.RELATD_FEATUR_ID = 5018
AND        A.REPORT_DT-1 BETWEEN AFF2.SOURCE_START_DT AND AFF2.SOURCE_END_DT-1
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_FEATURES_PWD INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR14_FEATURES_PWD INDEX(FEATUR_ID);
COLLECT STATS ON CC_COBRA.WK_FR14_FEATURES_PWD COLUMN(REPORT_DT);


/*STEP 12E: GET PLAN BALANCE*/

DELETE FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1_PWD ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR14_PLAN_BALANCE_T1_PWD 
SELECT     A.AGRMNT_ID
          ,A2.PLAN_NO
          ,A.REPORT_DT
          ,ZEROIFNULL(SUM(CASE WHEN A.REPORT_DT = A2.EXPIRY_DT THEN 0
                               WHEN A.INT_STATUS <> 'Z' THEN AFB.AGRMNT_FEATUR_BL_AM ELSE 0 END)) AS TODAY_BL
FROM       CC_COBRA.WK_FR14_BALANCE_PWD A
JOIN       CC_COBRA.WK_FR14_FEATURES_PWD A2
ON         A.AGRMNT_ID = A2.AGRMNT_ID
LEFT JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_BALANCE AFB
ON         A.AGRMNT_ID = AFB.AGRMNT_ID
AND        A2.FEATUR_ID = AFB.FEATUR_ID
AND        A.STATUS <> 'P'
AND        A.REPORT_DT BETWEEN AFB.SOURCE_START_DT AND AFB.SOURCE_END_DT-1
AND        AFB.AGRMNT_FEATUR_BL_TYPE_CD = '00500002'
GROUP BY 1,2,3;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_BALANCE_T1_PWD INDEX (AGRMNT_ID);

/*STEP 12F: STORE PLAN BALANCE FOR DAILY AVERAGES*/

DELETE FROM CC_COBRA.FR14_PLAN_BALANCE_STATUS WHERE REPORT_DT = (SELECT PRIOR_REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_PLAN_BALANCE_STATUS
SELECT 
       B.ORG_TX
      ,A.AGRMNT_ID
      ,A.PLAN_NO
      ,PL.BW_PLAN_TYPE_CD
      ,A.REPORT_DT
      ,CASE WHEN B.INT_STATUS <> 'Z' THEN A.CLOSNG_BL ELSE 0 END
      ,B.STATUS
FROM   CC_COBRA.WK_FR14_PLAN_BALANCE_T1_PWD A
JOIN   CC_COBRA.WK_FR14_BALANCE_PWD B
ON     A.AGRMNT_ID = B.AGRMNT_ID
JOIN   CC_COBRA.CC_PLAN_LOOKUP PL
ON     B.ORG_TX = PL.ORG_TX
AND    A.PLAN_NO = PL.PLAN_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS COLUMN(PLAN_NO);

.GOTO SKIPPD;

/*STEP 12G: DEAL WITH XMAS WHEN IT IS A WORKING DAY*/

.LABEL STCLAUS;


/*FILL UP TABLE FR14_PLAN_BALANCE_STATUS FOR XMAS FROM THE PREVIOUS WORKING DAY*/

DELETE FROM CC_COBRA.FR14_PLAN_BALANCE_STATUS 
WHERE REPORT_DT = 
(SELECT 
 (EXTRACT(YEAR FROM PRIOR_REPORT_DT)*10000)-19000000+1225
 FROM CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR14_PLAN_BALANCE_STATUS
SELECT A.ORG_TX
      ,A.AGRMNT_ID
      ,A.PLAN_NO
      ,A.BW_PLAN_TYPE_CD
      ,(EXTRACT(YEAR FROM B.REPORT_DT)*10000)-19000000+1225
      ,A.BALANC_AM
      ,A.STATUS
FROM   CC_COBRA.FR14_PLAN_BALANCE_STATUS A
JOIN   (
       SELECT CASE WHEN ((REPORT_DT-DATE '0001-01-05') MOD 7) IN (3,4) THEN REPORT_DT-4 
            ELSE REPORT_DT-2 END AS REPORT_DT
       FROM CC_COBRA.WK_FR14_DATE_CONTROL
       ) B
ON     A.REPORT_DT = B.REPORT_DT  
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_PLAN_BALANCE_STATUS COLUMN(PLAN_NO);

/*FILL TRANSACTIONS TABLE FOR XMAS*/

DELETE FROM CC_COBRA.FR14_TRANSACTIONS 
WHERE REPORT_DT = 
(SELECT 
 (EXTRACT(YEAR FROM PRIOR_REPORT_DT)*10000)-19000000+1225
 FROM CC_COBRA.WK_FR14_DATE_CONTROL)
;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR14_TRANSACTIONS
SELECT
	A.ORG_TX
,	A.AGRMNT_ID
,   (EXTRACT(YEAR FROM B.REPORT_DT)*10000)-19000000+1225
,	A.PLAN_NO
,	A.BW_PLAN_TYPE_CD
,	A.INTRO_RETAIL_IND
,	A.CLOSNG_BL AS OPENNG_BL
,	A.CLOSNG_BL
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0
,	0

FROM CC_COBRA.FR14_TRANSACTIONS A
JOIN   (
       SELECT CASE WHEN ((REPORT_DT-DATE '0001-01-05') MOD 7) IN (3,4) THEN REPORT_DT-4 
            ELSE REPORT_DT-2 END AS REPORT_DT
       FROM CC_COBRA.WK_FR14_DATE_CONTROL
       ) B
ON     A.REPORT_DT = B.REPORT_DT  
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIPPD;

/*STEP 12G: ONLY KEEP A WEEK'S WORTH OF DATA*/

DELETE FROM  CC_COBRA.FR14_PLAN_BALANCE_STATUS WHERE REPORT_DT <= (SELECT REPORT_DT-7 FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

/*SECTION 6 - PLAN PAYMENT CHECKING*/

/*STEP 13: CREATE A LOOKUP TABLE FOR DRAWDOWN DATA WRONG PLAN NOS*/

/*STEP 13A: INSERT NEW PLAN NUMBER FOR RECORDS WHERE THERE IS ONLY 1 PLAN IN EXISTENCE*/

DELETE FROM CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE ALL;

INSERT INTO CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE
SELECT A.AGRMNT_ID
, A.PLAN_NO
, C2.PLAN_NO AS NEW_PLAN_NO
, 1 
FROM CC_COBRA.WK_FR14_DRAWDOWN  A
/*JOIN TO DERIVED TABLE WHERE THERE IS ONLY ONE PLAN*/
JOIN (SELECT AGRMNT_ID
      FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1
      GROUP BY 1
      HAVING COUNT(*) = 1) C
ON    A.AGRMNT_ID = C.AGRMNT_ID
/*PICK UP THE ACTUAL SINGLE PLAN NO*/
JOIN  CC_COBRA.WK_FR14_PLAN_BALANCE_T1 C2
ON    A.AGRMNT_ID = C2.AGRMNT_ID
/*AND CHOOSE RECORDS FROM THE TXN DRAWDOWN TABLE THAT DON'T HAVE THE PLAN NO FROM AFF IN THE PLAN TABLE*/
WHERE NOT EXISTS 
(SELECT NULL
FROM  CC_COBRA.WK_FR14_PLAN_BALANCE_T1 B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.PLAN_NO = B.PLAN_NO)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 13B: FIND ONES WITH WRONG PLAN NO WHERE MULTIPLE PLANS EXIST PICK APPROPRIATE ONE*/

INSERT INTO CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE
SELECT A.AGRMNT_ID
, A.PLAN_NO
,CASE /*IF RETAIL PROMO AND RETAIL PLAN EXISTS PUT THERE*/
      WHEN LKUP.BW_PLAN_TYPE_CD = 'P' AND C2.PLAN_NO = 10002 THEN C2.PLAN_NO
      /*IF BT AND BT EXPIRED PLAN EXISTS PUT THERE*/
      WHEN LKUP.BW_PLAN_TYPE_CD = 'B' AND C2.PLAN_NO = 10003 THEN C2.PLAN_NO
      /*IF FEE PLAN NOT THERE THEN USE NEXT FEE PLAN*/
      WHEN A.PLAN_NO = 10004 AND C2.PLAN_NO = 10005 THEN C2.PLAN_NO
      ELSE NULL
      END AS NEW_PLAN_NO
,1
FROM CC_COBRA.WK_FR14_DRAWDOWN  A 
JOIN CC_COBRA.WK_FR14_BALANCE BAL
ON   A.AGRMNT_ID = BAL.AGRMNT_ID
JOIN CC_COBRA.CC_PLAN_LOOKUP LKUP
ON   BAL.ORG_TX = LKUP.ORG_TX
AND  A.PLAN_NO = LKUP.PLAN_NO
/*JOIN TO DERIVED TABLE WHERE THERE IS MORE THAN ONE PLAN*/
JOIN (SELECT AGRMNT_ID
      FROM CC_COBRA.WK_FR14_PLAN_BALANCE_T1
      GROUP BY 1
      HAVING COUNT(*) > 1) C
ON    A.AGRMNT_ID = C.AGRMNT_ID
/*PICK UP THE ACTUAL SINGLE PLAN NOS*/
JOIN  CC_COBRA.WK_FR14_PLAN_BALANCE_T1 C2
ON    A.AGRMNT_ID = C2.AGRMNT_ID
/*AND CHOOSE RECORDS FROM THE TXN DRAWDOWN TABLE THAT DON'T HAVE THE PLAN NO FROM AFF IN THE PLAN TABLE*/
WHERE NOT EXISTS 
(SELECT NULL
FROM  CC_COBRA.WK_FR14_PLAN_BALANCE_T1 B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.PLAN_NO = B.PLAN_NO)
AND NEW_PLAN_NO IS NOT NULL
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 13C: UPDATE UPDATE FLAG TO = 2 WHERE THE NEW PLAN NO EXISTS IN THE DRAWDOWN DATA ALREADY*/

UPDATE CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE A
SET UPDATE_TYPE = 2
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR14_DRAWDOWN B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.NEW_PLAN_NO = B.PLAN_NO 
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STORE THIS DATA IN A PERMANENT TABLE - IT WILL SHORTEN ANY FUTURE RERUNS*/

DELETE FROM CC_COBRA.FR14_DRAWDOWN_PLAN_REPLACE WHERE REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR14_DRAWDOWN_PLAN_REPLACE
SELECT
A.AGRMNT_ID
,B.REPORT_DT
,A.PLAN_NO
,A.NEW_PLAN_NO
FROM CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE A
CROSS JOIN CC_COBRA.WK_FR14_DATE_CONTROL B
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_DRAWDOWN_PLAN_REPLACE INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 13D: UPDATE DRAWDOWN TABLE WHERE THE NEW PLAN_NO DOESN'T EXIST ALREADY - TYPE 1*/

UPDATE CC_COBRA.WK_FR14_DRAWDOWN
FROM
(
SELECT A.AGRMNT_ID, A.PLAN_NO, B.NEW_PLAN_NO 
FROM CC_COBRA.WK_FR14_DRAWDOWN  A
/*JOIN TO DERIVED TABLE WHERE THERE IS ONLY ONE PLAN*/
JOIN CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE B
ON    A.AGRMNT_ID = B.AGRMNT_ID
AND   A.PLAN_NO = B.PLAN_NO 
AND   UPDATE_TYPE = 1
) T1
SET PLAN_NO = T1.NEW_PLAN_NO
WHERE CC_COBRA.WK_FR14_DRAWDOWN.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR14_DRAWDOWN.PLAN_NO = T1.PLAN_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 13E: CHECK FOR DUPLICATES CAUSE BY PREVIOUS UPDATE*/

DELETE FROM CC_COBRA.WK_FR14_DRAWDOWN_DUPS;

INSERT INTO CC_COBRA.WK_FR14_DRAWDOWN_DUPS 
SELECT A.*
FROM  CC_COBRA.WK_FR14_DRAWDOWN A
JOIN 
(SELECT AGRMNT_ID, REPORT_DT, PLAN_NO FROM CC_COBRA.WK_FR14_DRAWDOWN GROUP BY 1,2,3 HAVING COUNT(*) > 1) B
ON    A.AGRMNT_ID = B.AGRMNT_ID
AND   A.PLAN_NO = B.PLAN_NO 
AND   A.REPORT_DT = B.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR14_DRAWDOWN A
 WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.WK_FR14_DRAWDOWN_DUPS B
WHERE    A.AGRMNT_ID = B.AGRMNT_ID
AND   A.PLAN_NO = B.PLAN_NO 
AND   A.REPORT_DT = B.REPORT_DT
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR14_DRAWDOWN
SELECT 
AGRMNT_ID
,REPORT_DT
,PLAN_NO
,SUM(DRWDWN_AM)
,SUM(PAYMNT_PLAN_AM)
,SUM(INTRST_AM)
FROM CC_COBRA.WK_FR14_DRAWDOWN_DUPS
GROUP BY 1,2,3;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 14: CREATE TABLE TO HOLD DATA THAT NEEDS TO BE PUT ONTO A DIFFERENT LINE - TYPE 2 */

/*THEY ARE ON TWO LINES BECAUSE OF TWO DIFF PLAN NOS - WHERE ONE IS WRONG AND SHOULD BE THE SAME AS THE OTHER*/

DELETE FROM  CC_COBRA.WK_FR14_DRAWDOWN_UPDATE ALL;

INSERT INTO  CC_COBRA.WK_FR14_DRAWDOWN_UPDATE 
/*AGGREGATE TO MAKE SURE THAT THE 2+ RECORDS THAT ARE MISSING THAT NEED TO BE PUT ONTO SINGLE EXISTING PLAN ARE SUMMED UP*/
SELECT A.AGRMNT_ID, COALESCE(B.NEW_PLAN_NO,A.PLAN_NO), SUM(A.PAYMNT_PLAN_AM) AS PAYMNT_PLAN_AM, SUM(A.DRWDWN_AM) AS DRWDWN_AM
FROM CC_COBRA.WK_FR14_DRAWDOWN  A
LEFT JOIN CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE B
ON    A.AGRMNT_ID = B.AGRMNT_ID
AND   A.PLAN_NO = B.PLAN_NO 
WHERE EXISTS 
(SELECT NULL
FROM  CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE C
WHERE A.AGRMNT_ID = C.AGRMNT_ID
AND   A.PLAN_NO = C.PLAN_NO
AND   C.UPDATE_TYPE = 2)
OR EXISTS 
(SELECT NULL
FROM  CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE D
WHERE A.AGRMNT_ID = D.AGRMNT_ID
AND   A.PLAN_NO = D.NEW_PLAN_NO
AND   D.UPDATE_TYPE = 2)
GROUP BY 1,2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON  CC_COBRA.WK_FR14_DRAWDOWN_UPDATE  INDEX(AGRMNT_ID);

/*STEP 15: COLLECT DATA TO DELETE BASED ON PRIOR STEP 14*/

DELETE FROM  CC_COBRA.WK_FR14_DRAWDOWN_DELETE ALL;

INSERT INTO  CC_COBRA.WK_FR14_DRAWDOWN_DELETE 
SELECT C.AGRMNT_ID, C.PLAN_NO
FROM  CC_COBRA.WK_FR14_DRAWDOWN_PLAN_REPLACE C
WHERE  C.UPDATE_TYPE = 2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON  CC_COBRA.WK_FR14_DRAWDOWN_DELETE  INDEX(AGRMNT_ID);

/*STEP 16: UPDATE REST TO BE THE SAME RECORD THAT ALREADY EXISTS*/

UPDATE CC_COBRA.WK_FR14_DRAWDOWN
FROM CC_COBRA.WK_FR14_DRAWDOWN_UPDATE T1
SET PAYMNT_PLAN_AM = T1.PAYMNT_PLAN_AM
   ,DRWDWN_AM = T1.DRWDWN_AM
WHERE CC_COBRA.WK_FR14_DRAWDOWN.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR14_DRAWDOWN.PLAN_NO = T1.PLAN_NO
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 17: DELETE THESE RECORDS THAT HAVE JUST BEEN UDPATED*/

DELETE FROM CC_COBRA.WK_FR14_DRAWDOWN 
WHERE EXISTS (
SELECT NULL 
FROM  CC_COBRA.WK_FR14_DRAWDOWN_DELETE T1
WHERE CC_COBRA.WK_FR14_DRAWDOWN.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR14_DRAWDOWN.PLAN_NO = T1.OLD_PLAN_NO)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 18: GET PLAN PAYMENTS*/

DELETE FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T1 ALL; 

INSERT INTO CC_COBRA.WK_FR14_PLAN_PAYMENTS_T1
SELECT A.AGRMNT_ID
      ,A.PLAN_NO
      ,A.REPORT_DT
      ,(A.PLAN_PAYMENT-((A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.ADJUST_PC)-((A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.COFF_PC))
      ,(A.PLAN_PAYMENT-((A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.ADJUST_PC)-((A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.COFF_PC))*A.BT_OUT_PC
      ,CASE WHEN A.BT_OUT_AM <> 0 THEN (((A.PLAN_PAYMENT-((A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.ADJUST_PC)-((A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.COFF_PC))*A.BT_OUT_PC)/A.BT_OUT_AM)*A.BT_OUT_CT ELSE 0 END
      ,(A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.ADJUST_PC
      ,(A.PLAN_PAYMENT-A.PAYMNT_PLAN_AM)*A.COFF_PC
      ,A.PLAN_INTRST_PAYMENT
      
FROM (
SELECT B.AGRMNT_ID
      ,B.PLAN_NO
      ,B.REPORT_DT
      ,CAST(ZEROIFNULL(B.CLOSNG_BL-B.OPENNG_BL-ZEROIFNULL(D.DRWDWN_AM)) AS FLOAT) AS PLAN_PAYMENT
      ,CAST(ZEROIFNULL(D.PAYMNT_PLAN_AM) AS FLOAT)  AS PAYMNT_PLAN_AM
      ,CAST(ZEROIFNULL(E.PAYMNT_AM) AS FLOAT)  AS P_PAYMNT_AM
      ,CAST(ZEROIFNULL(E.PAYMNT_AM) AS FLOAT)  AS PAYMNT_AM
      ,CAST(ZEROIFNULL(E.BT_OUT_PC) AS FLOAT)  AS BT_OUT_PC
      ,CAST(ZEROIFNULL(E.ADJUST_PC) AS FLOAT)  AS ADJUST_PC
      ,CAST(ZEROIFNULL(E.ADJUST_AM) AS FLOAT)  AS ADJUST_AM
      ,CAST(ZEROIFNULL(E.COFF_PC) AS FLOAT)  AS COFF_PC
      ,CAST(ZEROIFNULL(E.COFF_AM) AS FLOAT)  AS COFF_AM
      ,CAST(ZEROIFNULL((B2.INTRST_CLOSNG_BL*-1)-(B2.INTRST_OPENNG_BL*-1)-ZEROIFNULL(D.INTRST_AM)) AS FLOAT) AS PLAN_INTRST_PAYMENT
      ,CAST(ZEROIFNULL(E.BT_OUT_AM) AS FLOAT) AS BT_OUT_AM
      ,CAST(ZEROIFNULL(E.BT_OUT_CT) AS FLOAT) AS BT_OUT_CT
FROM        CC_COBRA.WK_FR14_PLAN_BALANCE_T1 B
JOIN        CC_COBRA.WK_FR14_PLAN_BALANCE_T2 B2
ON          B.AGRMNT_ID = B2.AGRMNT_ID
AND         B.PLAN_NO = B2.PLAN_NO
LEFT JOIN   CC_COBRA.WK_FR14_DRAWDOWN D
ON          B.AGRMNT_ID = D.AGRMNT_ID
AND         B.PLAN_NO = D.PLAN_NO
LEFT JOIN   CC_COBRA.WK_FR14_PAYMENTS E
ON          B.AGRMNT_ID = E.AGRMNT_ID     
) A

WHERE A.PLAN_PAYMENT <> 0
OR    A.COFF_AM <> 0
OR    A.ADJUST_AM <> 0
OR    A.PAYMNT_AM <> 0
OR    A.P_PAYMNT_AM <> 0

;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 7 - CLEAN UP PAYMENTS PART 2*/

/*STEP 19: COUNT AND SEQUENCE PLANS*/

DELETE FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2 ALL;

INSERT INTO CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
SELECT T1.AGRMNT_ID
      ,PLAN_NO
      ,REPORT_DT
      ,PLAN_PAYMNT_AM
      ,PLAN_BT_OUT_AM
      ,PLAN_BT_OUT_CT
      ,PLAN_ADJUST_AM
      ,PLAN_COFF_AM
      ,0
      ,PLAN_INTRST_PAYMNT_AM
      ,RANK () OVER (PARTITION BY T1.AGRMNT_ID ORDER BY T1.PLAN_PAYMNT_AM,PLAN_COFF_AM,PLAN_NO ) AS SEQ
      ,A.VOLUME
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T1 T1
JOIN (SELECT AGRMNT_ID, COUNT(*) AS VOLUME
      FROM   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T1
      GROUP BY 1) A
ON   T1.AGRMNT_ID = A.AGRMNT_ID;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
      
COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2 INDEX(AGRMNT_ID);

/*STEP 20: UPDATE THE ADJUSTMENTS WHERE THE TOTAL PAYMENT EQUALS THE ADJUSTMENT*/

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM (
SELECT A.AGRMNT_ID, B.ADJUST_AM
FROM 
(SELECT AGRMNT_ID, SUM(PLAN_PAYMNT_AM) AS PLAN_PAYMNT_AM
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
GROUP BY 1) A
JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON   A.AGRMNT_ID = B.AGRMNT_ID
WHERE B.ADJUST_AM <> 0 AND B.PAYMNT_AM = 0
AND  B.ADJUST_AM = A.PLAN_PAYMNT_AM) A
SET PLAN_PAYMNT_AM = 0
   ,PLAN_BT_OUT_AM = 0
   ,PLAN_BT_OUT_CT = 0
   ,PLAN_ADJUST_AM = ADJUST_AM
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = A.AGRMNT_ID 
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.TOTAL_PLANS = 1
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 21: */ 

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM (
SELECT A.AGRMNT_ID, B.ADJUST_AM
FROM 
(SELECT AGRMNT_ID, SUM(PLAN_PAYMNT_AM) AS PLAN_PAYMNT_AM
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
GROUP BY 1) A
JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON   A.AGRMNT_ID = B.AGRMNT_ID
WHERE B.ADJUST_AM <> 0 AND B.PAYMNT_AM = 0
AND  B.ADJUST_AM = A.PLAN_PAYMNT_AM) A
SET PLAN_PAYMNT_AM = 0
   ,PLAN_BT_OUT_AM = 0
   ,PLAN_BT_OUT_CT = 0
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = A.AGRMNT_ID 
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.TOTAL_PLANS > 1
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 22: CORRECT ADJUSTMENTS WHERE A PERCENTAGE OF THE BALANCE DIFFERENCE*/

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM (
SELECT A.AGRMNT_ID
FROM 
(SELECT AGRMNT_ID, SUM(PLAN_PAYMNT_AM) AS PLAN_PAYMNT_AM
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
GROUP BY 1) A
JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND B.ADJUST_AM <> 0 AND B.ADJUST_PC < 1
AND  B.ADJUST_AM+B.PAYMNT_AM = A.PLAN_PAYMNT_AM
) A
SET PLAN_PAYMNT_AM = PLAN_PAYMNT_AM-PLAN_ADJUST_AM
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = A.AGRMNT_ID 
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 23: UPDATE LAST PLANS WITH THE DIFFERENCE FOR PLAN_PAYMNT_AM*/

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM
(SELECT C.AGRMNT_ID, C.PLAN_NO, A.PLAN_ADJUST_AM-B.ADJUST_AM AS DIFF
FROM 
(SELECT AGRMNT_ID, SUM(PLAN_ADJUST_AM) AS PLAN_ADJUST_AM
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
GROUP BY 1) A
JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND B.ADJUST_AM <> A.PLAN_ADJUST_AM
AND B.ADJUST_AM > 0
JOIN CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2 C
ON   A.AGRMNT_ID = C.AGRMNT_ID
AND  C.SEQ_NO = C.TOTAL_PLANS ) T1
SET  PLAN_ADJUST_AM = PLAN_ADJUST_AM-T1.DIFF
    ,PLAN_PAYMNT_AM = PLAN_PAYMNT_AM+T1.DIFF
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.PLAN_NO = T1.PLAN_NO;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 24: */ 

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM
(SELECT D.AGRMNT_ID, D.PLAN_NO, A.PLAN_PAYMNT_AM-B.PAYMNT_AM-C.PAYMNT_PLAN_AM AS DIFF
FROM 
(SELECT AGRMNT_ID, SUM(PLAN_PAYMNT_AM) AS PLAN_PAYMNT_AM
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
GROUP BY 1) A
JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON   A.AGRMNT_ID = B.AGRMNT_ID
JOIN (SELECT AGRMNT_ID, SUM(PAYMNT_PLAN_AM) AS PAYMNT_PLAN_AM
      FROM CC_COBRA.WK_FR14_DRAWDOWN
      GROUP BY 1
      ) C
ON A.AGRMNT_ID = C.AGRMNT_ID
AND B.PAYMNT_AM+C.PAYMNT_PLAN_AM <> A.PLAN_PAYMNT_AM
AND B.PAYMNT_AM > 0
JOIN CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2 D
ON   A.AGRMNT_ID = D.AGRMNT_ID
AND  D.SEQ_NO = D.TOTAL_PLANS ) T1
SET  PLAN_PAYMNT_AM = PLAN_PAYMNT_AM-T1.DIFF
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.PLAN_NO = T1.PLAN_NO;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 25: */ 

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM
(SELECT D.AGRMNT_ID, D.PLAN_NO, A.PLAN_COFF_AM-B.COFF_AM AS DIFF
FROM 
(SELECT AGRMNT_ID, SUM(PLAN_COFF_AM) AS PLAN_COFF_AM
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
GROUP BY 1) A
JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON   A.AGRMNT_ID = B.AGRMNT_ID
AND  A.PLAN_COFF_AM <> B.COFF_AM
JOIN CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2 D
ON   A.AGRMNT_ID = D.AGRMNT_ID
AND  D.SEQ_NO = D.TOTAL_PLANS ) T1
SET  PLAN_COFF_AM = PLAN_COFF_AM-T1.DIFF
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.PLAN_NO = T1.PLAN_NO;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 26: UPDATE WHERE THERE IS NO PAYMENT FOR THE CUSTOMER - USUALLY TRADES*/

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM (
SELECT A.AGRMNT_ID
FROM 
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,SUM(PLAN_PAYMNT_AM) AS PAYMNT_AM
FROM   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2 A
GROUP BY 1,2) A

LEFT JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON  A.AGRMNT_ID = B.AGRMNT_ID
LEFT JOIN (SELECT AGRMNT_ID
                , SUM(PAYMNT_PLAN_AM) AS PAYMNT_PLAN_AM 
           FROM CC_COBRA.WK_FR14_DRAWDOWN 
           GROUP BY 1) C
ON  A.AGRMNT_ID = C.AGRMNT_ID
WHERE A.PAYMNT_AM <> (ZEROIFNULL(B.PAYMNT_AM)+ZEROIFNULL(C.PAYMNT_PLAN_AM))
AND A.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
AND B.PAYMNT_AM IS NULL
 ) A
SET  PLAN_TRADE_AM = PLAN_PAYMNT_AM
     ,PLAN_PAYMNT_AM = 0
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = A.AGRMNT_ID 
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 27: DEAL WITH AMOUNTS FOR ROLLOVER PLANS*/

UPDATE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2
FROM (
SELECT A.AGRMNT_ID
FROM 
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,SUM(PLAN_PAYMNT_AM) AS PAYMNT_AM
FROM   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2 A
GROUP BY 1,2) A

LEFT JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON  A.AGRMNT_ID = B.AGRMNT_ID
LEFT JOIN (SELECT AGRMNT_ID
                , SUM(PAYMNT_PLAN_AM) AS PAYMNT_PLAN_AM 
           FROM CC_COBRA.WK_FR14_DRAWDOWN 
           GROUP BY 1) C
ON  A.AGRMNT_ID = C.AGRMNT_ID
WHERE A.PAYMNT_AM = (ZEROIFNULL(B.PAYMNT_AM)+ZEROIFNULL(C.PAYMNT_PLAN_AM))
AND A.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
AND A.PAYMNT_AM = 0
 ) A
SET  PLAN_PAYMNT_AM = 0
WHERE CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.AGRMNT_ID = A.AGRMNT_ID 
AND   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 8 - INSERT PLAN PAYMENTS AND CHARGE OFFS*/

/*STEP 28: FINAL TABLE FOR PLAN PAYMENTS/CREDITS*/ 
                                                                      
DELETE FROM CC_COBRA.FR14_PLAN_PAYMENTS                                   
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_PLAN_PAYMENTS
SELECT
       AGRMNT_ID 
      ,PLAN_NO 
      ,REPORT_DT 
      ,PLAN_PAYMNT_AM
      ,PLAN_BT_OUT_AM 
      ,PLAN_BT_OUT_CT
      ,PLAN_ADJUST_AM 
      ,PLAN_TRADE_AM
      ,PLAN_INTRST_PAYMNT_AM
      
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_PAYMENTS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_PLAN_PAYMENTS COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_PLAN_PAYMENTS COLUMN(PLAN_NO);

/*STEP 29: COLLECT ERRORS*/

DELETE FROM CC_COBRA.FR14_ERRORS_PAYMENTS WHERE REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_ERRORS_PAYMENTS
SELECT A.*,B.PAYMNT_AM, C.PAYMNT_PLAN_AM
FROM 
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,SUM(PLAN_PAYMNT_AM) AS PAYMNT_AM
FROM   CC_COBRA.FR14_PLAN_PAYMENTS A
GROUP BY 1,2) A
LEFT JOIN CC_COBRA.WK_FR14_PAYMENTS B
ON  A.AGRMNT_ID = B.AGRMNT_ID
LEFT JOIN (SELECT AGRMNT_ID, SUM(PAYMNT_PLAN_AM) AS PAYMNT_PLAN_AM FROM CC_COBRA.WK_FR14_DRAWDOWN GROUP BY 1) C
ON  A.AGRMNT_ID = C.AGRMNT_ID
WHERE A.PAYMNT_AM <> (ZEROIFNULL(B.PAYMNT_AM)+ZEROIFNULL(C.PAYMNT_PLAN_AM))
AND A.REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 30: COLLECT CHARGE OFFS INTO FINAL TABLE*/

DELETE FROM CC_COBRA.FR14_PLAN_CHARGE_OFFS WHERE REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_PLAN_CHARGE_OFFS 
SELECT AGRMNT_ID, PLAN_NO, REPORT_DT, PLAN_COFF_AM
FROM CC_COBRA.WK_FR14_PLAN_PAYMENTS_T1
WHERE AGRMNT_ID IN 
(
SELECT A.AGRMNT_ID
FROM
(SELECT AGRMNT_ID, SUM(PLAN_COFF_AM) AS PLAN_COFF_AM
FROM   CC_COBRA.WK_FR14_PLAN_PAYMENTS_T1
GROUP BY 1) A
JOIN   CC_COBRA.WK_FR14_CHARGE_OFFS B
ON     A.AGRMNT_ID = B.AGRMNT_ID
AND    ABS(A.PLAN_COFF_AM-B.CHARGE_OFF_AM)<=0.01 )
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_CHARGE_OFFS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_PLAN_CHARGE_OFFS COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_PLAN_CHARGE_OFFS COLUMN(PLAN_NO);

DELETE FROM CC_COBRA.FR14_ERRORS_CHARGE_OFF WHERE REPORT_DT IN (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_ERRORS_CHARGE_OFF
SELECT T1.AGRMNT_ID
      ,T2.REPORT_DT
      ,T1.PLAN_CHARGE_OFF
      ,T2.CHARGE_OFF_AM
FROM 
(SELECT AGRMNT_ID, REPORT_DT,SUM(PLAN_CHARGE_OFF_AM) AS PLAN_CHARGE_OFF
FROM CC_COBRA.FR14_PLAN_CHARGE_OFFS 
GROUP BY 1,2) T1
JOIN  CC_COBRA.WK_FR14_CHARGE_OFFS T2
ON T1.AGRMNT_ID = T2.AGRMNT_ID
AND T1.REPORT_DT = T2.REPORT_DT
AND ABS(T1.PLAN_CHARGE_OFF -T2.CHARGE_OFF_AM) >.01;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*SECTION 9 - TRANSACTIONS BY PLAN*/

/*STEP 31 TXNS*/

DELETE FROM CC_COBRA.WK_FR14_TRANSACTIONS_T1;

INSERT INTO CC_COBRA.WK_FR14_TRANSACTIONS_T1 
SELECT     
 MT.AGRMNT_ID
,MT.REPORT_DT
,COALESCE(B.NEW_PLAN_NO, MT.PLAN_NO) AS PLAN_NO
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.SCHEME = 'A'
          THEN EVENT_AM 
          ELSE 0 END) AS RETAIL_A_UK_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'A'
          THEN 1
          ELSE 0 END) AS RETAIL_A_UK_CT

,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.SCHEME = 'M'
          THEN EVENT_AM 
          ELSE 0 END) AS RETAIL_M_UK_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'M'
          THEN 1
          ELSE 0 END) AS RETAIL_M_UK_CT

,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.SCHEME = 'V'
          THEN EVENT_AM 
          ELSE 0 END) AS RETAIL_V_UK_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'V'
          THEN 1
          ELSE 0 END) AS RETAIL_V_UK_CT
            
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.SCHEME = 'A'
          THEN EVENT_AM 
          ELSE 0 END) AS RETAIL_A_FOREGN_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'A'
          THEN 1
          ELSE 0 END) AS RETAIL_A_FOREGN_CT

,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.SCHEME = 'M'
          THEN EVENT_AM 
          ELSE 0 END) AS RETAIL_M_FOREGN_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'M'
          THEN 1
          ELSE 0 END) AS RETAIL_M_FOREGN_CT
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.SCHEME = 'V'
          THEN EVENT_AM 
          ELSE 0 END) AS RETAIL_V_FOREGN_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('RETAIL')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'V'
          THEN 1
          ELSE 0 END) AS RETAIL_V_FOREGN_CT
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.SCHEME = 'A'
          THEN EVENT_AM 
          ELSE 0 END) AS CASH_A_UK_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'A'
          THEN 1
          ELSE 0 END) AS CASH_A_UK_CT
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.SCHEME = 'M'
          THEN EVENT_AM 
          ELSE 0 END) AS CASH_M_UK_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'M'
          THEN 1
          ELSE 0 END) AS CASH_M_UK_CT
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.SCHEME = 'V'
          THEN EVENT_AM 
          ELSE 0 END) AS CASH_V_UK_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP = 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'V'
          THEN 1
          ELSE 0 END) AS CASH_V_UK_CT
             
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.SCHEME = 'A'
          THEN EVENT_AM 
          ELSE 0 END) AS CASH_A_FOREGN_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'A'
          THEN 1
          ELSE 0 END) AS CASH_A_FOREGN_CT

,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.SCHEME = 'M'
          THEN EVENT_AM 
          ELSE 0 END) AS CASH_M_FOREGN_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'M'
          THEN 1
          ELSE 0 END) AS CASH_M_FOREGN_CT

,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.SCHEME = 'V'
          THEN EVENT_AM 
          ELSE 0 END) AS CASH_V_FOREGN_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('CASH','QUASI')
          AND  MT.CURNCY_GRP <> 'D'
          AND  MT.REVRSL_IN = 0
          AND  MT.SCHEME = 'V'
          THEN 1
          ELSE 0 END) AS CASH_V_FOREGN_CT
         
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('BT') 
          AND  MT.EVENT_ACTVTY_CD NOT IN ('00508305','00508306','00506931','00506932')
          THEN EVENT_AM 
          ELSE 0 END) AS BALANC_TRNSFR_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('BT')
          AND  MT.EVENT_ACTVTY_CD NOT IN ('00508305','00508306','00506931','00506932')
          AND  MT.REVRSL_IN = 0
          THEN 1
          ELSE 0 END) AS BALANC_TRNSFR_CT
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('BT')
          AND  MT.EVENT_ACTVTY_CD IN ('00508305','00508306')
          THEN EVENT_AM 
          ELSE 0 END) AS PROMO_CHEQUE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('BT')
          AND  MT.EVENT_ACTVTY_CD IN ('00508305','00508306')
          AND  MT.REVRSL_IN = 0
          THEN 1
          ELSE 0 END) AS PROMO_CHEQUE_CT   
                
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('BT')
          AND  MT.EVENT_ACTVTY_CD IN ('00506931','00506932')
          THEN EVENT_AM 
          ELSE 0 END) AS CONVNC_CHEQUE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP IN ('BT')
          AND  MT.EVENT_ACTVTY_CD IN ('00506931','00506932')
          AND  MT.REVRSL_IN = 0
          THEN 1
          ELSE 0 END) AS CONVNC_CHEQUE_CT  
              
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'INTEREST' 
          AND  EVENT_AM < 0
          THEN EVENT_AM 
          ELSE 0 END) AS INTRST_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'INTEREST' 
          AND  EVENT_AM > 0
          THEN EVENT_AM 
          ELSE 0 END) AS INTRST_FEE_REVRSL_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'PPI FEE'
		  AND  REVRSL_IN = 0
          THEN EVENT_AM 
          ELSE 0 END) AS PPI_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'PPI FEE'
          AND  REVRSL_IN = 1
          THEN EVENT_AM 
          ELSE 0 END) AS PPI_FEE_REVRSL_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'BT FEE'
          THEN EVENT_AM 
          ELSE 0 END) AS BT_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'LATE FEE'
          AND REVRSL_IN = 0
          THEN EVENT_AM 
          ELSE 0 END) AS LATE_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'LATE FEE'
          AND REVRSL_IN = 1
          THEN EVENT_AM 
          ELSE 0 END) AS LATE_FEE_REVRSL_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'OVERLIMIT FEE'
          AND REVRSL_IN = 0
          THEN EVENT_AM 
          ELSE 0 END) AS OVRLMT_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'OVERLIMIT FEE'
          AND REVRSL_IN = 1
          THEN EVENT_AM 
          ELSE 0 END) AS OVRLMT_FEE_REVRSL_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'RETURNED PAYMENT FEE'
          AND REVRSL_IN = 0
          THEN EVENT_AM 
          ELSE 0 END) AS RETPMT_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'RETURNED PAYMENT FEE'
          AND REVRSL_IN = 1
          THEN EVENT_AM 
          ELSE 0 END) AS RETPMT_FEE_REVRSL_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'MEMBERSHIP FEE'
          THEN EVENT_AM 
          ELSE 0 END) AS MBRSHP_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'CASH ADVANCE FEE'
          THEN EVENT_AM 
          ELSE 0 END) AS CSHADV_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'SENTINEL'
          THEN EVENT_AM 
          ELSE 0 END) AS SNTNL_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'PRIVACY GUARD'
          THEN EVENT_AM 
          ELSE 0 END) AS PVYGRD_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'FOREX FEE'
          THEN EVENT_AM 
          ELSE 0 END) AS FOREX_FEE_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'OTHER FEE'
          THEN EVENT_AM 
          ELSE 0 END) AS OTHER_FEE_AM

,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'ADJUSTMENT'
          THEN EVENT_AM 
          ELSE 0 END) AS ADJMNT_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'CASHBACK'
          THEN EVENT_AM 
          ELSE 0 END) AS CSHBCK_AM
                    
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'TRANSFERS'
          AND  MT.EVENT_ACTVTY_CD NOT IN ('00505117','00505118')
          THEN EVENT_AM 
          ELSE 0 END) AS TRNSFR_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'TRANSFERS'
          AND  MT.EVENT_ACTVTY_CD IN ('00505117','00505118')
          THEN EVENT_AM 
          ELSE 0 END) AS PLAN_IN_OUT_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'WRITE-OFFS'
          THEN EVENT_AM 
          ELSE 0 END) AS WRITE_OFF_AM
          
,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'FRAUD'
          THEN EVENT_AM 
          ELSE 0 END) AS FRAUD_AM

,SUM(CASE WHEN MT.TRNSCN_DERVTN_GRP = 'CHARGE-OFF'
          THEN EVENT_AM 
          ELSE 0 END) AS CHARGE_OFF_AM
          
FROM       CC_COBRA.WK_FR14_TXNS MT
INNER JOIN CC_COBRA.WK_FR14_BALANCE S
ON         MT.AGRMNT_ID = S.AGRMNT_ID
AND        MT.REPORT_DT = S.REPORT_DT
AND        MT.TRNSCN_DERVTN_GRP NOT IN ('PAYMENT')
AND        MT.PLAN_NO IS NOT NULL
LEFT JOIN  CC_COBRA.FR14_DRAWDOWN_PLAN_REPLACE B  --USE PERMANENT TABLE AS THIS WILL SHORTEN RERUNS
ON         MT.AGRMNT_ID = B.AGRMNT_ID
AND        MT.PLAN_NO = B.PLAN_NO 
AND        MT.REPORT_DT = B.REPORT_DT
GROUP BY 1,2,3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 32 GET PAYMENT GROUP - DON'T WORRY ABOUT FR11 NOT BEING UP TO DATE - THERE IS AN UPDATE TO ALL DATA AT A LATER POINT*/

DELETE FROM CC_COBRA.FR14_PAYMENT_GROUP 
WHERE REPORT_DT = (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_PAYMENT_GROUP
SELECT A.AGRMNT_ID
      ,A.POSTNG_DT AS REPORT_DT
      ,MAX(CASE WHEN B.PAYMNT_BAND_CD IN ('A','B','C','D','E','F') THEN 1 ELSE 0 END)
FROM        (SELECT *
             FROM CC_COBRA.FR11_PAYMENTS
             WHERE POSTNG_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)) A 
LEFT JOIN   CC_COBRA.FR11_STATEMENTS B
ON  A.AGRMNT_ID = B.AGRMNT_ID
AND (CAST(((A.POSTNG_DT/100*100)+1) AS DATE)-1)/100 = B.STTMNT_MTH/100
GROUP BY 1,2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PAYMENT_GROUP INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_PAYMENT_GROUP COLUMN(REPORT_DT);

/*STEP 33 - FINAL TRANSACTION TABLE*/

COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS COLUMN(PLAN_NO);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS COLUMN(BW_PLAN_TYPE_CD);

DELETE FROM CC_COBRA.FR14_TRANSACTIONS WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.FR14_TRANSACTIONS
SELECT 
 B.ORG_TX
,B.AGRMNT_ID
,D.REPORT_DT
,B.PLAN_NO
,B.BW_PLAN_TYPE_CD
,COALESCE(R.INTRO_RETAIL_FLAG,0)
,B.OPENNG_BL
,B.CLOSNG_BL
,ZEROIFNULL(RETAIL_A_UK_AM)
,ZEROIFNULL(RETAIL_A_UK_CT)
,ZEROIFNULL(RETAIL_M_UK_AM)
,ZEROIFNULL(RETAIL_M_UK_CT)
,ZEROIFNULL(RETAIL_V_UK_AM)
,ZEROIFNULL(RETAIL_V_UK_CT)
,ZEROIFNULL(RETAIL_A_FOREGN_AM)
,ZEROIFNULL(RETAIL_A_FOREGN_CT)
,ZEROIFNULL(RETAIL_M_FOREGN_AM)
,ZEROIFNULL(RETAIL_M_FOREGN_CT)
,ZEROIFNULL(RETAIL_V_FOREGN_AM)
,ZEROIFNULL(RETAIL_V_FOREGN_CT)
,ZEROIFNULL(CASH_A_UK_AM)
,ZEROIFNULL(CASH_A_UK_CT)
,ZEROIFNULL(CASH_M_UK_AM)
,ZEROIFNULL(CASH_M_UK_CT)
,ZEROIFNULL(CASH_V_UK_AM)
,ZEROIFNULL(CASH_V_UK_CT)
,ZEROIFNULL(CASH_A_FOREGN_AM)
,ZEROIFNULL(CASH_A_FOREGN_CT)
,ZEROIFNULL(CASH_M_FOREGN_AM)
,ZEROIFNULL(CASH_M_FOREGN_CT)
,ZEROIFNULL(CASH_V_FOREGN_AM)
,ZEROIFNULL(CASH_V_FOREGN_CT)
,CASE WHEN B.BW_PLAN_TYPE_CD NOT IN ('M','Q') THEN ZEROIFNULL(BALANC_TRNSFR_AM) ELSE 0 END
,CASE WHEN B.BW_PLAN_TYPE_CD NOT IN ('M','Q') THEN ZEROIFNULL(BALANC_TRNSFR_CT) ELSE 0 END
,CASE WHEN B.BW_PLAN_TYPE_CD IN ('M','Q') THEN ZEROIFNULL(BALANC_TRNSFR_AM) ELSE 0 END
,CASE WHEN B.BW_PLAN_TYPE_CD IN ('M','Q') THEN ZEROIFNULL(BALANC_TRNSFR_CT) ELSE 0 END
,ZEROIFNULL(PROMO_CHEQUE_AM)
,ZEROIFNULL(PROMO_CHEQUE_CT)
,ZEROIFNULL(CONVNC_CHEQUE_AM)
,ZEROIFNULL(CONVNC_CHEQUE_CT)
,ZEROIFNULL(INTRST_FEE_AM)
,ZEROIFNULL(INTRST_FEE_REVRSL_AM)
,ZEROIFNULL(PPI_FEE_AM)
,ZEROIFNULL(PPI_FEE_REVRSL_AM)
,CASE WHEN B.BW_PLAN_TYPE_CD NOT IN ('M','Q') THEN ZEROIFNULL(BT_FEE_AM) ELSE 0 END
,CASE WHEN B.BW_PLAN_TYPE_CD IN ('M','Q') THEN ZEROIFNULL(BT_FEE_AM) ELSE 0 END
,ZEROIFNULL(LATE_FEE_AM)
,ZEROIFNULL(LATE_FEE_REVRSL_AM)
,ZEROIFNULL(OVRLMT_FEE_AM)
,ZEROIFNULL(OVRLMT_FEE_REVRSL_AM)
,ZEROIFNULL(RETPMT_FEE_AM)
,ZEROIFNULL(RETPMT_FEE_REVRSL_AM)
,ZEROIFNULL(MBRSHP_FEE_AM)
,ZEROIFNULL(CSHADV_FEE_AM)
,ZEROIFNULL(SNTNL_FEE_AM)
,ZEROIFNULL(PVYGRD_FEE_AM)
,ZEROIFNULL(FOREX_FEE_AM)
,ZEROIFNULL(OTHER_FEE_AM)
,ZEROIFNULL(ADJMNT_AM)
,ZEROIFNULL(CSHBCK_AM)
,ZEROIFNULL(TRNSFR_AM)
,ZEROIFNULL(WRITE_OFF_AM)
,ZEROIFNULL(FRAUD_AM)
,ZEROIFNULL(CASE WHEN G.FULL_PART_PAY_IN = 1 THEN PLAN_PAYMNT_AM-PLAN_BT_OUT_AM ELSE 0 END)
,ZEROIFNULL(CASE WHEN G.FULL_PART_PAY_IN = 1 THEN 0 ELSE PLAN_PAYMNT_AM-PLAN_BT_OUT_AM END)
,ZEROIFNULL(PLAN_BT_OUT_AM)
,ZEROIFNULL(PLAN_ADJUST_AM)
,ZEROIFNULL(CASE WHEN PLAN_TRADE_AM <> 0 AND B.CLOSNG_BL = 0 THEN 0 ELSE PLAN_TRADE_AM END)
,ZEROIFNULL(CASE WHEN PLAN_TRADE_AM <> 0 AND B.CLOSNG_BL = 0 THEN PLAN_TRADE_AM ELSE 0 END)
,ZEROIFNULL(PLAN_CHARGE_OFF_AM+ZEROIFNULL(T.CHARGE_OFF_AM))
,ZEROIFNULL(CASE WHEN PLAN_IN_OUT_AM < 0 THEN PLAN_IN_OUT_AM ELSE 0 END)
,ZEROIFNULL(CASE WHEN PLAN_IN_OUT_AM > 0 THEN PLAN_IN_OUT_AM ELSE 0 END)
,ZEROIFNULL(PLAN_BT_OUT_CT)

FROM 
(
SELECT COALESCE(B1.ORG_TX,B2.ORG_TX) AS ORG_TX
      ,COALESCE(B1.AGRMNT_ID,B2.AGRMNT_ID) AS AGRMNT_ID
      ,COALESCE(B1.PLAN_NO,B2.PLAN_NO) AS PLAN_NO
      ,COALESCE(B1.BW_PLAN_TYPE_CD,B2.BW_PLAN_TYPE_CD) AS BW_PLAN_TYPE_CD
      ,ZEROIFNULL(B2.BALANC_AM) AS OPENNG_BL
      ,ZEROIFNULL(B1.BALANC_AM) AS CLOSNG_BL    
FROM 
(
SELECT    *
FROM      CC_COBRA.FR14_PLAN_BALANCE_STATUS 
WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)
) B1
FULL JOIN 
(
SELECT    *
FROM      CC_COBRA.FR14_PLAN_BALANCE_STATUS 
WHERE REPORT_DT IN (SELECT PRIOR_REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)
) B2
ON        B1.AGRMNT_ID = B2.AGRMNT_ID
AND       B1.PLAN_NO = B2.PLAN_NO
) B
CROSS JOIN CC_COBRA.WK_FR14_DATE_CONTROL D
   
LEFT JOIN CC_COBRA.WK_FR14_TRANSACTIONS_T1 T
ON        B.AGRMNT_ID = T.AGRMNT_ID
AND       B.PLAN_NO = T.PLAN_NO
AND       D.REPORT_DT = T.REPORT_DT 
LEFT JOIN CC_COBRA.FR14_PLAN_PAYMENTS P
ON        B.AGRMNT_ID = P.AGRMNT_ID
AND       B.PLAN_NO = P.PLAN_NO
AND       D.REPORT_DT = P.REPORT_DT
LEFT JOIN CC_COBRA.FR14_PLAN_CHARGE_OFFS C
ON        B.AGRMNT_ID = C.AGRMNT_ID
AND       B.PLAN_NO = C.PLAN_NO
AND       D.REPORT_DT = C.REPORT_DT
LEFT JOIN CC_COBRA.FR14_PAYMENT_GROUP G
ON        B.AGRMNT_ID = G.AGRMNT_ID
AND       D.REPORT_DT = G.REPORT_DT
LEFT JOIN (SELECT AGRMNT_ID, PLAN_NO, MAX(INTRO_RETAIL_FLAG) AS INTRO_RETAIL_FLAG FROM CC_COBRA.WK_FR14_FEATURES WHERE INTRO_RETAIL_FLAG >= 1 GROUP BY 1,2) R
ON        B.AGRMNT_ID = R.AGRMNT_ID
AND       B.PLAN_NO = R.PLAN_NO        
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 34 - UPDATE VARIANCE FIELD*/

UPDATE CC_COBRA.FR14_TRANSACTIONS
FROM
(SELECT 
A.AGRMNT_ID
,A.PLAN_NO
,A.REPORT_DT
,	(OPENNG_BL
+	RETAIL_A_UK_AM
+	RETAIL_M_UK_AM
+	RETAIL_V_UK_AM
+	RETAIL_A_FOREGN_AM
+	RETAIL_M_FOREGN_AM
+	RETAIL_V_FOREGN_AM
+	CASH_A_UK_AM
+	CASH_M_UK_AM
+	CASH_V_UK_AM
+	CASH_A_FOREGN_AM
+	CASH_M_FOREGN_AM
+	CASH_V_FOREGN_AM
+	BALANC_TRNSFR_AM
+	MONEY_TRNSFR_AM
+	PROMO_CHEQUE_AM
+	CONVNC_CHEQUE_AM
+	INTRST_FEE_AM
+	INTRST_FEE_REVRSL_AM
+	PPI_FEE_AM
+	PPI_FEE_REVRSL_AM
+	BT_FEE_AM
+	MT_FEE_AM
+	LATE_FEE_AM
+	LATE_FEE_REVRSL_AM
+	OVRLMT_FEE_AM
+	OVRLMT_FEE_REVRSL_AM
+	RETPMT_FEE_AM
+	RETPMT_FEE_REVRSL_AM
+	MBRSHP_FEE_AM
+	CSHADV_FEE_AM
+	SNTNL_FEE_AM
+	PVYGRD_FEE_AM
+	FOREX_FEE_AM
+	OTHER_FEE_AM
+	ADJMNT_AM
+	CSHBCK_AM
+	TRNSFR_AM
+	WRITE_OFF_AM
+	FRAUD_AM
+	FULL_PART_PAYMNT_AM
+	MIN_PAYMNT_AM
+	BT_OUT_AM
+	ADJUST_AM
+	TRADE_IN_AM
+	TRADE_OUT_AM
+	CHARGE_OFF_AM
+   PLAN_IN_AM
+   PLAN_OUT_AM
-CLOSNG_BL)*-1 AS CHANGE
      
FROM CC_COBRA.FR14_TRANSACTIONS A
WHERE A.REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)
AND
	OPENNG_BL
+	RETAIL_A_UK_AM
+	RETAIL_M_UK_AM
+	RETAIL_V_UK_AM
+	RETAIL_A_FOREGN_AM
+	RETAIL_M_FOREGN_AM
+	RETAIL_V_FOREGN_AM
+	CASH_A_UK_AM
+	CASH_M_UK_AM
+	CASH_V_UK_AM
+	CASH_A_FOREGN_AM
+	CASH_M_FOREGN_AM
+	CASH_V_FOREGN_AM
+	BALANC_TRNSFR_AM
+	MONEY_TRNSFR_AM
+	PROMO_CHEQUE_AM
+	CONVNC_CHEQUE_AM
+	INTRST_FEE_AM
+	INTRST_FEE_REVRSL_AM
+	PPI_FEE_AM
+	PPI_FEE_REVRSL_AM
+	BT_FEE_AM
+	MT_FEE_AM
+	LATE_FEE_AM
+	LATE_FEE_REVRSL_AM
+	OVRLMT_FEE_AM
+	OVRLMT_FEE_REVRSL_AM
+	RETPMT_FEE_AM
+	RETPMT_FEE_REVRSL_AM
+	MBRSHP_FEE_AM
+	CSHADV_FEE_AM
+	SNTNL_FEE_AM
+	PVYGRD_FEE_AM
+	FOREX_FEE_AM
+	OTHER_FEE_AM
+	ADJMNT_AM
+   CSHBCK_AM
+	TRNSFR_AM
+	WRITE_OFF_AM
+	FRAUD_AM
+	FULL_PART_PAYMNT_AM
+	MIN_PAYMNT_AM
+	BT_OUT_AM
+	ADJUST_AM
+	TRADE_IN_AM
+	TRADE_OUT_AM
+	CHARGE_OFF_AM
+   PLAN_IN_AM
+   PLAN_OUT_AM
<> CLOSNG_BL
) T1
SET PLAN_OUT_AM = CC_COBRA.FR14_TRANSACTIONS.PLAN_OUT_AM + CASE WHEN T1.CHANGE > 0 THEN T1.CHANGE ELSE 0 END
   ,PLAN_IN_AM = CC_COBRA.FR14_TRANSACTIONS.PLAN_IN_AM + CASE WHEN T1.CHANGE < 0 THEN T1.CHANGE ELSE 0 END
WHERE CC_COBRA.FR14_TRANSACTIONS.AGRMNT_ID = T1.AGRMNT_ID
AND   CC_COBRA.FR14_TRANSACTIONS.PLAN_NO = T1.PLAN_NO
AND   CC_COBRA.FR14_TRANSACTIONS.REPORT_DT = T1.REPORT_DT;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*UPDATE WHERE THERE ARE BOTH IN AND OUT -SUM UP AND REALLOCATE*/

UPDATE CC_COBRA.FR14_TRANSACTIONS
SET PLAN_IN_AM = CASE WHEN (PLAN_IN_AM + PLAN_OUT_AM) < 0 THEN (PLAN_IN_AM + PLAN_OUT_AM) ELSE 0 END
   ,PLAN_OUT_AM = CASE WHEN (PLAN_IN_AM + PLAN_OUT_AM) > 0 THEN (PLAN_IN_AM + PLAN_OUT_AM) ELSE 0 END
WHERE (PLAN_IN_AM <> 0 AND PLAN_OUT_AM <> 0) OR (PLAN_IN_AM > 0 OR PLAN_OUT_AM < 0)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*SECTION 10 - PLAN IN AND OUT MATCHING*/

/*STEP 35 - COLLECT RECORDS WITH PLAN IN/OUT AM*/

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT ALL;

INSERT INTO CC_COBRA.WK_FR14_PLAN_IN_OUT
SELECT 
AGRMNT_ID
,REPORT_DT
,PLAN_NO
,PLAN_IN_AM
,PLAN_OUT_AM
FROM CC_COBRA.FR14_TRANSACTIONS T1
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)
AND (PLAN_IN_AM <> 0 OR PLAN_OUT_AM <> 0);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
WHERE PLAN_IN_AM <> 0 AND PLAN_OUT_AM <> 0;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*STEP 36 - INSERT MATCHING RECORDS FOR IN AND OUT AMTS OF PLANS*/

DELETE FROM CC_COBRA.FR14_PLAN_IN_OUT WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL);

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*STEP 37 - DUPS ON BOTH IN AND OUT*/

INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT
SELECT A.AGRMNT_ID
      ,A.REPORT_DT
      ,B.PLAN_NO AS PLAN_OUT_NO
      ,A.PLAN_NO AS PLAN_IN_NO
      ,A.PLAN_IN_AM AS PLAN_IN_AM
      ,A.PLAN_IN_AM*-1 AS PLAN_OUT_AM
      ,1
FROM 
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_IN_AM
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_IN_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3,4
) A
JOIN
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_OUT_AM
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_OUT_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3,4
) B

ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.REPORT_DT = B.REPORT_DT
AND A.PLAN_IN_AM*-1 = B.PLAN_OUT_AM
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );


DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_PLAN_IN_OUT B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.REPORT_DT = B.REPORT_DT
AND   ((A.PLAN_NO = B.PLAN_NO_IN AND A.PLAN_IN_AM <> 0) OR (A.PLAN_NO = B.PLAN_NO_OUT AND A.PLAN_OUT_AM <> 0))
AND   B.STEP = 1
)
;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*STEP 38 - WHERE ONLY ONE RECORD FOR IN AND OUT*/

INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT
SELECT 
AGRMNT_ID
,REPORT_DT
,MAX(CASE WHEN PLAN_OUT_AM <> 0 THEN PLAN_NO ELSE 0 END) AS PLAN_OUT_NO
,MAX(CASE WHEN PLAN_IN_AM <> 0 THEN PLAN_NO ELSE 0 END) AS PLAN_IN_NO
,MAX(CASE WHEN PLAN_IN_AM = 0 THEN NULL ELSE PLAN_IN_AM END)
,MAX(CASE WHEN PLAN_OUT_AM = 0 THEN NULL ELSE PLAN_OUT_AM END)
,2

FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE (PLAN_OUT_AM <> 0 OR PLAN_IN_AM <> 0)
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING COUNT(*) = 2 AND SUM(PLAN_IN_AM+PLAN_OUT_AM) = 0;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_PLAN_IN_OUT B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.REPORT_DT = B.REPORT_DT
AND   ((A.PLAN_NO = B.PLAN_NO_IN AND A.PLAN_IN_AM <> 0) OR (A.PLAN_NO = B.PLAN_NO_OUT AND A.PLAN_OUT_AM <> 0))
AND   B.STEP = 2
)
;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*STEP 39 - MULTIPLE OUTS INTO ONE IN*/

INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT
SELECT A.AGRMNT_ID
      ,A.REPORT_DT
      ,A.PLAN_NO AS PLAN_OUT_NO
      ,B.PLAN_NO AS PLAN_IN_NO
      ,A.PLAN_OUT_AM*-1 AS PLAN_IN_AM
      ,A.PLAN_OUT_AM AS PLAN_OUT_AM
      ,3
FROM 
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_OUT_AM
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_OUT_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3,4
) A
JOIN
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_IN_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3
) B

ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.REPORT_DT = B.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_PLAN_IN_OUT B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.REPORT_DT = B.REPORT_DT
AND   ((A.PLAN_NO = B.PLAN_NO_IN AND A.PLAN_IN_AM <> 0) OR (A.PLAN_NO = B.PLAN_NO_OUT AND A.PLAN_OUT_AM <> 0))
AND   B.STEP = 3
)
;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*STEP 40 - MULTIPLE INS TO ONE OUT*/

INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT
SELECT A.AGRMNT_ID
      ,A.REPORT_DT
      ,B.PLAN_NO AS PLAN_OUT_NO
      ,A.PLAN_NO AS PLAN_IN_NO
      ,A.PLAN_IN_AM AS PLAN_IN_AM
      ,A.PLAN_IN_AM*-1 AS PLAN_OUT_AM
      ,4
FROM 
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_IN_AM
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_IN_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3,4
) A
JOIN
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_OUT_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3
) B

ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.REPORT_DT = B.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_PLAN_IN_OUT B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.REPORT_DT = B.REPORT_DT
AND   ((A.PLAN_NO = B.PLAN_NO_IN AND A.PLAN_IN_AM <> 0) OR (A.PLAN_NO = B.PLAN_NO_OUT AND A.PLAN_OUT_AM <> 0))
AND   B.STEP = 4
)
;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*STEP 41 - WHERE ONLY ONE RECORD FOR IN AND OUT - EXCLUDING FEE PLANS*/

INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT
SELECT 
AGRMNT_ID
,REPORT_DT
,MAX(CASE WHEN PLAN_OUT_AM <> 0 THEN PLAN_NO ELSE 0 END) AS PLAN_OUT_NO
,MAX(CASE WHEN PLAN_IN_AM <> 0 THEN PLAN_NO ELSE 0 END) AS PLAN_IN_NO
,MAX(CASE WHEN PLAN_IN_AM = 0 THEN NULL ELSE PLAN_IN_AM END)
,MAX(CASE WHEN PLAN_OUT_AM = 0 THEN NULL ELSE PLAN_OUT_AM END)
,5

FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE (PLAN_OUT_AM <> 0 OR PLAN_IN_AM <> 0)
AND PLAN_NO NOT IN (SELECT PLAN_NO FROM CC_COBRA.CC_PLAN_LOOKUP WHERE BW_PLAN_TYPE_CD = 'F')
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      AND PLAN_NO NOT IN (SELECT PLAN_NO FROM CC_COBRA.CC_PLAN_LOOKUP WHERE BW_PLAN_TYPE_CD = 'F')
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      /*DON'T WORRY ABOUT ORG_TX AS ALL FEE PLANS WILL BE THE SAME ON EACH ORG*/
      AND PLAN_NO NOT IN (SELECT PLAN_NO FROM CC_COBRA.CC_PLAN_LOOKUP WHERE BW_PLAN_TYPE_CD = 'F')
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING COUNT(*) = 2 AND SUM(PLAN_IN_AM+PLAN_OUT_AM) = 0;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_PLAN_IN_OUT B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.REPORT_DT = B.REPORT_DT
AND   ((A.PLAN_NO = B.PLAN_NO_IN AND A.PLAN_IN_AM <> 0) OR (A.PLAN_NO = B.PLAN_NO_OUT AND A.PLAN_OUT_AM <> 0))
AND   B.STEP = 5
)
;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*STEP 42 - WHERE TWOS RECORD FOR EACHIN AND OUT - AND TOTALS MATCH*/

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT_DUPS ALL;

INSERT INTO CC_COBRA.WK_FR14_PLAN_IN_OUT_DUPS
SELECT 
T1.*
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1 
WHERE (PLAN_OUT_AM <> 0 OR PLAN_IN_AM <> 0)
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 2
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 2
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     );
     
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
     
COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT_DUPS INDEX ( AGRMNT_ID );


INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT
SELECT F.AGRMNT_ID
      ,F.REPORT_DT
      ,F.PLAN_NO AS PLAN_OUT_NO
      ,G.PLAN_NO AS PLAN_IN_NO
      ,G.PLAN_IN_AM AS PLAN_IN_AM
      ,G.PLAN_IN_AM*-1 AS PLAN_OUT_AM
      ,6
FROM 
(
SELECT T1.AGRMNT_ID
      ,T1.REPORT_DT
      ,T1.PLAN_NO
      ,T1.PLAN_IN_AM
      ,T1.PLAN_OUT_AM
      ,MAX(T2.PLAN_NO) AS UPDATE_PLAN_NO
FROM 
(
SELECT B.*
FROM
(
SELECT AGRMNT_ID, MAX(ABS(PLAN_OUT_AM)) AS MAX_PLAN_OUT_AM
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT_DUPS WHERE PLAN_OUT_AM <> 0
GROUP BY 1
) A
JOIN CC_COBRA.WK_FR14_PLAN_IN_OUT_DUPS  B
ON A.AGRMNT_ID = B.AGRMNT_ID
AND MAX_PLAN_OUT_AM = ABS(B.PLAN_OUT_AM)
)  T1 -- HAS MAX PLAN_OUT_AM RECORD

JOIN CC_COBRA.WK_FR14_PLAN_IN_OUT_DUPS T2
ON T1.AGRMNT_ID = T2.AGRMNT_ID
AND ABS(T1.PLAN_OUT_AM) > ABS(T2.PLAN_IN_AM)
AND T2.PLAN_IN_AM <> 0
GROUP BY 1,2,3,4,5
) F
JOIN CC_COBRA.WK_FR14_PLAN_IN_OUT_DUPS G
ON F.AGRMNT_ID = G.AGRMNT_ID
AND F.UPDATE_PLAN_NO = G.PLAN_NO
AND G.PLAN_IN_AM <> 0;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_PLAN_IN_OUT B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.REPORT_DT = B.REPORT_DT
AND   (A.PLAN_NO = B.PLAN_NO_IN AND A.PLAN_IN_AM <> 0 AND A.PLAN_IN_AM =B.PLAN_IN_AM)
AND   B.STEP = 6
)
;

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

UPDATE CC_COBRA.WK_FR14_PLAN_IN_OUT
FROM   CC_COBRA.FR14_PLAN_IN_OUT A
SET    PLAN_OUT_AM = CC_COBRA.WK_FR14_PLAN_IN_OUT.PLAN_OUT_AM - A.PLAN_OUT_AM
WHERE  CC_COBRA.WK_FR14_PLAN_IN_OUT.AGRMNT_ID = A.AGRMNT_ID
AND    CC_COBRA.WK_FR14_PLAN_IN_OUT.REPORT_DT = A.REPORT_DT
AND    CC_COBRA.WK_FR14_PLAN_IN_OUT.PLAN_NO = A.PLAN_NO_OUT
AND    A.STEP = 6
AND    A.PLAN_OUT_AM <> 0;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

/*MULTIPLE OUTS INTO ONE IN*/

INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT
SELECT A.AGRMNT_ID
      ,A.REPORT_DT
      ,A.PLAN_NO AS PLAN_OUT_NO
      ,B.PLAN_NO AS PLAN_IN_NO
      ,A.PLAN_OUT_AM*-1 AS PLAN_IN_AM
      ,A.PLAN_OUT_AM AS PLAN_OUT_AM
      ,6
FROM 
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
      ,PLAN_OUT_AM
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_OUT_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3,4
) A
JOIN
(SELECT AGRMNT_ID
      ,REPORT_DT
      ,PLAN_NO
FROM  CC_COBRA.WK_FR14_PLAN_IN_OUT P1
WHERE PLAN_IN_AM <> 0
AND EXISTS (
SELECT NULL
FROM (
SELECT 
AGRMNT_ID
,REPORT_DT
FROM CC_COBRA.WK_FR14_PLAN_IN_OUT T1
WHERE EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_IN_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) = 1
     ) TIN
WHERE T1.AGRMNT_ID = TIN.AGRMNT_ID
AND   T1.REPORT_DT = TIN.REPORT_DT
      )
AND EXISTS (
SELECT NULL
FROM (
      SELECT AGRMNT_ID
           , REPORT_DT 
      FROM CC_COBRA.WK_FR14_PLAN_IN_OUT
      WHERE PLAN_OUT_AM <> 0
      GROUP BY 1,2
      HAVING COUNT(*) > 1
     ) TOUT
WHERE T1.AGRMNT_ID = TOUT.AGRMNT_ID
AND   T1.REPORT_DT = TOUT.REPORT_DT  
     )
GROUP BY 1,2
HAVING SUM(PLAN_IN_AM +PLAN_OUT_AM) =0
) T1
WHERE P1.AGRMNT_ID = T1.AGRMNT_ID
AND   P1.REPORT_DT = T1.REPORT_DT)
GROUP BY 1,2,3
) B

ON A.AGRMNT_ID = B.AGRMNT_ID
AND A.REPORT_DT = B.REPORT_DT
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );

DELETE FROM CC_COBRA.WK_FR14_PLAN_IN_OUT A
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_PLAN_IN_OUT B
WHERE A.AGRMNT_ID = B.AGRMNT_ID
AND   A.REPORT_DT = B.REPORT_DT
AND   ((A.PLAN_NO = B.PLAN_NO_IN AND A.PLAN_IN_AM <> 0) OR (A.PLAN_NO = B.PLAN_NO_OUT AND A.PLAN_OUT_AM <> 0))
AND   B.STEP = 6
)
;

COLLECT STATS ON CC_COBRA.WK_FR14_PLAN_IN_OUT INDEX ( AGRMNT_ID );


DELETE FROM CC_COBRA.FR14_PLAN_IN_OUT_UNMATCHED WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_PLAN_IN_OUT_UNMATCHED
SELECT * FROM CC_COBRA.WK_FR14_PLAN_IN_OUT;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PLAN_IN_OUT_UNMATCHED INDEX ( AGRMNT_ID );

/*FLAG END TIME*/

UPDATE CC_COBRA.WK_FR14_DATE_CONTROL_LOG
SET END_DT = DATE
   ,END_TM = TIME
WHERE REPORT_DT = (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
;

/*SECTION 11 - FINAL LOAD CHECKS AND UPDATES*/

/*STEP 43: CHECK TO SEE IF DAILY JOB HAS RUN*/


DELETE FROM CC_COBRA.FR14_LOAD_CONTROL WHERE REPORT_DT = (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL);
INSERT INTO CC_COBRA.FR14_LOAD_CONTROL 
SELECT
 REPORT_DT
,START_DT
,START_TM
,END_DT
,END_TM
,( cast( ((end_dt (date, format 'yyyy-mm-dd')) (char(10)) )
                       || ' ' || end_tm as timestamp(0) )

              - cast( ((start_dt (date, format 'yyyy-mm-dd')) (char(10)) )
                         || ' ' || start_tm as timestamp(0) )

              ) day(3) to second as timediff 
,'Y' AS FLAG
FROM CC_COBRA.WK_FR14_DATE_CONTROL_LOG A
WHERE NOT EXISTS (
SELECT NULL
FROM CC_COBRA.FR14_LOAD_CONTROL B
WHERE A.REPORT_DT = B.REPORT_DT)
AND END_TM IS NOT NULL;

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;

/*STEP 44:  SEE IF IT IS THE FIRST WORKING DAY OF THE MONTH AND THE DATE BEING PROCESSED IS THE LAST WORKING DAY OF PRIOR MONTH*/

SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPTOEND;

/*CHECK TO SEE IF LAST MONTHS DATA HAS ALREADY BEEN COPIED TO THE PRIOR MONTH TABLE*/

SELECT TOP 5 AGRMNT_ID, REPORT_DT 
FROM CC_COBRA.FR14_TRANSACTIONS_PM
WHERE REPORT_DT/100 = (
 /*LAST DAY OF PRIOR MONTH/100 EG 11109*/
SELECT (CAST((CALENDAR_DATE/100*100)+1 AS DATE)-1)/100 FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT REPORT_DT FROM  CC_COBRA.WK_FR14_DATE_CONTROL) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH = 1
);

/*FAIL IF IT HAS ALREADY RUN*/

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPTOEND;

/*CHECK TO SEE THE PRIOR WORKING DAY HAS BEEN FLAGGED AS COMPLETED*/

SELECT * FROM CC_COBRA.FR14_LOAD_CONTROL WHERE REPORT_DT = 
(SELECT REPORT_DT 
FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
AND FINISH_CD = 'Y';

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPTOEND;

/*CHECK TO SEE THE ALL THE DAYS IN THE MONTH HAVE BEEN PROCESSED AND FLAGGED AS COMPLETED*/

SELECT *
FROM 
(SELECT COUNT(*) AS REPORT_DAY_VOL
FROM 
(SELECT REPORT_DT FROM CC_COBRA.FR14_LOAD_CONTROL 
 WHERE REPORT_DT/100 = (SELECT REPORT_DT/100 FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
 AND FINISH_CD = 'Y'
 GROUP BY 1) A) T1
JOIN
(SELECT COUNT(*) AS WD_VOL FROM CC_COBRA.GRID_REPORTS_CONTROL
WHERE CALENDAR_DATE/100 = (SELECT REPORT_DT/100 FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
AND NOT ( EXTRACT(MONTH FROM CALENDAR_DATE) = 12
AND EXTRACT(DAY FROM CALENDAR_DATE) = 25 )
) T2
ON T1.REPORT_DAY_VOL = T2.WD_VOL
;

/*FAIL IF NOT ALL DAYS ARE PRESENT*/

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;

/*BACK UP _PM TABLE*/

DELETE FROM CC_COBRA.FR14_TRANSACTIONS_PM_BKUP ALL;
INSERT INTO CC_COBRA.FR14_TRANSACTIONS_PM_BKUP 
SELECT * FROM CC_COBRA.FR14_TRANSACTIONS_PM;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM_BKUP INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM_BKUP COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM_BKUP COLUMN(PLAN_NO);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM_BKUP COLUMN(BW_PLAN_TYPE_CD);

/*CLEAR OUT PRIOR MONTH TABLE*/
DELETE FROM CC_COBRA.FR14_TRANSACTIONS_PM ALL;

/*INSERT CURRENT MONTH TO DATE DATA*/
INSERT INTO CC_COBRA.FR14_TRANSACTIONS_PM
SELECT *
FROM CC_COBRA.FR14_TRANSACTIONS
WHERE REPORT_DT/100 = ( SELECT REPORT_DT/100 FROM  CC_COBRA.WK_FR14_DATE_CONTROL); 


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT TOP 5 AGRMNT_ID, REPORT_DT 
FROM CC_COBRA.FR14_TRANSACTIONS_PM
WHERE REPORT_DT/100 = ( SELECT REPORT_DT/100 FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;

/*DELETE DATA THAT HAS JUST BEEN COPIED*/
DELETE FROM CC_COBRA.FR14_TRANSACTIONS
WHERE REPORT_DT/100 = ( SELECT REPORT_DT/100 FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS COLUMN(PLAN_NO);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS COLUMN(BW_PLAN_TYPE_CD);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM COLUMN(REPORT_DT);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM COLUMN(PLAN_NO);
COLLECT STATS ON CC_COBRA.FR14_TRANSACTIONS_PM COLUMN(BW_PLAN_TYPE_CD);

DELETE FROM CC_COBRA.FR14_PAYMENT_GROUP WHERE REPORT_DT/100 = ( SELECT REPORT_DT/100 FROM  CC_COBRA.WK_FR14_DATE_CONTROL);

INSERT INTO CC_COBRA.FR14_PAYMENT_GROUP
SELECT A.AGRMNT_ID
      ,A.REPORT_DT AS REPORT_DT
      ,MAX(CASE WHEN B.PAYMNT_BAND_CD IN ('A','B','C','D','E','F') THEN 1 ELSE 0 END)
FROM        (SELECT AGRMNT_ID, REPORT_DT
             FROM CC_COBRA.FR14_PLAN_PAYMENTS
             WHERE REPORT_DT/100 = ( SELECT REPORT_DT/100 FROM  CC_COBRA.WK_FR14_DATE_CONTROL)
             AND   (PLAN_PAYMNT_AM <> 0
             OR     PLAN_BT_OUT_AM <> 0
             OR     PLAN_ADJUST_AM <> 0
             OR     PLAN_TRADE_AM <> 0
             )
             GROUP BY 1,2
             ) A 
LEFT JOIN   CC_COBRA.FR11_STATEMENTS B
ON  A.AGRMNT_ID = B.AGRMNT_ID
AND (CAST(((A.REPORT_DT/100*100)+1) AS DATE)-1)/100 = B.STTMNT_MTH/100
GROUP BY 1,2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR14_PAYMENT_GROUP INDEX(AGRMNT_ID) ;
COLLECT STATS ON CC_COBRA.FR14_PAYMENT_GROUP COLUMN(REPORT_DT) ;
COLLECT STATS ON CC_COBRA.FR14_PAYMENT_GROUP COLUMN(FULL_PART_PAY_IN) ;
      
UPDATE CC_COBRA.FR14_TRANSACTIONS_PM
FROM CC_COBRA.FR14_PAYMENT_GROUP A
SET FULL_PART_PAYMNT_AM = CC_COBRA.FR14_TRANSACTIONS_PM.MIN_PAYMNT_AM
WHERE CC_COBRA.FR14_TRANSACTIONS_PM.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.FR14_TRANSACTIONS_PM.REPORT_DT = A.REPORT_DT
AND   A.FULL_PART_PAY_IN = 1 AND CC_COBRA.FR14_TRANSACTIONS_PM.MIN_PAYMNT_AM <> 0
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.FR14_TRANSACTIONS_PM
FROM CC_COBRA.FR14_PAYMENT_GROUP A
SET MIN_PAYMNT_AM = CC_COBRA.FR14_TRANSACTIONS_PM.FULL_PART_PAYMNT_AM
WHERE CC_COBRA.FR14_TRANSACTIONS_PM.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.FR14_TRANSACTIONS_PM.REPORT_DT = A.REPORT_DT
AND   A.FULL_PART_PAY_IN = 0 AND CC_COBRA.FR14_TRANSACTIONS_PM.FULL_PART_PAYMNT_AM <> 0
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.FR14_TRANSACTIONS_PM
FROM CC_COBRA.FR14_PAYMENT_GROUP A
SET MIN_PAYMNT_AM = 0
WHERE CC_COBRA.FR14_TRANSACTIONS_PM.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.FR14_TRANSACTIONS_PM.REPORT_DT = A.REPORT_DT
AND   A.FULL_PART_PAY_IN = 1 AND CC_COBRA.FR14_TRANSACTIONS_PM.MIN_PAYMNT_AM <> 0 AND CC_COBRA.FR14_TRANSACTIONS_PM.FULL_PART_PAYMNT_AM <> 0
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

UPDATE CC_COBRA.FR14_TRANSACTIONS_PM
FROM CC_COBRA.FR14_PAYMENT_GROUP A
SET FULL_PART_PAYMNT_AM = 0
WHERE CC_COBRA.FR14_TRANSACTIONS_PM.AGRMNT_ID = A.AGRMNT_ID
AND   CC_COBRA.FR14_TRANSACTIONS_PM.REPORT_DT = A.REPORT_DT
AND   A.FULL_PART_PAY_IN = 0 AND CC_COBRA.FR14_TRANSACTIONS_PM.FULL_PART_PAYMNT_AM <> 0  AND CC_COBRA.FR14_TRANSACTIONS_PM.MIN_PAYMNT_AM <> 0 
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIPTOEND;

/*PART 2 END*/

UPDATE CC_COBRA.CC_WK_FR14_RUN_STATUS 
SET STATUS = 'C'
WHERE STATUS = '2' 
AND   STATUS_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR14_DATE_CONTROL)
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;


/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR14'
;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT    
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR14';

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR14'
;

.QUIT 0;