/************************************************************************/
/*JOB:      FR09 - BALANCE TRANSACTION RECONCILIATION                   */
/*VERSION:  FR09v14 - fix for L2BS Mess v2                                */
/*DATE VERSION IMPLEMENTED: 2022-02-23                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*C01J02                                                                */
/*C01J03                                                                */
/*C01J04                                                                */
/************************************************************************/

.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;

DATABASE CC_COBRA;

/*STEP 01: INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 02: INITIAL CHECKS TO SEE IF CC_AGREEMENT_ADDED_DATE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J02';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 03: INITIAL CHECKS TO SEE IF TRNSCN_DERVTN_GROUPS IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J03';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*STEP 04: INITIAL CHECKS TO SEE IF CC_EVENTS_TO_EXCLUDE IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J04';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*STEP 05: INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR09';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIPJOB;

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR09'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 06: DATE CONTROL*/

/*
CREATE SET TABLE CC_COBRA.WK_FR09_DAILY_BALANCE_DATES ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      REPORT_DT DATE FORMAT 'YYYY-MM-DD'
      ,PRIOR_REPORT_DT DATE FORMAT 'YYYY-MM-DD')
UNIQUE PRIMARY INDEX ( REPORT_DT );
*/

/*PRE-DELETE DATA IN DATE PARAMETER TABLE*/
DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
           
/*INSERT THE LAST WORKING DAY'S DATE*/

INSERT INTO CC_COBRA.WK_FR09_DAILY_BALANCE_DATES 
SELECT SOURCE_START_DT , PRIOR_WORKDAY_DT
FROM CC_COBRA.CC_COBRA_LOAD_START_DT A
JOIN CC_COBRA.GRID_REPORTS_CONTROL B
ON   A.SOURCE_START_DT = B.CALENDAR_DATE;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
            
COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_DATES
COLUMN(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT * FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES;

.IF ACTIVITYCOUNT = 0 THEN .GOTO FOUNDERROR;



/*STEP 07: COLLECT BALANCES*/

/*
CREATE SET TABLE CC_COBRA.WK_FR09_DAILY_BALANCE_T1 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195'),
      AGRMNT_ID INTEGER,
      LOGO SMALLINT COMPRESS (514 ,520 ,524 ,530 ,540 ,300 ,301 ,304 ,314 ,315 ,320 ,584 ,330 ,331 ,332 ,333 ,334 ,338 ,340 ,344 ,350 ,354 ,355 ,100 ,110 ,380 ,900 ,500 ,505 ),
      VINTAGE_YEAR SMALLINT,
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','F','P','Z'),
      PRIOR_STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','F','P','Z'),
      BLOCK_CODE_1 CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','C','I','L','S','U','W','Y','Z'),
      BLOCK_CODE_2 CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','P','Q','Z'),
      INT_STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','8','A','D','F','T','X','Z'),
      OPENING_BAL DECIMAL(15,2) COMPRESS 0.00 ,
      CLOSING_BAL DECIMAL(15,2) COMPRESS 0.00 ,
      CR_BALANCE CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('N','Y'),
      CLOSING_BAL_EX_CR DECIMAL(15,2) COMPRESS 0.00 ,
      CLOSING_BAL_CR DECIMAL(15,2) COMPRESS 0.00 )
UNIQUE PRIMARY INDEX ( AGRMNT_ID );
*/

/*PRE-DELETE DATA FROM STAGING TABLE*/

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T1 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*CHECK TO SEE IF WE CAN USE DATA FROM C01J15*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIP01;

/*COLLECT STATUS AND BALANCE DATA FROM GRID*/
INSERT INTO CC_COBRA.WK_FR09_DAILY_BALANCE_T1
SELECT 
CCA.ORG_TX
,CCA.AGRMNT_ID 
,CCA.CREDIT_CARD_LOGO_CD
,CASE WHEN CCA.ORIGNL_ADDED_DT < 1130101 THEN 9999
      ELSE (CCA.ORIGNL_ADDED_DT/10000)+1900 
      END AS VINTAGE_YEAR
,CASE WHEN AD.INT_STATUS IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT  THEN 'P'
      WHEN AD.INT_STATUS= 'Z' THEN 'Z'
      WHEN AD.INT_STATUS = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,CASE WHEN ADP.INT_STATUS IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.PRIOR_REPORT_DT  THEN 'P'
      WHEN ADP.INT_STATUS = 'Z' THEN 'Z'
      WHEN ADP.INT_STATUS = 'F' THEN 'F'
      ELSE ' '
      END AS PREV_STATUS
,AD.BC_1
,AD.BC_2
,AD.INT_STATUS
,COALESCE(ADP.ACCONT_BALANC_AM,0) AS OPENING_BAL
,COALESCE(AD.ACCONT_BALANC_AM,0) AS CLOSING_BAL
--GUARDRAIL AMENDS
,CASE WHEN AD.ACCONT_BALANC_AM > 0 THEN 'Y' ELSE 'N' END AS CR_BALANCE
,CASE WHEN AD.ACCONT_BALANC_AM > 0 THEN 0 
			ELSE AD.ACCONT_BALANC_AM  END AS CLOSING_BAL_EX_CR		
,CASE WHEN AD.ACCONT_BALANC_AM <= 0 THEN 0
			ELSE AD.ACCONT_BALANC_AM END AS CLOSING_BAL_CR

FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_DATES DT
ON  ADDED_DT <= DT.REPORT_DT
AND  (CCA.PURGED_DT IS NULL
OR    DT.REPORT_DT < CCA.PURGED_DT) 
JOIN CC_COBRA.CC_ACCOUNT_DAILY AD
ON   CCA.AGRMNT_ID = AD.AGRMNT_ID
AND  DT.REPORT_DT = AD.REPORT_DT
LEFT JOIN CC_COBRA.CC_ACCOUNT_DAILY ADP
ON   CCA.AGRMNT_ID = ADP.AGRMNT_ID
AND  DT.PRIOR_REPORT_DT = ADP.REPORT_DT
;

.IF ACTIVITYCOUNT <> 0 THEN .GOTO SKIP02;

.LABEL SKIP01;

/*COLLECT STATUS AND BALANCE DATA FROM GRID*/
INSERT INTO CC_COBRA.WK_FR09_DAILY_BALANCE_T1
SELECT 
CCA.ORG_TX
,CCA.AGRMNT_ID 
,CCA.CREDIT_CARD_LOGO_CD
,CASE WHEN CCA.ORIGNL_ADDED_DT < 1130101 THEN 9999
      ELSE (CCA.ORIGNL_ADDED_DT/10000)+1900 
      END AS VINTAGE_YEAR
,CASE WHEN ASS.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT  THEN 'P'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS STATUS
,CASE WHEN ASS2.AGRMNT_STATUS_SUMMRY_VL IN ('P','9') THEN 'P'
      WHEN CCA.PURGED_DT <= DT.REPORT_DT-1  THEN 'P'
      WHEN ASS2.AGRMNT_STATUS_SUMMRY_VL = 'Z' THEN 'Z'
      WHEN ASS2.AGRMNT_STATUS_SUMMRY_VL = 'F' THEN 'F'
      ELSE ' '
      END AS PREV_STATUS
,COALESCE(BC1.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(BC2.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(ASS.AGRMNT_STATUS_SUMMRY_VL,' ')
,COALESCE(BALP.BL_SUMMRY_AM,' ') AS OPENING_BAL
,COALESCE(BAL.BL_SUMMRY_AM,' ') AS CLOSING_BAL
--GUARDRAIL AMENDS
,CASE WHEN BAL.BL_SUMMRY_AM > 0 THEN 'Y' ELSE 'N' END AS CR_BALANCE
,CASE WHEN BAL.BL_SUMMRY_AM > 0 THEN 0 
			ELSE BAL.BL_SUMMRY_AM  END AS CLOSING_BAL_EX_CR		
,CASE WHEN BAL.BL_SUMMRY_AM <= 0 THEN 0
			ELSE BAL.BL_SUMMRY_AM END AS CLOSING_BAL_CR

FROM CC_COBRA.CC_AGREEMENT_ADDED_DATE CCA
JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_DATES DT
ON  ADDED_DT <= DT.REPORT_DT
AND  (CCA.PURGED_DT IS NULL
OR    DT.REPORT_DT < CCA.PURGED_DT) 
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS
ON   CCA.AGRMNT_ID = ASS.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN ASS.SOURCE_START_DT AND ASS.SOURCE_END_DT-1
AND  ASS.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY ASS2
ON   CCA.AGRMNT_ID = ASS2.AGRMNT_ID
AND  DT.REPORT_DT-1 BETWEEN ASS2.SOURCE_START_DT AND ASS2.SOURCE_END_DT-1
AND  ASS2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500026'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC1
ON   CCA.AGRMNT_ID = BC1.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN BC1.SOURCE_START_DT AND BC1.SOURCE_END_DT-1
AND  BC1.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500023'
LEFT JOIN GDW_VIEWSX.AGREEMENT_STATUS_SUMMARY BC2
ON   CCA.AGRMNT_ID = BC2.AGRMNT_ID
AND  DT.REPORT_DT BETWEEN BC2.SOURCE_START_DT AND BC2.SOURCE_END_DT-1
AND  BC2.AGRMNT_STATUS_SUMMRY_TYPE_CD = '00500024'
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BAL
ON    CCA.AGRMNT_ID = BAL.AGRMNT_ID
AND   BAL.BL_SUMMRY_AM_CD = '00500003'
AND   DT.REPORT_DT BETWEEN BAL.SOURCE_START_DT AND BAL.SOURCE_END_DT-1
LEFT JOIN  GDW_VIEWSX.CC_AGREEMENT_BALANCE_SUMMARY BALP
ON    CCA.AGRMNT_ID = BALP.AGRMNT_ID
AND   BALP.BL_SUMMRY_AM_CD = '00500003'
AND   DT.REPORT_DT-1 BETWEEN BALP.SOURCE_START_DT AND BALP.SOURCE_END_DT-1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

.LABEL SKIP02;

COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_T1 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 08: COLLECT TXNS*/
/*
CREATE SET TABLE CC_COBRA.WK_FR09_DAILY_BALANCE_T2 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      EVENT_ID BIGINT,
      EVENT_ACTVTY_CD CHAR(8) CHARACTER SET LATIN NOT CASESPECIFIC,
      EVENT_AM DECIMAL(15,2))
PRIMARY INDEX ( AGRMNT_ID );
*/

/*PRE-DELETE DATA FROM STAGING TABLE*/

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T2 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*COLLECT TRANSACTIONAL DATA FOR REPORT DATE - ONLY PROPER TXNS*/
INSERT INTO CC_COBRA.WK_FR09_DAILY_BALANCE_T2
SELECT AGRMNT_ID
      ,EVENT_ID
      ,EVENT_ACTVTY_CD
      ,EVENT_AM
/*USE REGULAR TABLE WHEN BACKLOADING*/     
--FROM       GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST A
FROM CC_COBRA.CC_MONETARY_TRANSACTION_TODAY A
JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_DATES DT
ON   A.SOURCE_START_DT = DT.REPORT_DT
--THE FOLLOWING LIMITS GRID TXNS TO ONES REPORTED ON THE R16
AND NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE B
WHERE A.EVENT_ID = B.EVENT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_T2 INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_T2 COLUMN(EVENT_ACTVTY_CD);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 09: AGGREGATE TO AGRMNT_ID*/
/*
CREATE SET TABLE CC_COBRA.WK_FR09_DAILY_BALANCE_T3 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      AGRMNT_ID INTEGER,
      ADJUSTMENT DECIMAL(15,2) COMPRESS (0),
      PAYMENT DECIMAL(15,2) COMPRESS (0) ,
      OTHER_FEE DECIMAL(15,2) COMPRESS (0) ,
      BTS DECIMAL(15,2) COMPRESS (0) ,
      PROMO_CHQ DECIMAL(15,2) COMPRESS (0) ,
      RETAIL DECIMAL(15,2) COMPRESS (0) ,
      INTEREST DECIMAL(15,2) COMPRESS (0) ,
      BT_FEE DECIMAL(15,2) COMPRESS (0) ,
      TRANSFERS DECIMAL(15,2) COMPRESS (0) ,
      CASH DECIMAL(15,2) COMPRESS (0) ,
      LATE_FEE DECIMAL(15,2) COMPRESS (0) ,
      PPI_FEE DECIMAL(15,2) COMPRESS (0) ,
      RETURNED_PAYMENT_FEE DECIMAL(15,2) COMPRESS (0) ,
      MEMBERSHIP_FEE DECIMAL(15,2) COMPRESS (0) ,
      CASH_ADVANCE_FEE DECIMAL(15,2) COMPRESS (0) ,
      OVERLIMIT_FEE DECIMAL(15,2) COMPRESS (0) ,
      CHARGE_OFF DECIMAL(15,2) COMPRESS (0) ,
      QUASI_CASH DECIMAL(15,2) COMPRESS (0) ,
      WRITE_OFFS DECIMAL(15,2) COMPRESS (0) ,
      SENTINEL_FEE DECIMAL(15,2) COMPRESS (0) ,
      FRAUD DECIMAL(15,2) COMPRESS (0) ,
      FOREX_FEE DECIMAL(15,2) COMPRESS (0) ,
      CONV_CHQ DECIMAL(15,2) COMPRESS (0) ,
      ADJUSTMENT_CT INTEGER COMPRESS (0,1) ,
      PAYMENT_CT INTEGER COMPRESS (0,1) ,
      OTHER_FEE_CT INTEGER COMPRESS (0,1) ,
      BTS_CT INTEGER COMPRESS (0,1) ,
      PROMO_CHQ_CT INTEGER COMPRESS (0,1) ,
      RETAIL_CT INTEGER COMPRESS (0,1) ,
      INTEREST_CT INTEGER COMPRESS (0,1) ,
      BT_FEE_CT INTEGER COMPRESS (0,1) ,
      TRANSFERS_CT INTEGER COMPRESS (0,1) ,
      CASH_CT INTEGER COMPRESS (0,1) ,
      LATE_FEE_CT INTEGER COMPRESS (0,1) ,
      PPI_FEE_CT INTEGER COMPRESS (0,1) ,
      RETURNED_PAYMENT_FEE_CT INTEGER COMPRESS (0,1) ,
      MEMBERSHIP_FEE_CT INTEGER COMPRESS (0,1) ,
      CASH_ADVANCE_FEE_CT INTEGER COMPRESS (0,1) ,
      OVERLIMIT_FEE_CT INTEGER COMPRESS (0,1) ,
      CHARGE_OFF_CT INTEGER COMPRESS (0,1) ,
      QUASI_CASH_CT INTEGER COMPRESS (0,1) ,
      WRITE_OFFS_CT INTEGER COMPRESS (0,1) ,
      SENTINEL_FEE_CT INTEGER COMPRESS (0,1) ,
      FRAUD_CT INTEGER COMPRESS (0,1) ,
      FOREX_FEE_CT INTEGER COMPRESS (0,1) ,
      CONV_CHQ_CT INTEGER COMPRESS (0,1) ,
      TOTAL_TXN DECIMAL(15,2))
UNIQUE PRIMARY INDEX ( AGRMNT_ID );
*/

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T3 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR09_DAILY_BALANCE_T3
SELECT AGRMNT_ID
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'ADJUSTMENT' THEN EVENT_AM 
          WHEN TRNSCN_DERVTN_GRP = 'CASHBACK'   THEN EVENT_AM ELSE 0 END) AS ADJUSTMENT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'PAYMENT' THEN EVENT_AM ELSE 0 END) AS PAYMENT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'OTHER FEE' THEN EVENT_AM ELSE 0 END) AS OTHER_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT' AND A.EVENT_ACTVTY_CD NOT IN ('00508305','00508306','00506931','00506932') THEN EVENT_AM ELSE 0 END) AS BTS
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT' AND A.EVENT_ACTVTY_CD IN ('00508305','00508306') THEN EVENT_AM ELSE 0 END) AS PROMO_CHQ
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'RETAIL' THEN EVENT_AM ELSE 0 END) AS RETAIL
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'INTEREST' THEN EVENT_AM ELSE 0 END) AS INTEREST
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT FEE' THEN EVENT_AM ELSE 0 END) AS BT_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'TRANSFERS' THEN EVENT_AM ELSE 0 END) AS TRANSFERS
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CASH' THEN EVENT_AM ELSE 0 END) AS CASH
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'LATE FEE' THEN EVENT_AM ELSE 0 END) AS LATE_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'PPI FEE' THEN EVENT_AM ELSE 0 END) AS PPI_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'RETURNED PAYMENT FEE' THEN EVENT_AM ELSE 0 END) AS RETURNED_PAYMENT_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'MEMBERSHIP FEE' THEN EVENT_AM ELSE 0 END) AS MEMBERSHIP_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CASH ADVANCE FEE' THEN EVENT_AM ELSE 0 END) AS CASH_ADVANCE_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'OVERLIMIT FEE' THEN EVENT_AM ELSE 0 END) AS OVERLIMIT_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CHARGE-OFF' THEN EVENT_AM ELSE 0 END) AS CHARGE_OFF
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'QUASI' THEN EVENT_AM ELSE 0 END) AS QUASI_CASH
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'WRITE-OFFS' THEN EVENT_AM ELSE 0 END) AS WRITE_OFFS
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'SENTINEL' THEN EVENT_AM ELSE 0 END) AS SENTINEL_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'FRAUD' THEN EVENT_AM ELSE 0 END) AS FRAUD
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'FOREX FEE' THEN EVENT_AM ELSE 0 END) AS FOREX_FEE
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT' AND A.EVENT_ACTVTY_CD IN ('00506931','00506932') THEN EVENT_AM ELSE 0 END) AS CONV_CHQ
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'ADJUSTMENT' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS ADJUSTMENT_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'PAYMENT' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS PAYMENT_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'OTHER FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS OTHER_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT' AND A.EVENT_ACTVTY_CD NOT IN ('00508305','00508306','00506931','00506932') AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS BTS_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT' AND A.EVENT_ACTVTY_CD IN ('00508305','00508306') AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS PROMO_CHQ_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'RETAIL' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS RETAIL_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'INTEREST' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS INTEREST_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS BT_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'TRANSFERS' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS TRANSFERS_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CASH' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS CASH_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'LATE FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS LATE_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'PPI FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS PPI_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'RETURNED PAYMENT FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS RETURNED_PAYMENT_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'MEMBERSHIP FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS MEMBERSHIP_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CASH ADVANCE FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS CASH_ADVANCE_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'OVERLIMIT FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS OVERLIMIT_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'CHARGE-OFF' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS CHARGE_OFF_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'QUASI' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS QUASI_CASH_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'WRITE-OFFS' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS WRITE_OFFS_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'SENTINEL' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS SENTINEL_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'FRAUD' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS FRAUD_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'FOREX FEE' AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS FOREX_FEE_CT
,SUM(CASE WHEN TRNSCN_DERVTN_GRP = 'BT' AND A.EVENT_ACTVTY_CD IN ('00506931','00506932') AND REVRSL_IN = 0 THEN 1 ELSE 0 END) AS CONV_CHQ_CT
,SUM(EVENT_AM) AS TOTAL_TXN 
FROM
CC_COBRA.WK_FR09_DAILY_BALANCE_T2 A
JOIN CC_COBRA.TRNSCN_DERVTN_GROUPS C
ON   A.EVENT_ACTVTY_CD = C.EVENT_ACTVTY_CD
GROUP BY 1
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_T3 INDEX(AGRMNT_ID);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 10: AGGREGATE DATA FOR GUARDRAIL*/

/*STEP 10A: AGGREGATE DATA BY VINTAGE FOR GUARDRAIL AMENDS*/

/*
CREATE SET TABLE CC_COBRA.FR09_DAILY_BALANCE_VINTAGE_FR ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195'),
      LOGO SMALLINT COMPRESS (514 ,520 ,524 ,530 ,540 ,300 ,301 ,304 ,314 ,315 ,320 ,584 ,330 ,331 ,332 ,333 ,334 ,338 ,340 ,344 ,350 ,354 ,355 ,100 ,110 ,380 ,900 ,500 ,505 ),
      VINTAGE_YEAR SMALLINT COMPRESS (9999 ,2013 ,2014 ,2015 ,2016 ,2017 ,2018 ),
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','F','Z'),
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      CR_BALANCE CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','N','Y'),
      OPENING_BAL DECIMAL(15,2),
      CLOSING_BAL DECIMAL(15,2),
      CLOSING_BAL_EX_CR DECIMAL(15,2),
      CLOSING_BAL_CR DECIMAL(15,2),
      ADJUSTMENT DECIMAL(15,2),
      PAYMENT DECIMAL(15,2),
      OTHER_FEE DECIMAL(15,2),
      BTS DECIMAL(15,2),
      RETAIL DECIMAL(15,2),
      INTEREST DECIMAL(15,2),
      BT_FEE DECIMAL(15,2),
      TRANSFERS DECIMAL(15,2),
      CASH DECIMAL(15,2),
      LATE_FEE DECIMAL(15,2),
      PPI_FEE DECIMAL(15,2),
      RETURNED_PAYMENT_FEE DECIMAL(15,2),
      MEMBERSHIP_FEE DECIMAL(15,2),
      CASH_ADVANCE_FEE DECIMAL(15,2),
      OVERLIMIT_FEE DECIMAL(15,2),
      CHARGE_OFF DECIMAL(15,2),
      QUASI_CASH DECIMAL(15,2),
      WRITE_OFFS DECIMAL(15,2),
      SENTINEL_FEE DECIMAL(15,2),
      FRAUD DECIMAL(15,2),
      FOREX_FEE DECIMAL(15,2),
      CONV_CHQ DECIMAL(15,2),
      PROMO_CHQ DECIMAL(15,2),
      ADJUSTMENT_CT INTEGER,
      PAYMENT_CT INTEGER,
      OTHER_FEE_CT INTEGER,
      BTS_CT INTEGER,
      RETAIL_CT INTEGER,
      INTEREST_CT INTEGER,
      BT_FEE_CT INTEGER,
      TRANSFERS_CT INTEGER,
      CASH_CT INTEGER,
      LATE_FEE_CT INTEGER,
      PPI_FEE_CT INTEGER,
      RETURNED_PAYMENT_FEE_CT INTEGER,
      MEMBERSHIP_FEE_CT INTEGER,
      CASH_ADVANCE_FEE_CT INTEGER,
      OVERLIMIT_FEE_CT INTEGER,
      CHARGE_OFF_CT INTEGER,
      QUASI_CASH_CT INTEGER,
      WRITE_OFFS_CT INTEGER,
      SENTINEL_FEE_CT INTEGER,
      FRAUD_CT INTEGER,
      FOREX_FEE_CT INTEGER,
      CONV_CHQ_CT INTEGER,
      PROMO_CHQ_CT INTEGER,
      VOLUME INTEGER)
PRIMARY INDEX ( REPORT_DT );
*/


/*DELETE DATA FROM FINAL TABLE WHERE EQUAL TO REPORT DATE - IN CASE OF RE-RUNS*/

DELETE FROM CC_COBRA.FR09_DAILY_BALANCE_VINTAGE_FR
WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT FINAL AGGREGATED DATA*/
INSERT INTO CC_COBRA.FR09_DAILY_BALANCE_VINTAGE_FR
SELECT *
FROM 
(SELECT
ORG_TX
,LOGO
,VINTAGE_YEAR
,STATUS
,DT.REPORT_DT
,CR_BALANCE
,SUM(CASE WHEN PRIOR_STATUS = 'Z' THEN 0 ELSE OPENING_BAL END) AS OPENING_BAL
,SUM(CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL END) AS CLOSING_BAL
,SUM(CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL_EX_CR END) AS CLOSING_BAL_EX_CR
,SUM(CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL_CR END) AS CLOSING_BAL_CR
,SUM(ZEROIFNULL(ADJUSTMENT)) AS ADJUSTMENT
/*
,SUM(ZEROIFNULL(CASE WHEN 
		               (CASE WHEN PRIOR_STATUS = 'Z' THEN 0 ELSE OPENING_BAL END)
		              -(CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL END)=0 AND TOTAL_TXN <> 0 
		                THEN 0 
		             ELSE ADJUSTMENT END)) AS ADJUSTMENT
*/
,SUM(ZEROIFNULL(PAYMENT)) AS PAYMENT
,SUM(ZEROIFNULL(OTHER_FEE)) AS OTHER_FEE
,SUM(ZEROIFNULL(BTS)) AS BTS
,SUM(ZEROIFNULL(RETAIL)) AS RETAIL
,SUM(ZEROIFNULL(INTEREST)) AS INTEREST
,SUM(ZEROIFNULL(BT_FEE)) AS BT_FEE
,SUM(ZEROIFNULL(TRANSFERS)) AS TRANSFERS
,SUM(ZEROIFNULL(CASH)) AS CASH
,SUM(ZEROIFNULL(LATE_FEE)) AS LATE_FEE
,SUM(ZEROIFNULL(PPI_FEE)) AS PPI_FEE
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE)) AS RETURNED_PAYMENT_FEE
,SUM(ZEROIFNULL(MEMBERSHIP_FEE)) AS MEMBERSHIP_FEE
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE)) AS CASH_ADVANCE_FEE
,SUM(ZEROIFNULL(OVERLIMIT_FEE)) AS OVERLIMIT_FEE
,SUM(ZEROIFNULL(CHARGE_OFF)) AS CHARGE_OFF
,SUM(ZEROIFNULL(QUASI_CASH)) AS QUASI_CASH
,SUM(ZEROIFNULL(WRITE_OFFS)) AS WRITE_OFFS
,SUM(ZEROIFNULL(SENTINEL_FEE)) AS SENTINEL_FEE
,SUM(ZEROIFNULL(FRAUD)) AS FRAUD
,SUM(ZEROIFNULL(FOREX_FEE)) AS FOREX_FEE
,SUM(ZEROIFNULL(CONV_CHQ)) AS CONV_CHQ
,SUM(ZEROIFNULL(PROMO_CHQ)) AS PROMO_CHQ

,SUM(ZEROIFNULL(ADJUSTMENT_CT)) AS ADJUSTMENT_CT
,SUM(ZEROIFNULL(PAYMENT_CT)) AS PAYMENT_CT
,SUM(ZEROIFNULL(OTHER_FEE_CT)) AS OTHER_FEE_CT
,SUM(ZEROIFNULL(BTS_CT)) AS BTS_CT
,SUM(ZEROIFNULL(RETAIL_CT)) AS RETAIL_CT
,SUM(ZEROIFNULL(INTEREST_CT)) AS INTEREST_CT
,SUM(ZEROIFNULL(BT_FEE_CT)) AS BT_FEE_CT
,SUM(ZEROIFNULL(TRANSFERS_CT)) AS TRANSFERS_CT
,SUM(ZEROIFNULL(CASH_CT)) AS CASH_CT
,SUM(ZEROIFNULL(LATE_FEE_CT)) AS LATE_FEE_CT
,SUM(ZEROIFNULL(PPI_FEE_CT)) AS PPI_FEE_CT
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE_CT)) AS RETURNED_PAYMENT_FEE_CT
,SUM(ZEROIFNULL(MEMBERSHIP_FEE_CT)) AS MEMBERSHIP_FEE_CT
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE_CT)) AS CASH_ADVANCE_FEE_CT
,SUM(ZEROIFNULL(OVERLIMIT_FEE_CT)) AS OVERLIMIT_FEE_CT
,SUM(ZEROIFNULL(CHARGE_OFF_CT)) AS CHARGE_OFF_CT
,SUM(ZEROIFNULL(QUASI_CASH_CT)) AS QUASI_CASH_CT
,SUM(ZEROIFNULL(WRITE_OFFS_CT)) AS WRITE_OFFS_CT
,SUM(ZEROIFNULL(SENTINEL_FEE_CT)) AS SENTINEL_FEE_CT
,SUM(ZEROIFNULL(FRAUD_CT)) AS FRAUD_CT
,SUM(ZEROIFNULL(FOREX_FEE_CT)) AS FOREX_FEE_CT
,SUM(ZEROIFNULL(CONV_CHQ_CT)) AS CONV_CHQ_CT
,SUM(ZEROIFNULL(PROMO_CHQ_CT)) AS PROMO_CHQ_CT
,COUNT(*) AS VOLUME

FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T1 B
CROSS JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_DATES DT
LEFT JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_T3 T
ON B.AGRMNT_ID = T.AGRMNT_ID
GROUP BY 1,2,3,4,5,6
) A
WHERE STATUS <> 'P'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR09_DAILY_BALANCE_VINTAGE_FR INDEX ( REPORT_DT );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*STEP 10B: - AGGREGATE BACK UP TO ORIGINAL AGGREGATIONS FOR GUARDRAIL*/

/*DELETE DATA FROM FINAL TABLE WHERE EQUAL TO REPORT DATE - IN CASE OF RE-RUNS*/

/* 
CREATE SET TABLE CC_COBRA.FR09_DAILY_BALANCE_FR ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      ORG_TX CHAR(3)  CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195'),
      LOGO SMALLINT COMPRESS (514 ,520 ,524 ,530 ,540 ,300 ,301 ,304 ,314 ,315 ,320 ,584 ,330 ,331 ,332 ,333 ,334 ,338 ,340 ,344 ,350 ,354 ,355 ,100 ,110 ,380 ,900 ,500 ,505 ),
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','F','Z'),
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
	  CR_BALANCE CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','Y','N'),
      OPENING_BAL DECIMAL(15,2),
      CLOSING_BAL DECIMAL(15,2),
	  CLOSING_BAL_EX_CR DECIMAL(15,2),
	  CLOSING_BAL_CR DECIMAL(15,2),
	  ADJUSTMENT DECIMAL(15,2),
      PAYMENT DECIMAL(15,2),
      OTHER_FEE DECIMAL(15,2),
      BTS DECIMAL(15,2),
      RETAIL DECIMAL(15,2),
      INTEREST DECIMAL(15,2),
      BT_FEE DECIMAL(15,2),
      TRANSFERS DECIMAL(15,2),
      CASH DECIMAL(15,2),
      LATE_FEE DECIMAL(15,2),
      PPI_FEE DECIMAL(15,2),
      RETURNED_PAYMENT_FEE DECIMAL(15,2),
      MEMBERSHIP_FEE DECIMAL(15,2),
      CASH_ADVANCE_FEE DECIMAL(15,2),
      OVERLIMIT_FEE DECIMAL(15,2),
      CHARGE_OFF DECIMAL(15,2),
      QUASI_CASH DECIMAL(15,2),
      WRITE_OFFS DECIMAL(15,2),
      SENTINEL_FEE DECIMAL(15,2),
      FRAUD DECIMAL(15,2),
      FOREX_FEE DECIMAL(15,2),
      CONV_CHQ DECIMAL(15,2),
      PROMO_CHQ DECIMAL(15,2),
      ADJUSTMENT_CT INTEGER,
      PAYMENT_CT INTEGER,
      OTHER_FEE_CT INTEGER,
      BTS_CT INTEGER,
      RETAIL_CT INTEGER,
      INTEREST_CT INTEGER,
      BT_FEE_CT INTEGER,
      TRANSFERS_CT INTEGER,
      CASH_CT INTEGER,
      LATE_FEE_CT INTEGER,
      PPI_FEE_CT INTEGER,
      RETURNED_PAYMENT_FEE_CT INTEGER,
      MEMBERSHIP_FEE_CT INTEGER,
      CASH_ADVANCE_FEE_CT INTEGER,
      OVERLIMIT_FEE_CT INTEGER,
      CHARGE_OFF_CT INTEGER,
      QUASI_CASH_CT INTEGER,
      WRITE_OFFS_CT INTEGER,
      SENTINEL_FEE_CT INTEGER,
      FRAUD_CT INTEGER,
      FOREX_FEE_CT INTEGER,
      CONV_CHQ_CT INTEGER,
      PROMO_CHQ_CT INTEGER,
      VOLUME INTEGER)
PRIMARY INDEX ( REPORT_DT );
*/

DELETE FROM CC_COBRA.FR09_DAILY_BALANCE_FR 
WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT FINAL AGGREGATED DATA*/
INSERT INTO CC_COBRA.FR09_DAILY_BALANCE_FR
SELECT
ORG_TX
,LOGO
,STATUS
,REPORT_DT
,CR_BALANCE
,SUM(OPENING_BAL) AS OPENING_BAL
,SUM(CLOSING_BAL) AS CLOSING_BAL
,SUM(CLOSING_BAL_EX_CR) AS CLOSING_BAL_EX_CR
,SUM(CLOSING_BAL_CR) AS CLOSING_BAL_CR
,SUM(ZEROIFNULL(ADJUSTMENT)) AS ADJUSTMENT
,SUM(ZEROIFNULL(PAYMENT)) AS PAYMENT
,SUM(ZEROIFNULL(OTHER_FEE)) AS OTHER_FEE
,SUM(ZEROIFNULL(BTS)) AS BTS
,SUM(ZEROIFNULL(RETAIL)) AS RETAIL
,SUM(ZEROIFNULL(INTEREST)) AS INTEREST
,SUM(ZEROIFNULL(BT_FEE)) AS BT_FEE
,SUM(ZEROIFNULL(TRANSFERS)) AS TRANSFERS
,SUM(ZEROIFNULL(CASH)) AS CASH
,SUM(ZEROIFNULL(LATE_FEE)) AS LATE_FEE
,SUM(ZEROIFNULL(PPI_FEE)) AS PPI_FEE
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE)) AS RETURNED_PAYMENT_FEE
,SUM(ZEROIFNULL(MEMBERSHIP_FEE)) AS MEMBERSHIP_FEE
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE)) AS CASH_ADVANCE_FEE
,SUM(ZEROIFNULL(OVERLIMIT_FEE)) AS OVERLIMIT_FEE
,SUM(ZEROIFNULL(CHARGE_OFF)) AS CHARGE_OFF
,SUM(ZEROIFNULL(QUASI_CASH)) AS QUASI_CASH
,SUM(ZEROIFNULL(WRITE_OFFS)) AS WRITE_OFFS
,SUM(ZEROIFNULL(SENTINEL_FEE)) AS SENTINEL_FEE
,SUM(ZEROIFNULL(FRAUD)) AS FRAUD
,SUM(ZEROIFNULL(FOREX_FEE)) AS FOREX_FEE
,SUM(ZEROIFNULL(CONV_CHQ)) AS CONV_CHQ
,SUM(ZEROIFNULL(PROMO_CHQ)) AS PROMO_CHQ

,SUM(ZEROIFNULL(ADJUSTMENT_CT)) AS ADJUSTMENT_CT
,SUM(ZEROIFNULL(PAYMENT_CT)) AS PAYMENT_CT
,SUM(ZEROIFNULL(OTHER_FEE_CT)) AS OTHER_FEE_CT
,SUM(ZEROIFNULL(BTS_CT)) AS BTS_CT
,SUM(ZEROIFNULL(RETAIL_CT)) AS RETAIL_CT
,SUM(ZEROIFNULL(INTEREST_CT)) AS INTEREST_CT
,SUM(ZEROIFNULL(BT_FEE_CT)) AS BT_FEE_CT
,SUM(ZEROIFNULL(TRANSFERS_CT)) AS TRANSFERS_CT
,SUM(ZEROIFNULL(CASH_CT)) AS CASH_CT
,SUM(ZEROIFNULL(LATE_FEE_CT)) AS LATE_FEE_CT
,SUM(ZEROIFNULL(PPI_FEE_CT)) AS PPI_FEE_CT
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE_CT)) AS RETURNED_PAYMENT_FEE_CT
,SUM(ZEROIFNULL(MEMBERSHIP_FEE_CT)) AS MEMBERSHIP_FEE_CT
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE_CT)) AS CASH_ADVANCE_FEE_CT
,SUM(ZEROIFNULL(OVERLIMIT_FEE_CT)) AS OVERLIMIT_FEE_CT
,SUM(ZEROIFNULL(CHARGE_OFF_CT)) AS CHARGE_OFF_CT
,SUM(ZEROIFNULL(QUASI_CASH_CT)) AS QUASI_CASH_CT
,SUM(ZEROIFNULL(WRITE_OFFS_CT)) AS WRITE_OFFS_CT
,SUM(ZEROIFNULL(SENTINEL_FEE_CT)) AS SENTINEL_FEE_CT
,SUM(ZEROIFNULL(FRAUD_CT)) AS FRAUD_CT
,SUM(ZEROIFNULL(FOREX_FEE_CT)) AS FOREX_FEE_CT
,SUM(ZEROIFNULL(CONV_CHQ_CT)) AS CONV_CHQ_CT
,SUM(ZEROIFNULL(PROMO_CHQ_CT)) AS PROMO_CHQ_CT
,SUM(VOLUME) AS VOLUME

FROM CC_COBRA.FR09_DAILY_BALANCE_VINTAGE_FR B
WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES) --added 20181025 JM due to duplicate records being inserted from 1st Jan 2018-22 May 2018
GROUP BY 1,2,3,4,5
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
                
COLLECT STATS ON CC_COBRA.FR09_DAILY_BALANCE_FR INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 11: AGGREGATE DATA WITHOUT GUARDRAIL AMENDS*/

/*STEP 11B: AGGREGATE DATA WITH VINTAGE DATA*/

/*
CREATE SET TABLE CC_COBRA.FR09_DAILY_BALANCE_VINTAGE ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195'),
      LOGO SMALLINT COMPRESS (514 ,520 ,524 ,530 ,540 ,300 ,301 ,304 ,314 ,315 ,320 ,584 ,330 ,331 ,332 ,333 ,334 ,338 ,340 ,344 ,350 ,354 ,355 ,100 ,110 ,380 ,900 ,500 ,505 ),
      VINTAGE_YEAR SMALLINT COMPRESS (9999 ,2013 ,2014 ,2015 ,2016 ,2017 ,2018 ),
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','F','Z'),
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      OPENING_BAL DECIMAL(15,2),
      CLOSING_BAL DECIMAL(15,2),
      ADJUSTMENT DECIMAL(15,2),
      PAYMENT DECIMAL(15,2),
      OTHER_FEE DECIMAL(15,2),
      BTS DECIMAL(15,2),
      RETAIL DECIMAL(15,2),
      INTEREST DECIMAL(15,2),
      BT_FEE DECIMAL(15,2),
      TRANSFERS DECIMAL(15,2),
      CASH DECIMAL(15,2),
      LATE_FEE DECIMAL(15,2),
      PPI_FEE DECIMAL(15,2),
      RETURNED_PAYMENT_FEE DECIMAL(15,2),
      MEMBERSHIP_FEE DECIMAL(15,2),
      CASH_ADVANCE_FEE DECIMAL(15,2),
      OVERLIMIT_FEE DECIMAL(15,2),
      CHARGE_OFF DECIMAL(15,2),
      QUASI_CASH DECIMAL(15,2),
      WRITE_OFFS DECIMAL(15,2),
      SENTINEL_FEE DECIMAL(15,2),
      FRAUD DECIMAL(15,2),
      FOREX_FEE DECIMAL(15,2),
      CONV_CHQ DECIMAL(15,2),
      PROMO_CHQ DECIMAL(15,2),
      ADJUSTMENT_CT INTEGER,
      PAYMENT_CT INTEGER,
      OTHER_FEE_CT INTEGER,
      BTS_CT INTEGER,
      RETAIL_CT INTEGER,
      INTEREST_CT INTEGER,
      BT_FEE_CT INTEGER,
      TRANSFERS_CT INTEGER,
      CASH_CT INTEGER,
      LATE_FEE_CT INTEGER,
      PPI_FEE_CT INTEGER,
      RETURNED_PAYMENT_FEE_CT INTEGER,
      MEMBERSHIP_FEE_CT INTEGER,
      CASH_ADVANCE_FEE_CT INTEGER,
      OVERLIMIT_FEE_CT INTEGER,
      CHARGE_OFF_CT INTEGER,
      QUASI_CASH_CT INTEGER,
      WRITE_OFFS_CT INTEGER,
      SENTINEL_FEE_CT INTEGER,
      FRAUD_CT INTEGER,
      FOREX_FEE_CT INTEGER,
      CONV_CHQ_CT INTEGER,
      PROMO_CHQ_CT INTEGER,
      VOLUME INTEGER)
PRIMARY INDEX ( REPORT_DT );
*/


/*DELETE DATA FROM FINAL TABLE WHERE EQUAL TO REPORT DATE - IN CASE OF RE-RUNS*/

DELETE FROM CC_COBRA.FR09_DAILY_BALANCE_VINTAGE
WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*INSERT FINAL AGGREGATED DATA*/
INSERT INTO CC_COBRA.FR09_DAILY_BALANCE_VINTAGE
SELECT *
FROM 
(SELECT
ORG_TX
,LOGO
,VINTAGE_YEAR
,STATUS
,DT.REPORT_DT
,SUM(CASE WHEN PRIOR_STATUS = 'Z' THEN 0 ELSE OPENING_BAL END) AS OPENING_BAL
,SUM(CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL END) AS CLOSING_BAL
,SUM(ZEROIFNULL(ADJUSTMENT)) AS ADJUSTMENT
/*
,SUM(ZEROIFNULL(CASE WHEN 
		               (CASE WHEN PRIOR_STATUS = 'Z' THEN 0 ELSE OPENING_BAL END)
		              -(CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL END)=0 AND TOTAL_TXN <> 0 
		                THEN 0 
		             ELSE ADJUSTMENT END)) AS ADJUSTMENT
*/
,SUM(ZEROIFNULL(PAYMENT)) AS PAYMENT
,SUM(ZEROIFNULL(OTHER_FEE)) AS OTHER_FEE
,SUM(ZEROIFNULL(BTS)) AS BTS
,SUM(ZEROIFNULL(RETAIL)) AS RETAIL
,SUM(ZEROIFNULL(INTEREST)) AS INTEREST
,SUM(ZEROIFNULL(BT_FEE)) AS BT_FEE
,SUM(ZEROIFNULL(TRANSFERS)) AS TRANSFERS
,SUM(ZEROIFNULL(CASH)) AS CASH
,SUM(ZEROIFNULL(LATE_FEE)) AS LATE_FEE
,SUM(ZEROIFNULL(PPI_FEE)) AS PPI_FEE
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE)) AS RETURNED_PAYMENT_FEE
,SUM(ZEROIFNULL(MEMBERSHIP_FEE)) AS MEMBERSHIP_FEE
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE)) AS CASH_ADVANCE_FEE
,SUM(ZEROIFNULL(OVERLIMIT_FEE)) AS OVERLIMIT_FEE
,SUM(ZEROIFNULL(CHARGE_OFF)) AS CHARGE_OFF
,SUM(ZEROIFNULL(QUASI_CASH)) AS QUASI_CASH
,SUM(ZEROIFNULL(WRITE_OFFS)) AS WRITE_OFFS
,SUM(ZEROIFNULL(SENTINEL_FEE)) AS SENTINEL_FEE
,SUM(ZEROIFNULL(FRAUD)) AS FRAUD
,SUM(ZEROIFNULL(FOREX_FEE)) AS FOREX_FEE
,SUM(ZEROIFNULL(CONV_CHQ)) AS CONV_CHQ
,SUM(ZEROIFNULL(PROMO_CHQ)) AS PROMO_CHQ

,SUM(ZEROIFNULL(ADJUSTMENT_CT)) AS ADJUSTMENT_CT
,SUM(ZEROIFNULL(PAYMENT_CT)) AS PAYMENT_CT
,SUM(ZEROIFNULL(OTHER_FEE_CT)) AS OTHER_FEE_CT
,SUM(ZEROIFNULL(BTS_CT)) AS BTS_CT
,SUM(ZEROIFNULL(RETAIL_CT)) AS RETAIL_CT
,SUM(ZEROIFNULL(INTEREST_CT)) AS INTEREST_CT
,SUM(ZEROIFNULL(BT_FEE_CT)) AS BT_FEE_CT
,SUM(ZEROIFNULL(TRANSFERS_CT)) AS TRANSFERS_CT
,SUM(ZEROIFNULL(CASH_CT)) AS CASH_CT
,SUM(ZEROIFNULL(LATE_FEE_CT)) AS LATE_FEE_CT
,SUM(ZEROIFNULL(PPI_FEE_CT)) AS PPI_FEE_CT
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE_CT)) AS RETURNED_PAYMENT_FEE_CT
,SUM(ZEROIFNULL(MEMBERSHIP_FEE_CT)) AS MEMBERSHIP_FEE_CT
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE_CT)) AS CASH_ADVANCE_FEE_CT
,SUM(ZEROIFNULL(OVERLIMIT_FEE_CT)) AS OVERLIMIT_FEE_CT
,SUM(ZEROIFNULL(CHARGE_OFF_CT)) AS CHARGE_OFF_CT
,SUM(ZEROIFNULL(QUASI_CASH_CT)) AS QUASI_CASH_CT
,SUM(ZEROIFNULL(WRITE_OFFS_CT)) AS WRITE_OFFS_CT
,SUM(ZEROIFNULL(SENTINEL_FEE_CT)) AS SENTINEL_FEE_CT
,SUM(ZEROIFNULL(FRAUD_CT)) AS FRAUD_CT
,SUM(ZEROIFNULL(FOREX_FEE_CT)) AS FOREX_FEE_CT
,SUM(ZEROIFNULL(CONV_CHQ_CT)) AS CONV_CHQ_CT
,SUM(ZEROIFNULL(PROMO_CHQ_CT)) AS PROMO_CHQ_CT
,COUNT(*) AS VOLUME

FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T1 B
CROSS JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_DATES DT
LEFT JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_T3 T
ON B.AGRMNT_ID = T.AGRMNT_ID
GROUP BY 1,2,3,4,5
) A
WHERE STATUS <> 'P'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

                
COLLECT STATS ON CC_COBRA.FR09_DAILY_BALANCE_VINTAGE INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 11B: - AGGREGATE BACK UP TO ORIGINAL AGGREGATIONS*/

/*DELETE DATA FROM FINAL TABLE WHERE EQUAL TO REPORT DATE - IN CASE OF RE-RUNS*/

/* 
CREATE SET TABLE CC_COBRA.FR09_DAILY_BALANCE ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      ORG_TX CHAR(3)  CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195'),
      LOGO SMALLINT COMPRESS (514 ,520 ,524 ,530 ,540 ,300 ,301 ,304 ,314 ,315 ,320 ,584 ,330 ,331 ,332 ,333 ,334 ,338 ,340 ,344 ,350 ,354 ,355 ,100 ,110 ,380 ,900 ,500 ,505 ),
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS (' ','F','Z'),
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      OPENING_BAL DECIMAL(15,2),
      CLOSING_BAL DECIMAL(15,2),
      ADJUSTMENT DECIMAL(15,2),
      PAYMENT DECIMAL(15,2),
      OTHER_FEE DECIMAL(15,2),
      BTS DECIMAL(15,2),
      RETAIL DECIMAL(15,2),
      INTEREST DECIMAL(15,2),
      BT_FEE DECIMAL(15,2),
      TRANSFERS DECIMAL(15,2),
      CASH DECIMAL(15,2),
      LATE_FEE DECIMAL(15,2),
      PPI_FEE DECIMAL(15,2),
      RETURNED_PAYMENT_FEE DECIMAL(15,2),
      MEMBERSHIP_FEE DECIMAL(15,2),
      CASH_ADVANCE_FEE DECIMAL(15,2),
      OVERLIMIT_FEE DECIMAL(15,2),
      CHARGE_OFF DECIMAL(15,2),
      QUASI_CASH DECIMAL(15,2),
      WRITE_OFFS DECIMAL(15,2),
      SENTINEL_FEE DECIMAL(15,2),
      FRAUD DECIMAL(15,2),
      FOREX_FEE DECIMAL(15,2),
      CONV_CHQ DECIMAL(15,2),
      PROMO_CHQ DECIMAL(15,2),
      ADJUSTMENT_CT INTEGER,
      PAYMENT_CT INTEGER,
      OTHER_FEE_CT INTEGER,
      BTS_CT INTEGER,
      RETAIL_CT INTEGER,
      INTEREST_CT INTEGER,
      BT_FEE_CT INTEGER,
      TRANSFERS_CT INTEGER,
      CASH_CT INTEGER,
      LATE_FEE_CT INTEGER,
      PPI_FEE_CT INTEGER,
      RETURNED_PAYMENT_FEE_CT INTEGER,
      MEMBERSHIP_FEE_CT INTEGER,
      CASH_ADVANCE_FEE_CT INTEGER,
      OVERLIMIT_FEE_CT INTEGER,
      CHARGE_OFF_CT INTEGER,
      QUASI_CASH_CT INTEGER,
      WRITE_OFFS_CT INTEGER,
      SENTINEL_FEE_CT INTEGER,
      FRAUD_CT INTEGER,
      FOREX_FEE_CT INTEGER,
      CONV_CHQ_CT INTEGER,
      PROMO_CHQ_CT INTEGER,
      VOLUME INTEGER)
PRIMARY INDEX ( REPORT_DT );
*/

DELETE FROM CC_COBRA.FR09_DAILY_BALANCE 
WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*INSERT FINAL AGGREGATED DATA*/
INSERT INTO CC_COBRA.FR09_DAILY_BALANCE
SELECT
ORG_TX
,LOGO
,STATUS
,REPORT_DT
,SUM(OPENING_BAL) AS OPENING_BAL
,SUM(CLOSING_BAL) AS CLOSING_BAL
,SUM(ZEROIFNULL(ADJUSTMENT)) AS ADJUSTMENT
,SUM(ZEROIFNULL(PAYMENT)) AS PAYMENT
,SUM(ZEROIFNULL(OTHER_FEE)) AS OTHER_FEE
,SUM(ZEROIFNULL(BTS)) AS BTS
,SUM(ZEROIFNULL(RETAIL)) AS RETAIL
,SUM(ZEROIFNULL(INTEREST)) AS INTEREST
,SUM(ZEROIFNULL(BT_FEE)) AS BT_FEE
,SUM(ZEROIFNULL(TRANSFERS)) AS TRANSFERS
,SUM(ZEROIFNULL(CASH)) AS CASH
,SUM(ZEROIFNULL(LATE_FEE)) AS LATE_FEE
,SUM(ZEROIFNULL(PPI_FEE)) AS PPI_FEE
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE)) AS RETURNED_PAYMENT_FEE
,SUM(ZEROIFNULL(MEMBERSHIP_FEE)) AS MEMBERSHIP_FEE
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE)) AS CASH_ADVANCE_FEE
,SUM(ZEROIFNULL(OVERLIMIT_FEE)) AS OVERLIMIT_FEE
,SUM(ZEROIFNULL(CHARGE_OFF)) AS CHARGE_OFF
,SUM(ZEROIFNULL(QUASI_CASH)) AS QUASI_CASH
,SUM(ZEROIFNULL(WRITE_OFFS)) AS WRITE_OFFS
,SUM(ZEROIFNULL(SENTINEL_FEE)) AS SENTINEL_FEE
,SUM(ZEROIFNULL(FRAUD)) AS FRAUD
,SUM(ZEROIFNULL(FOREX_FEE)) AS FOREX_FEE
,SUM(ZEROIFNULL(CONV_CHQ)) AS CONV_CHQ
,SUM(ZEROIFNULL(PROMO_CHQ)) AS PROMO_CHQ

,SUM(ZEROIFNULL(ADJUSTMENT_CT)) AS ADJUSTMENT_CT
,SUM(ZEROIFNULL(PAYMENT_CT)) AS PAYMENT_CT
,SUM(ZEROIFNULL(OTHER_FEE_CT)) AS OTHER_FEE_CT
,SUM(ZEROIFNULL(BTS_CT)) AS BTS_CT
,SUM(ZEROIFNULL(RETAIL_CT)) AS RETAIL_CT
,SUM(ZEROIFNULL(INTEREST_CT)) AS INTEREST_CT
,SUM(ZEROIFNULL(BT_FEE_CT)) AS BT_FEE_CT
,SUM(ZEROIFNULL(TRANSFERS_CT)) AS TRANSFERS_CT
,SUM(ZEROIFNULL(CASH_CT)) AS CASH_CT
,SUM(ZEROIFNULL(LATE_FEE_CT)) AS LATE_FEE_CT
,SUM(ZEROIFNULL(PPI_FEE_CT)) AS PPI_FEE_CT
,SUM(ZEROIFNULL(RETURNED_PAYMENT_FEE_CT)) AS RETURNED_PAYMENT_FEE_CT
,SUM(ZEROIFNULL(MEMBERSHIP_FEE_CT)) AS MEMBERSHIP_FEE_CT
,SUM(ZEROIFNULL(CASH_ADVANCE_FEE_CT)) AS CASH_ADVANCE_FEE_CT
,SUM(ZEROIFNULL(OVERLIMIT_FEE_CT)) AS OVERLIMIT_FEE_CT
,SUM(ZEROIFNULL(CHARGE_OFF_CT)) AS CHARGE_OFF_CT
,SUM(ZEROIFNULL(QUASI_CASH_CT)) AS QUASI_CASH_CT
,SUM(ZEROIFNULL(WRITE_OFFS_CT)) AS WRITE_OFFS_CT
,SUM(ZEROIFNULL(SENTINEL_FEE_CT)) AS SENTINEL_FEE_CT
,SUM(ZEROIFNULL(FRAUD_CT)) AS FRAUD_CT
,SUM(ZEROIFNULL(FOREX_FEE_CT)) AS FOREX_FEE_CT
,SUM(ZEROIFNULL(CONV_CHQ_CT)) AS CONV_CHQ_CT
,SUM(ZEROIFNULL(PROMO_CHQ_CT)) AS PROMO_CHQ_CT
,SUM(VOLUME) AS VOLUME

FROM CC_COBRA.FR09_DAILY_BALANCE_VINTAGE B
WHERE REPORT_DT IN (SELECT REPORT_DT FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES) --added 20181025 JM due to duplicate records being inserted from 1st Jan 2018-22 May 2018
GROUP BY 1,2,3,4
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
                
COLLECT STATS ON CC_COBRA.FR09_DAILY_BALANCE INDEX(REPORT_DT);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;



/*STEP 12: CHECK TO SEE IF THERE ARE ANY DISCREPANCIES - THERE SHOULD BE NONE AT THE ORG LEVEL */
/*SO THIS STEP JUST CHECKS THE ORG LEVEL - AND THERE IS ANOTHER STEP THAT CHECKS THE LOGO LEVEL */
/*AT THE JOBPASSED STEP*/

SELECT ORG_TX, STATUS, REPORT_DT,
OPENING_BAL-CLOSING_BAL-(TXNS*-1) AS VARIANCE
FROM
(SELECT 
ORG_TX
,STATUS
,REPORT_DT
,SUM(OPENING_BAL) AS OPENING_BAL
,SUM(CLOSING_BAL) AS CLOSING_BAL
,SUM((
ADJUSTMENT
+PAYMENT
+OTHER_FEE
+BTS
+RETAIL
+INTEREST
+BT_FEE
+TRANSFERS
+CASH
+LATE_FEE
+PPI_FEE
+RETURNED_PAYMENT_FEE
+MEMBERSHIP_FEE
+CASH_ADVANCE_FEE
+OVERLIMIT_FEE
+CHARGE_OFF
+QUASI_CASH
+WRITE_OFFS
+SENTINEL_FEE
+FRAUD
+FOREX_FEE
+CONV_CHQ
+PROMO_CHQ)) AS TXNS
FROM CC_COBRA.FR09_DAILY_BALANCE 
GROUP BY 1,2,3
) A
WHERE REPORT_DT = (SELECT REPORT_DT FROM CC_COBRA.WK_FR09_DAILY_BALANCE_DATES) AND 
OPENING_BAL-CLOSING_BAL<>TXNS*-1
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO JOBPASSED;

/*STEP 13: THIS WILL PULL THE OFFENDING ACCOUNTS IF THERE ARE DISCREPANCIES*/

/* OLD CODE TO PICK UP VARIANCES
SELECT T1.*
, OPENING_BAL + ZEROIFNULL(EVENT_AM) - CLOSING_BAL AS VARIANCE_AMT
, CCA.CREDIT_CARD_ACCONT_NO
, CASE WHEN OPENING_BAL = 0 THEN 'POSSIBLE TRADE-INVESTIGATE' 
       ELSE 'TRANSACTION ERROR' END AS ACTION
FROM 
(SELECT
B.AGRMNT_ID
,STATUS
,PRIOR_STATUS
,INT_STATUS
,CASE WHEN PRIOR_STATUS = 'Z' THEN 0 ELSE OPENING_BAL END AS OPENING_BAL
,CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL END AS CLOSING_BAL
,CASE WHEN (CASE WHEN PRIOR_STATUS = 'Z' THEN 0 ELSE OPENING_BAL END)
-(CASE WHEN STATUS = 'Z' THEN 0 ELSE CLOSING_BAL END)=0 AND TOTAL_TXN <> 0 
   THEN 0 ELSE ADJUSTMENT END
+PAYMENT
+OTHER_FEE
+BTS
+RETAIL
+INTEREST
+BT_FEE
+TRANSFERS
+CASH
+LATE_FEE
+PPI_FEE
+RETURNED_PAYMENT_FEE
+MEMBERSHIP_FEE
+CASH_ADVANCE_FEE
+OVERLIMIT_FEE
+CHARGE_OFF
+QUASI_CASH
+WRITE_OFFS
+SENTINEL_FEE
+FRAUD
+FOREX_FEE
+CONV_CHQ
+PROMO_CHQ AS EVENT_AM

FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T1 B
JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_T3 T
ON B.AGRMNT_ID = T.AGRMNT_ID
) T1
JOIN GDW_VIEWS.CREDIT_CARD_AGREEMENT CCA
ON   T1.AGRMNT_ID = CCA.AGRMNT_ID
AND  CCA.SOURCE_END_DT = '3500/12/31'

WHERE STATUS <> 'P' 
AND STATUS <> 'Z' 
AND PRIOR_STATUS <> 'Z'
AND INT_STATUS <> 'T'
AND OPENING_BAL + ZEROIFNULL(EVENT_AM) <> CLOSING_BAL
;
*/

/*STEP 14: COLLECT ANY ACCOUNTS WHERE THE OPENING BAL + TXN <> CLOSING BAL*/

/* 
CREATE SET TABLE CC_COBRA.WK_FR09_DAILY_BALANCE_T4 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT
     (
      ORG_TX CHAR(3)  CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('120','190','195'),
      AGRMNT_ID INTEGER,
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS('P','Z','F',' '),
      PRIOR_STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS('P','Z','F',' '),
      BLOCK_CODE_1 CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('C','','L','Z','W','I','Y','U','S'),
      BLOCK_CODE_2 CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ( '','Q','Z','P'),
      INT_STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('','F','A','D','8','X','Z','T'),
      OPENING_BAL DECIMAL(15,2) COMPRESS 0,
      CLOSING_BAL DECIMAL(15,2) COMPRESS 0,
      DB_TXNS DECIMAL(15,2) COMPRESS 0,
      CR_TXNS DECIMAL(15,2) COMPRESS 0,
      VAR_AM  DECIMAL(15,2) COMPRESS 0,
      RELATD_AGRMNT_ID INT,
      ADDED_DT DATE)
UNIQUE PRIMARY INDEX ( AGRMNT_ID );
*/

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T4 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR09_DAILY_BALANCE_T4
SELECT 
T1.ORG_TX
,T1.AGRMNT_ID
,T1.STATUS
,T1.PRIOR_STATUS
,T1.BLOCK_CODE_1
,T1.BLOCK_CODE_2
,T1.INT_STATUS
,T1.OPENING_BAL
,T1.CLOSING_BAL
,ZEROIFNULL(T2.DB_TXNS)
,ZEROIFNULL(T2.CR_TXNS)
,(T1.OPENING_BAL+ZEROIFNULL(T2.DB_TXNS)+ZEROIFNULL(T2.CR_TXNS))-T1.CLOSING_BAL AS VAR_AM
,AR.RELATD_AGRMNT_ID
,AD.ADDED_DT

FROM   CC_COBRA.WK_FR09_DAILY_BALANCE_T1 T1
LEFT JOIN   (SELECT AGRMNT_ID
            , SUM(CASE WHEN EVENT_AM < 0 THEN EVENT_AM ELSE 0 END) AS DB_TXNS
            , SUM(CASE WHEN EVENT_AM > 0 THEN EVENT_AM ELSE 0 END) AS CR_TXNS
         FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T2
       GROUP BY 1) T2
ON     T1.AGRMNT_ID = T2.AGRMNT_ID
LEFT JOIN 
		(select 
		AGRMNT_ID
		,RELATD_AGRMNT_ID
		from
		GDW_VIEWS.AGREEMENT_RELATIONSHIP
		where 
		AGRMNT_RLTNSP_TYPE_CD = '00500001') AR
	ON     T1.AGRMNT_ID = AR.AGRMNT_ID
LEFT JOIN CC_COBRA.CC_AGREEMENT_ADDED_DATE AD
ON     T1.AGRMNT_ID = AD.AGRMNT_ID
WHERE  (T1.OPENING_BAL+ZEROIFNULL(T2.DB_TXNS)+ZEROIFNULL(T2.CR_TXNS)) <> T1.CLOSING_BAL
AND     T1.INT_STATUS <> 'Z'
;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_T4 INDEX ( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

/*
CREATE TABLE CC_COBRA.WK_FR09_DAILY_BALANCE_T5 (
AGRMNT_ID INT
,RELATD_AGRMNT_ID INT )
UNIQUE PRIMARY INDEX(AGRMNT_ID)
INDEX(RELATD_AGRMNT_ID);
*/

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T5 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

INSERT INTO CC_COBRA.WK_FR09_DAILY_BALANCE_T5
SELECT A.AGRMNT_ID, B.AGRMNT_ID 
FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T4 A
JOIN CC_COBRA.WK_FR09_DAILY_BALANCE_T4 B
ON   A.RELATD_AGRMNT_ID = B.AGRMNT_ID
AND  A.VAR_AM+B.VAR_AM = 0;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_T5 INDEX(AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
COLLECT STATS ON CC_COBRA.WK_FR09_DAILY_BALANCE_T5 INDEX(RELATD_AGRMNT_ID);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T4
WHERE AGRMNT_ID IN (SELECT AGRMNT_ID FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T5);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T4
WHERE AGRMNT_ID IN (SELECT RELATD_AGRMNT_ID FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T5);
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT AGRMNT_ID, VAR_AM FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T4;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T5 ALL; 
/*KEEP DATA IN T4 FOR TESTING LATER IF NECESSARY*/
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*STEP 15: COMPLETE LOG TABLE WHEN A VARIANCE HAS BEEN FOUND*/

/*TEMP FORCE TO COMPLETE - RUN MANUALLY OR UNCOMMENT TO FORCE A COMPLETE, IF RUNNING MANUALLY DON'T RUN FR09 AGAIN!*/

/*Eynon 20220223 - uncommented code below to force through*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR09'
;


/*COMMENT THE FOLLOWING UPDATE OUT IF THE ABOVE FORCE IS USED*/

/*Eynon 20220223 - commented out code below to force through*/

/*UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR09'
;*/


.QUIT ERRORCODE;

.LABEL JOBPASSED;

/*

/*DELETE DATA IN WORK TABLES IF RUN OK*/

DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T1 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T2 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;
DELETE FROM CC_COBRA.WK_FR09_DAILY_BALANCE_T3 ALL;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;


/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = (SELECT START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR09'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

SELECT GRID_LOAD_ID, CURRENT_BUS_DT, CURRENT_LOAD_DT   
FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'FR09';


.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERROR;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR09'
;

.QUIT 0;

