/************************************************************************/
/*JOB:      FR04 - Balance by Rate (BBR)                                */
/*VERSION:  FR04v16 - DEPLOY GR CHANGES - INCLUSIVE OF NEW PROMO FLAG   */
/*DATE VERSION IMPLEMENTED: 2019-05-15                                  */
/*DEPENDENCIES:                                                         */
/*C01J01                                                                */
/*FR15D                                                                 */
/*C01J15                                                                */
/************************************************************************/
/*
20180105CA - Karen/Melanie want all ZIBBs split out (with exception of IZIBBs)
*/
.SET ERRORLEVEL (2641,3603) SEVERITY 4, UNKNOWN SEVERITY 8

SET QUERY_BAND = 'ApplicationName=CC_Finance_daily_run;JobID=GRFD043;Worktype=TripleR;Version=LBG;' FOR SESSION;
   
DATABASE CC_COBRA;

/*STEP 00: CHECK PRIOR JOBS FOR COMPLETION*/

/*INITIAL CHECKS TO SEE IF DAILY LOAD IS SUCCESSFUL*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J01';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;


/*INITIAL CHECKS TO SEE IF FR15 DAILY IS SUCCESSFUL - NEEDED FOR BW TYPE CD*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR15D';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF C01J15 DAILY IS SUCCESSFUL - NEEDED FOR BALANCES ETC*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'C01J15';

.IF ACTIVITYCOUNT = 0 THEN .GOTO GRIDERROR;

/*INITIAL CHECKS TO SEE IF THIS JOB HAS ALREADY RUN SUCCESSFULLY FOR LAST COMPLETED MONTH*/

SELECT * FROM CC_COBRA.CC_COBRA_LOAD_LOG 
WHERE CURRENT_BUS_DT = (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
AND   GRID_LOAD_ID = 'FR04';

.IF ACTIVITYCOUNT <> 0 THEN .GOTO MEPROC;



/***************************/
/* SECTION 1               */
/* DAILY REPORTING         */
/***************************/

/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR04'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

/*SECTION 1 STEP 01 DATE CONTROL*/

/*UPDATE THE REPORT DATE TO THE FIRST DAY OF THE PRIOR MONTH*/

/* 
CREATE SET TABLE CC_COBRA.WK_FR04_BBR_MTD_DATES ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      REPORT_DT DATE FORMAT 'YY/MM/DD'
     ,CAL_DAY DATE FORMAT 'YYYY-MM-DD'
     ,DAY_OF_WEEK SMALLINT
     ,MONTH_END_DT DATE)
PRIMARY INDEX ( REPORT_DT )
INDEX ( CAL_DAY );
*/

DELETE FROM CC_COBRA.WK_FR04_BBR_MTD_DATES ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

/* THIS CODE ENSURES THAT ALL WEEKDAYS THAT ARE REQUIRED FOR THE MONTH (INCLUDING FRIDAYS OF THE PRIOR MONTH) ARE CALCULATED*/

INSERT INTO CC_COBRA.WK_FR04_BBR_MTD_DATES
SELECT 
  CASE WHEN DAY_OF_WEEK = 1 THEN CALENDAR_DATE - 2
       WHEN DAY_OF_WEEK = 7 THEN CALENDAR_DATE - 1 
       ELSE CALENDAR_DATE  
  END AS REPORT_DT
,  CALENDAR_DATE AS CAL_DAY
, DAY_OF_WEEK
, ADD_MONTHS(CAST(((CALENDAR_DATE/100*100)+1) AS DATE),1)-1 AS MONTH_END_DT
FROM SYS_CALENDAR.CALENDAR 
WHERE CALENDAR_DATE BETWEEN (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT)
                    AND (SELECT CASE WHEN DAY_OF_WEEK = 6 AND (SOURCE_START_DT + 2)/100 =  SOURCE_START_DT/100 THEN SOURCE_START_DT + 2
                    				 WHEN DAY_OF_WEEK = 6 AND (SOURCE_START_DT + 1)/100 =  SOURCE_START_DT/100 THEN SOURCE_START_DT + 1
                                     ELSE SOURCE_START_DT END AS SOURCE_END_DT
                         FROM CC_COBRA.CC_COBRA_LOAD_START_DT A
                         JOIN SYS_CALENDAR.CALENDAR B
                         ON   A.SOURCE_START_DT = B.CALENDAR_DATE)
;

/*INSERT FOR CHRISTMAS DAY*/

INSERT INTO CC_COBRA.WK_FR04_BBR_MTD_DATES
SELECT 
  CASE WHEN DAY_OF_WEEK = 6 THEN CALENDAR_DATE + 3
       WHEN DAY_OF_WEEK BETWEEN 2 AND 5 THEN CALENDAR_DATE + 1 
  END  AS REPORT_DT
, CALENDAR_DATE AS CAL_DAY
, CASE WHEN DAY_OF_WEEK = 6 THEN 2
       WHEN DAY_OF_WEEK BETWEEN 2 AND 5 THEN DAY_OF_WEEK + 1 
  END DAY_OF_WEEK
, ADD_MONTHS(CAST(((CALENDAR_DATE/100*100)+1) AS DATE),1)-1 AS MONTH_END_DT
FROM SYS_CALENDAR.CALENDAR 
WHERE CALENDAR_DATE = (SELECT SOURCE_START_DT-1
                    FROM CC_COBRA.CC_COBRA_LOAD_START_DT T1
                    JOIN SYS_CALENDAR.CALENDAR T2
                    ON   T1.SOURCE_START_DT = T2.CALENDAR_DATE
                    AND  T2.MONTH_OF_YEAR = 12
                    AND  T2.DAY_OF_MONTH = 26
                    AND  T2.DAY_OF_WEEK BETWEEN 4 AND 6)
/*WHEN XMAS FALLS ON A MON (BOXING DAY = TUESDAY)*/
OR CALENDAR_DATE = (SELECT SOURCE_START_DT-4
                    FROM CC_COBRA.CC_COBRA_LOAD_START_DT T1
                    JOIN SYS_CALENDAR.CALENDAR T2
                    ON   T1.SOURCE_START_DT = T2.CALENDAR_DATE
                    AND  T2.MONTH_OF_YEAR = 12
                    AND  T2.DAY_OF_MONTH = 26
                    AND  T2.DAY_OF_WEEK = 3)
/*WHEN XMAS FALLS ON A FRI (BANK HOL BOXING DAY IS A MONDAY*/
OR CALENDAR_DATE = (SELECT SOURCE_START_DT-4
                    FROM CC_COBRA.CC_COBRA_LOAD_START_DT T1
                    JOIN SYS_CALENDAR.CALENDAR T2
                    ON   T1.SOURCE_START_DT = T2.CALENDAR_DATE
                    AND  T2.MONTH_OF_YEAR = 12
                    AND  T2.DAY_OF_MONTH = 28
                    AND  T2.DAY_OF_WEEK = 2)
;
     
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;


COLLECT STATS ON CC_COBRA.WK_FR04_BBR_MTD_DATES INDEX(REPORT_DT);
COLLECT STATS ON CC_COBRA.WK_FR04_BBR_MTD_DATES INDEX(CAL_DAY);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

SELECT * FROM  CC_COBRA.WK_FR04_BBR_MTD_DATES ORDER BY 2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

/*SECTION 1 STEP 02 COLLECT INTEREST TRANSACTIONS*/

/*
CREATE SET TABLE CC_COBRA.WK_FR04_MTD_INT_TXNS_T1 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      AGRMNT_ID INTEGER,
      EVENT_ID BIGINT,
      PLAN_NO CHAR(5) NOT NULL,
      SOURCE_START_DT DATE FORMAT 'YYYY/MM/DD',
      EVENT_AM DECIMAL(15,2))
PRIMARY INDEX ( AGRMNT_ID );
*/

DELETE FROM CC_COBRA.WK_FR04_MTD_INT_TXNS_T1 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

INSERT INTO CC_COBRA.WK_FR04_MTD_INT_TXNS_T1
SELECT 
	A.AGRMNT_ID
,   A.EVENT_ID
,	SUBSTR(DF.FEATUR_TX,4,5) 
,	A.SOURCE_START_DT
,   A.EVENT_AM

FROM GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST A
JOIN CC_COBRA.WK_FR04_BBR_MTD_DATES D
ON   A.SOURCE_START_DT = D.CAL_DAY
AND  A.EVENT_ACTVTY_CD IN (SELECT EVENT_ACTVTY_CD FROM CC_COBRA.TRNSCN_DERVTN_GROUPS WHERE TRNSCN_DERVTN_GRP = 'INTEREST')
JOIN  GDW_VIEWSX.AGREEMENT_FEATURE_EVENT AFE
ON    A.EVENT_ID = AFE.EVENT_ID
LEFT JOIN  GDW_VIEWSX.DESCRIPTIVE_FEATURE DF
ON         AFE.FEATUR_ID = DF.FEATUR_ID
AND        DF.EFFCTV_DT IS NULL
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

COLLECT STATS ON CC_COBRA.WK_FR04_MTD_INT_TXNS_T1 INDEX ( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

DELETE FROM CC_COBRA.WK_FR04_MTD_INT_TXNS_T1 
WHERE EXISTS (
SELECT NULL
FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE B
WHERE CC_COBRA.WK_FR04_MTD_INT_TXNS_T1.EVENT_ID = B.EVENT_ID)
;
.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

/*
CREATE SET TABLE CC_COBRA.WK_FR04_MTD_INT_TXNS_T2 ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      AGRMNT_ID INTEGER,
      FEATUR_ID INT,
      SOURCE_START_DT DATE FORMAT 'YYYY/MM/DD',
      EVENT_AM DECIMAL(15,2))
PRIMARY INDEX ( AGRMNT_ID );
*/

DELETE FROM  CC_COBRA.WK_FR04_MTD_INT_TXNS_T2 ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

INSERT INTO CC_COBRA.WK_FR04_MTD_INT_TXNS_T2
SELECT 
	A.AGRMNT_ID
,   C.FEATUR_ID
,	A.SOURCE_START_DT
,   SUM(A.EVENT_AM)

FROM CC_COBRA.WK_FR04_MTD_INT_TXNS_T1 A
JOIN 
(SELECT AGRMNT_ID
       ,FEATUR_ID
       ,PLAN_NO
       ,REPORT_DT
       ,PLAN_BALANC_AM
       ,RANK () OVER (PARTITION BY A.AGRMNT_ID, A.PLAN_NO, A.REPORT_DT ORDER BY A.PLAN_BALANC_AM, A.FEATUR_ID)  AS SEQ
 FROM  CC_COBRA.CC_ACCOUNT_FEATURE_DAILY A
) C
ON A.AGRMNT_ID = C.AGRMNT_ID
AND A.PLAN_NO = C.PLAN_NO
AND A.SOURCE_START_DT = C.REPORT_DT
AND C.SEQ = 1
GROUP BY 1,2,3;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

COLLECT STATS ON CC_COBRA.WK_FR04_MTD_INT_TXNS_T2 INDEX ( AGRMNT_ID );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

/*SECTION 1 STEP 03 WORK TABLE FOR EFFICIENCY*/

DELETE FROM  CC_COBRA.WK_FR04_BBR ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

INSERT INTO CC_COBRA.WK_FR04_BBR
SELECT     
	   DC.CAL_DAY AS REPORT_DT
      ,AD.ORG_TX
      ,AD.CREDIT_CARD_LOGO_CD
      ,COALESCE(S.SCHEME, 'U') AS CARD_SCHEME_TX
      ,AD.AGRMNT_ID
      ,CAF.FEATUR_ID
      ,CAST(CAF.PLAN_NO AS CHAR(5))
      ,CAD.BC_1
      ,CAD.BC_2
      ,CAD.INT_STATUS
      ,CAD.WAIVE_INT_FLAG
      ,CASE WHEN (CAD.BC_1 = 'I' 
            OR CAD.BC_2 = 'I')
            AND CAD.INT_STATUS <> 'Z' THEN 99.999
            ELSE CAF.PLAN_AIR
       END 
      ,CASE WHEN CAD.INT_STATUS IN ('Z') THEN 'Z'
            WHEN CAD.INT_STATUS IN ('F') THEN 'S'
            WHEN CAD.BC_1 = 'I' 
            OR CAD.BC_2 = 'I' THEN 'I'
            WHEN (CAD.BC_1 = 'F' 
            OR CAD.BC_2 = 'F') AND CAF.PLAN_AIR = 5.784 THEN 'F'
            ELSE ' '
       END    
      ,CAF.PLAN_BALANC_AM * -1 
, CASE WHEN CAF.ITO_EFFCTV_DT <= DC.CAL_DAY+30 THEN 1 ELSE 0 END AS PROMO_30DAYEXP /* 20190515PG - ADDED IN V16		*/
FROM  		CC_COBRA.CC_AGREEMENT_ADDED_DATE AD

JOIN  		CC_COBRA.WK_FR04_BBR_MTD_DATES DC
ON    		AD.ADDED_DT <= DC.REPORT_DT
AND   		(AD.PURGED_DT IS NULL OR DC.REPORT_DT < AD.PURGED_DT)

JOIN  		CC_COBRA.CC_ACCOUNT_DAILY CAD
ON    		AD.AGRMNT_ID = CAD.AGRMNT_ID
AND   		DC.REPORT_DT = CAD.REPORT_DT

JOIN  		CC_COBRA.CC_ACCOUNT_FEATURE_DAILY CAF
ON    		AD.AGRMNT_ID = CAF.AGRMNT_ID
AND   		DC.REPORT_DT = CAF.REPORT_DT

JOIN  	    CC_COBRA.FR14_PRODUCT_SCHEME S
ON     		AD.CREDIT_CARD_LOGO_CD = S.LOGO_VL
AND    		AD.ORG_TX = S.ORG_TX
;


.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

COLLECT STATS ON CC_COBRA.WK_FR04_BBR INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR04_BBR INDEX(PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

/*SECTION 1 STEP 04 AGGREGATION INTO MAIN STORAGE TABLE*/

/*
CREATE SET TABLE CC_COBRA.FR04_BBR_MTD ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      CREDIT_CARD_LOGO_CD SMALLINT,
      CARD_SCHEME_TX CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('A','M','V'),
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC,
      WAIVE_INT_FLAG BYTEINT COMPRESS(0,1),
      INTEREST_RATE DECIMAL(5,3),
      BALANC_TYPE_CD CHAR(6) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('BIBB  ','CHRDSP','CIBB  ','CIMPRD','ISTAT ','NEW   ','PHRDSP','PIBB  ','PIMPRD','RHRDSP','RIBB  ','RIMPRD','RNIBB ','ZZZZZZ'),
      BALANCE_AM DECIMAL(15,2) COMPRESS 0.00 ,
      INTEREST_AM DECIMAL(15,2) COMPRESS 0.00 ,
      VOLUME INTEGER COMPRESS (1 ,2 )
	  PROMO_30DAYEXP SMALLINT COMPRESS (0 ,1 ))
PRIMARY INDEX ( REPORT_DT ,ORG_TX ,CREDIT_CARD_LOGO_CD ,PLAN_NO ,
STATUS ,INTEREST_RATE );
*/

DELETE FROM CC_COBRA.FR04_BBR_MTD WHERE REPORT_DT IN (
SELECT REPORT_DT FROM CC_COBRA.WK_FR04_BBR_MTD_DATES) ;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

INSERT INTO CC_COBRA.FR04_BBR_MTD
SELECT     
	   A.REPORT_DT 
      ,A.ORG_TX
      ,A.CREDIT_CARD_LOGO_CD
      ,A.CARD_SCHEME_TX
      ,A.PLAN_NO
      ,A.STATUS
      ,CASE WHEN A.WAIVE_INT_FLAG <> 0 THEN 1 ELSE 0 END
      ,A.INTEREST_RATE
      ,COALESCE (LU.MIA_BALANC_TYPE_CD, 'NEW') AS BALANC_TYPE_CD --JAYNE - ADDED SPLIT THAT CHRIS PUT IN INTO THE LOOKUP TO AVOID CASE STATEMENTS 
	  --,COALESCE (CASE WHEN PT.NEW_BALANC_TYPE_CD IN ('PZIBB','PIBB','MIBB','MZIBB') THEN LU.BALANC_TYPE_CD ELSE LU.MIA_BALANC_TYPE_CD END, 'NEW') AS BALANC_TYPE_CD --20180105CA	-	change requested by KH+MS
	  --cont...  they want PIBB split to PZIBB and PIBB, MTs split out of BIBB/BZIBB and everything else to stay same
	  --,COALESCE (LU.MIA_BALANC_TYPE_CD, 'NEW') AS BALANC_TYPE_CD --EYNON 2017-11-10.
      --,COALESCE(LU.PREV_BALANC_TYPE_CD, 'NEW') AS BALANC_TYPE_CD  --change JM 2017-05-19
      ,SUM(ZEROIFNULL(A.BALANCE_AM)) AS BALANCE_AM
      ,SUM(ZEROIFNULL(EVENT_AM)) AS INT_AM
      ,COUNT(*) AS VOLUME
      , PROMO_30DAYEXP /* 20190515PG - ADDED IN V16        */
FROM  		CC_COBRA.WK_FR04_BBR A

JOIN 		CC_COBRA.CC_PLAN_LOOKUP PL
ON     		A.PLAN_NO = PL.PLAN_NO 
AND    		A.ORG_TX = PL.ORG_TX

LEFT JOIN 	CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE PT
ON 			A.AGRMNT_ID = PT.AGRMNT_ID  
AND 		A.FEATUR_ID = PT.FEATUR_ID  
AND 		A.REPORT_DT BETWEEN PT.SOURCE_START_DT AND PT.SOURCE_END_DT - 1

LEFT JOIN   CC_COBRA.FR15_BALANC_TYPE_CD_LOOKUP LU --change JM 2017-05-19
ON          PT.NEW_BALANC_TYPE_CD = LU.BALANC_TYPE_CD

LEFT JOIN   CC_COBRA.WK_FR04_MTD_INT_TXNS_T2 I
ON 			A.AGRMNT_ID = I.AGRMNT_ID  
AND 		A.FEATUR_ID = I.FEATUR_ID   
AND         A.REPORT_DT = I.SOURCE_START_DT 
GROUP BY 1,2,3,4,5,6,7,8,9, 13 /* 20190515PG - AMENDED IN V16        */       
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

COLLECT STATS ON CC_COBRA.FR04_BBR_MTD  INDEX( REPORT_DT ,ORG_TX ,CREDIT_CARD_LOGO_CD ,PLAN_NO ,STATUS ,INTEREST_RATE );

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

DELETE FROM CC_COBRA.WK_FR04_BBR ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;


/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = DATE
   , CURRENT_BUS_DT = (SELECT MAX(REPORT_DT) FROM CC_COBRA.WK_FR04_BBR_MTD_DATES)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR04'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRMTD;

/***************************/
/* SECTION 2               */
/* FOR MONTH END REPORTING */
/***************************/

.LABEL MEPROC;

/*CHECK TO SEE IF PROCESSING GREATER THAN THE FIRST WORKING DAY OF THE MONTH - THIS IS AIMED AT RUNNING WD2, BUT IF THE DATA ISN'T THERE IT WILL TRY AGAIN*/

SELECT * FROM CC_COBRA.GRID_REPORTS_CONTROL 
WHERE (SELECT SOURCE_START_DT FROM CC_COBRA.CC_COBRA_LOAD_START_DT) = PRIOR_WORKDAY_DT
AND WORKDAY_OF_MONTH >= 1;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPME;

/*INITIAL CHECKS TO SEE IF C01J16 EVENT_ID-FEATUR_ID ALLOCATION IS SUCCESSFUL AND THIS JOB NEEDS TO BE PROCESSED STILL (THERE IS A DATE TO BE PROCESSED LESS THAN CURRENT BUS DATE FOR C01J16)*/

SELECT *
FROM CC_COBRA.CC_COBRA_LOAD_LOG A
JOIN CC_COBRA.GRID_REPORTS_CONTROL B
ON   A.GRID_LOAD_ID = 'FR04R'
AND  B.WORKDAY_OF_MONTH = 1
AND  B.PRIOR_WORKDAY_DT > A.CURRENT_BUS_DT
JOIN CC_COBRA.CC_COBRA_LOAD_LOG C
ON   C.GRID_LOAD_ID = 'C01J16'
AND  B.PRIOR_WORKDAY_DT <= C.CURRENT_BUS_DT
;

.IF ACTIVITYCOUNT = 0 THEN .GOTO SKIPME;


/*SET THE STATUS START DT/TM*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
FROM CC_COBRA.CC_COBRA_LOAD_STATUS A
SET RUN_ID = A.RUN_ID
,   LOAD_STATUS = 'I'
,   LOAD_START_DT = DATE
,   LOAD_START_TM = TIME
WHERE CC_COBRA.CC_COBRA_LOAD_LOG.GRID_LOAD_ID = 'FR04R'
AND   A.RUN_STATUS = 'I'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

/*SECTION 2 STEP 01 DATE CONTROL*/

/*UPDATE THE REPORT DATE TO THE FIRST DAY OF THE PRIOR MONTH*/

/* 
CREATE SET TABLE CC_COBRA.WK_FR04_BBR_ME_DATES ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      REPORT_DT DATE FORMAT 'YY/MM/DD'
     ,CAL_DAY DATE FORMAT 'YYYY-MM-DD'
     ,DAY_OF_WEEK SMALLINT
     ,MONTH_END_DT DATE)
PRIMARY INDEX ( REPORT_DT )
INDEX ( CAL_DAY );
*/

DELETE FROM CC_COBRA.WK_FR04_BBR_ME_DATES ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

/* THIS CODE ENSURES THAT ALL WEEKDAYS THAT ARE REQUIRED FOR THE MONTH (INCLUDING FRIDAYS OF THE PRIOR MONTH) ARE CALCULATED*/

INSERT INTO CC_COBRA.WK_FR04_BBR_ME_DATES
SELECT 
  CASE 
       WHEN MONTH_OF_YEAR = 12 AND DAY_OF_MONTH = 25 AND DAY_OF_WEEK BETWEEN 3 AND 6 THEN CALENDAR_DATE-1
       WHEN MONTH_OF_YEAR = 12 AND DAY_OF_MONTH = 25 AND DAY_OF_WEEK = 2 THEN CALENDAR_DATE-3
       WHEN DAY_OF_WEEK = 1 THEN CALENDAR_DATE - 2
       WHEN DAY_OF_WEEK = 7 THEN CALENDAR_DATE - 1 
       ELSE CALENDAR_DATE  
  END AS REPORT_DT
,  CALENDAR_DATE AS CAL_DAY
, DAY_OF_WEEK
, ADD_MONTHS(CAST(((CALENDAR_DATE/100*100)+1) AS DATE),1)-1 AS MONTH_END_DT
FROM SYS_CALENDAR.CALENDAR 
WHERE CALENDAR_DATE/100 = (SELECT CURRENT_BUS_DT/100 FROM CC_COBRA.CC_COBRA_LOAD_LOG WHERE GRID_LOAD_ID = 'C01J16')
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;


COLLECT STATS ON CC_COBRA.WK_FR04_BBR_ME_DATES INDEX(REPORT_DT);
COLLECT STATS ON CC_COBRA.WK_FR04_BBR_ME_DATES INDEX(CAL_DAY);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

SELECT * FROM  CC_COBRA.WK_FR04_BBR_ME_DATES ORDER BY 2;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

/*SECTION 2 STEP 02 COLLECT INTEREST TRANSACTIONS*/

DELETE FROM CC_COBRA.WK_FR04_INT_TXNS ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

INSERT INTO CC_COBRA.WK_FR04_INT_TXNS
SELECT 
	A.AGRMNT_ID
,	E.FEATUR_ID
,	A.SOURCE_START_DT
,   SUM(A.EVENT_AM)

FROM GDW_VIEWS.CC_MONETARY_TRANSACTION_HIST A
JOIN CC_COBRA.WK_FR04_BBR_ME_DATES D
ON   A.SOURCE_START_DT = D.CAL_DAY
AND  A.EVENT_ACTVTY_CD IN (SELECT EVENT_ACTVTY_CD FROM CC_COBRA.TRNSCN_DERVTN_GROUPS WHERE TRNSCN_DERVTN_GRP = 'INTEREST')
AND  NOT EXISTS (
SELECT NULL
FROM CC_COBRA.CC_EVENTS_TO_EXCLUDE B
WHERE A.EVENT_ID = B.EVENT_ID)
JOIN CC_COBRA.CC_EVENT_FEATURE_ID E
ON   A.EVENT_ID = E.EVENT_ID
GROUP BY 1,2,3
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

COLLECT STATS ON CC_COBRA.WK_FR04_INT_TXNS INDEX( AGRMNT_ID );

/*SECTION 2 STEP 03 WORK TABLE FOR EFFICIENCY*/

DELETE FROM  CC_COBRA.WK_FR04_BBR ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

INSERT INTO CC_COBRA.WK_FR04_BBR
SELECT     
	   DC.CAL_DAY AS REPORT_DT
      ,AD.ORG_TX
      ,AD.CREDIT_CARD_LOGO_CD
      ,COALESCE(S.SCHEME, 'U') AS CARD_SCHEME_TX
      ,AD.AGRMNT_ID
      ,CAF.FEATUR_ID
      ,CAST(CAF.PLAN_NO AS CHAR(5))
      ,CAD.BC_1
      ,CAD.BC_2
      ,CAD.INT_STATUS
      ,CAD.WAIVE_INT_FLAG
      ,CASE WHEN (CAD.BC_1 = 'I' 
            OR CAD.BC_2 = 'I')
            AND CAD.INT_STATUS <> 'Z' THEN 99.999
            ELSE CAF.PLAN_AIR
       END 
      ,CASE WHEN CAD.INT_STATUS IN ('Z') THEN 'Z'
            WHEN CAD.INT_STATUS IN ('F') THEN 'S'
            WHEN CAD.BC_1 = 'I' 
            OR CAD.BC_2 = 'I' THEN 'I'
            WHEN (CAD.BC_1 = 'F' 
            OR CAD.BC_2 = 'F') AND CAF.PLAN_AIR = 5.784 THEN 'F'
            ELSE ' '
       END    
      ,CAF.PLAN_BALANC_AM * -1 
, CASE WHEN CAF.ITO_EFFCTV_DT <= DC.CAL_DAY+30 THEN 1 ELSE 0 END AS PROMO_30DAYEXP /* 20190515PG - ADDED IN V16        */
FROM  		CC_COBRA.CC_AGREEMENT_ADDED_DATE AD

JOIN  		CC_COBRA.WK_FR04_BBR_ME_DATES DC
ON    		AD.ADDED_DT <= DC.REPORT_DT
AND   		(AD.PURGED_DT IS NULL OR DC.REPORT_DT < AD.PURGED_DT)

JOIN  		CC_COBRA.CC_ACCOUNT_DAILY CAD
ON    		AD.AGRMNT_ID = CAD.AGRMNT_ID
AND   		DC.REPORT_DT = CAD.REPORT_DT

JOIN  		CC_COBRA.CC_ACCOUNT_FEATURE_DAILY CAF
ON    		AD.AGRMNT_ID = CAF.AGRMNT_ID
AND   		DC.REPORT_DT = CAF.REPORT_DT

JOIN  	    CC_COBRA.FR14_PRODUCT_SCHEME S
ON     		AD.CREDIT_CARD_LOGO_CD = S.LOGO_VL
AND    		AD.ORG_TX = S.ORG_TX;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

COLLECT STATS ON CC_COBRA.WK_FR04_BBR INDEX(AGRMNT_ID);
COLLECT STATS ON CC_COBRA.WK_FR04_BBR INDEX(PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

/*SECTION 2 STEP 04 AGGREGATION INTO MAIN STORAGE TABLE*/

/*
CREATE SET TABLE CC_COBRA.FR04_BBR_ME ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      REPORT_DT DATE FORMAT 'YYYY-MM-DD',
      ORG_TX CHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC,
      CREDIT_CARD_LOGO_CD SMALLINT,
      CARD_SCHEME_TX CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('A','M','V'),
      PLAN_NO CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      STATUS CHAR(1) CHARACTER SET LATIN NOT CASESPECIFIC,
      WAIVE_INT_FLAG BYTEINT COMPRESS(0,1),
      INTEREST_RATE DECIMAL(5,3),
      BALANC_TYPE_CD CHAR(6) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ('BIBB  ','CHRDSP','CIBB  ','CIMPRD','ISTAT ','NEW   ','RHRDSP','RIBB  ','RIMPRD','RNIBB ','ZZZZZZ','PIBB  ','PIMPRD','PHRDSP'),
      BALANCE_AM DECIMAL(15,2) COMPRESS (0),
      INTEREST_AM DECIMAL(15,2) COMPRESS (0),
      VOLUME INTEGER COMPRESS (1,2)
	  PROMO_30DAYEXP SMALLINT COMPRESS (0 ,1 ))
PRIMARY INDEX ( REPORT_DT ,ORG_TX ,CREDIT_CARD_LOGO_CD,STATUS,INTEREST_RATE,PLAN_NO);
*/

DELETE FROM CC_COBRA.FR04_BBR_ME ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

INSERT INTO CC_COBRA.FR04_BBR_ME
SELECT     
	   A.REPORT_DT 
      ,A.ORG_TX
      ,A.CREDIT_CARD_LOGO_CD
      ,A.CARD_SCHEME_TX
      ,A.PLAN_NO
      ,A.STATUS
      ,CASE WHEN A.WAIVE_INT_FLAG <> 0 THEN 1 ELSE 0 END
      ,A.INTEREST_RATE
      ,COALESCE (LU.MIA_BALANC_TYPE_CD, 'NEW') AS BALANC_TYPE_CD --JAYNE - ADDED SPLIT THAT CHRIS PUT IN INTO THE LOOKUP TO AVOID CASE STATEMENTS 
	  --,COALESCE (CASE WHEN PT.NEW_BALANC_TYPE_CD IN ('PZIBB','PIBB','MIBB','MZIBB') THEN LU.BALANC_TYPE_CD ELSE LU.MIA_BALANC_TYPE_CD END, 'NEW') AS BALANC_TYPE_CD --20180105CA	-	change requested by KH+MS
	  --cont...  they want PIBB split to PZIBB and PIBB, MTs split out of BIBB/BZIBB and everything else to stay same
	  --,COALESCE (LU.MIA_BALANC_TYPE_CD, 'NEW') AS BALANC_TYPE_CD --EYNON 2017-11-10.
      -- ,COALESCE(LU.PREV_BALANC_TYPE_CD, 'NEW') AS BALANC_TYPE_CD --change JM 2017-05-19
      ,SUM(ZEROIFNULL(A.BALANCE_AM)) AS BALANCE_AM
      ,SUM(ZEROIFNULL(EVENT_AM)) AS INT_AM
      ,COUNT(*) AS VOLUME
      , PROMO_30DAYEXP /* 20190515PG - ADDED IN V16        */
FROM  		CC_COBRA.WK_FR04_BBR A

JOIN 		CC_COBRA.CC_PLAN_LOOKUP PL
ON     		A.PLAN_NO = PL.PLAN_NO 
AND    		A.ORG_TX = PL.ORG_TX

LEFT JOIN 	CC_COBRA.FR15_AGRMNT_FEATUR_PLAN_TYPE PT
ON 			A.AGRMNT_ID = PT.AGRMNT_ID  
AND 		A.FEATUR_ID = PT.FEATUR_ID  
AND 		A.REPORT_DT BETWEEN PT.SOURCE_START_DT AND PT.SOURCE_END_DT - 1

LEFT JOIN   CC_COBRA.FR15_BALANC_TYPE_CD_LOOKUP LU --change JM 2017-05-19
ON          PT.NEW_BALANC_TYPE_CD = LU.BALANC_TYPE_CD

LEFT JOIN   CC_COBRA.WK_FR04_INT_TXNS I
ON 			A.AGRMNT_ID = I.AGRMNT_ID  
AND 		A.FEATUR_ID = I.FEATUR_ID   
AND         A.REPORT_DT = I.SOURCE_START_DT 
GROUP BY 1,2,3,4,5,6,7,8,9, 13      /* 20190515PG - ADDED IN V16        */  
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

COLLECT STATS ON CC_COBRA.FR04_BBR_ME  INDEX( REPORT_DT ,ORG_TX ,CREDIT_CARD_LOGO_CD,STATUS,INTEREST_RATE,PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;


/**********************************/
/* SECTION 3                      */
/* MOVE DATA AROUND TO HST TABLES */
/**********************************/

/*MONTH END TABLES FIRST*/

DELETE FROM CC_COBRA.FR04_BBR_ME_HST WHERE REPORT_DT IN (SELECT CAL_DAY FROM CC_COBRA.WK_FR04_BBR_ME_DATES);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

INSERT INTO CC_COBRA.FR04_BBR_ME_HST
SELECT *
FROM  CC_COBRA.FR04_BBR_ME;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERROR;

COLLECT STATS ON CC_COBRA.FR04_BBR_ME_HST  INDEX( REPORT_DT ,ORG_TX ,CREDIT_CARD_LOGO_CD,STATUS,INTEREST_RATE,PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

/*MONTH TO DATE TABLES NEXT*/

DELETE FROM CC_COBRA.FR04_BBR_MTD_HST 
WHERE REPORT_DT IN (SELECT CAL_DAY FROM CC_COBRA.WK_FR04_BBR_ME_DATES)  --USING THIS TABLE TO MAKE SURE WE ONLY MOVE THE LAST MONTH OF DATA
AND EXISTS (
SELECT NULL
FROM CC_COBRA.FR04_BBR_MTD B
WHERE CC_COBRA.FR04_BBR_MTD_HST.REPORT_DT = B.REPORT_DT)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

INSERT INTO CC_COBRA.FR04_BBR_MTD_HST
SELECT *
FROM  CC_COBRA.FR04_BBR_MTD
WHERE REPORT_DT IN (SELECT CAL_DAY FROM CC_COBRA.WK_FR04_BBR_ME_DATES)
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

COLLECT STATS ON CC_COBRA.FR04_BBR_MTD_HST  INDEX( REPORT_DT ,ORG_TX ,CREDIT_CARD_LOGO_CD,STATUS,INTEREST_RATE,PLAN_NO);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

DELETE FROM CC_COBRA.FR04_BBR_MTD WHERE REPORT_DT IN 
(
SELECT REPORT_DT FROM CC_COBRA.FR04_BBR_MTD_HST GROUP BY 1
);

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

DELETE FROM CC_COBRA.WK_FR04_BBR ALL;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

/*UPDATE THE LOG TABLE IF IT HAS RUN OK!*/

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  CURRENT_LOAD_DT = DATE
   , CURRENT_BUS_DT = (SELECT MONTH_END_DT FROM CC_COBRA.WK_FR04_BBR_ME_DATES GROUP BY 1)
   , UPDATE_DT = DATE
   , UPDATE_TM = TIME
   , LOAD_STATUS = 'C'
WHERE GRID_LOAD_ID = 'FR04R'
;

.IF ERRORCODE <> 0 THEN .GOTO FOUNDERRME;

.LABEL SKIPME;

.QUIT;

.LABEL SKIPJOB;

.QUIT;

.LABEL GRIDERROR;

.QUIT;

.LABEL FOUNDERRMTD;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR04'
;

.QUIT 0;


.LABEL FOUNDERRME;

UPDATE CC_COBRA.CC_COBRA_LOAD_LOG
SET  LOAD_STATUS = 'F'
WHERE GRID_LOAD_ID = 'FR04R'
;

.QUIT 0;
